{"version":3,"sources":["../src/db/models/butcher.ts"],"names":[],"mappings":"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","file":"butcher.js","sourcesContent":["import { Table, Column, DataType, Model, HasMany, CreatedAt, UpdatedAt, DeletedAt, Unique, Default, AllowNull, ForeignKey, BelongsTo } from 'sequelize-typescript';\nimport BaseModel from \"./basemodel\"\nimport Area, { AreaLevels } from './area';\nimport ButcherProduct from './butcherproduct';\nimport Product from './product';\nimport { Op } from 'sequelize';\nimport { Badge } from '../../models/badge';\nimport { Puan } from '../../models/puan';\nimport AccountModel from './accountmodel';\nimport { Account } from '../../models/account';\nimport Helper from '../../lib/helper';\n\n\n\n@Table({\n    tableName: \"Butchers\",\n    indexes: [\n        { type: 'FULLTEXT', name: 'butcher_fts', fields: ['name', 'slug', 'keywords'] }]\n})\nclass Butcher extends BaseModel<Butcher> {\n\n    @AllowNull(false)\n    @Column\n    name: string;\n\n    @AllowNull(false)\n    @Column\n    legalName: string;\n\n    @Unique({ name: \"slug_idx\", msg: \"\" })\n    @AllowNull(false)\n    @Column\n    slug: string;\n\n    get userRatingAsPerc() {\n        return Math.round((this.userRating * 2) * 10);\n    }\n\n    get shipRatingAsPerc() {\n        let succ = this.shipTotalCount - this.shipFailureCount;\n        return this.shipTotalCount > 0 ? Math.round((succ / this.shipTotalCount) * 100): 0;\n    }\n\n    @Column({\n        allowNull: false,\n        defaultValue: 0,\n        type: DataType.DECIMAL(5, 2)\n    })    \n    userRating: number;    \n\n    @Column({\n        allowNull: false,\n        type: DataType.INTEGER,\n        defaultValue: 0\n    })    \n    userRatingCount: number;      \n\n    @Column({\n        allowNull: false,\n        type: DataType.INTEGER,\n        defaultValue: 0\n    })    \n    shipFailureCount: number;      \n\n    @Column({\n        allowNull: false,\n        type: DataType.INTEGER,\n        defaultValue: 0\n    })    \n    shipTotalCount: number;          \n\n    @AllowNull(false)\n    @Default(false)\n    @Column\n    approved: boolean;\n\n    @Unique({ name: \"gpid_idx\", msg: \"\" })\n    @Column\n    gpid: string;\n\n    @Column\n    gplastdate: Date\n\n    @Column\n    gpplacejson: Buffer\n\n    get gpPlace(): Object {\n        return JSON.parse((<Buffer>this.getDataValue('gpplacejson')).toString())\n    }\n\n    set gpPlace(value: Object) {\n        this.setDataValue('gpplacejson', Buffer.from(JSON.stringify(value), \"utf-8\"));\n    }\n\n    @ForeignKey(() => Area)\n    @Column\n    areaLevel1Id: number;\n\n    @BelongsTo(() => Area, \"areaLevel1Id\")\n    areaLevel1: Area;\n\n    @ForeignKey(() => Area)\n    @Column\n    areaLevel2Id: number;\n\n    @BelongsTo(() => Area, \"areaLevel2Id\")\n    areaLevel2: Area;\n\n    @ForeignKey(() => Area)\n    @Column\n    areaLevel3Id: number;\n\n    @BelongsTo(() => Area, \"areaLevel3Id\")\n    areaLevel3: Area;\n\n    @Column\n    address: string;\n\n    @Column({\n        allowNull: true,\n        type: DataType.GEOMETRY('POINT')\n    })\n    location: object;\n\n\n    @Column\n    phone: string;\n\n    @Column\n    website: string;\n\n    @Column({ type: DataType.FLOAT, defaultValue: 0, allowNull: false })\n    rating: number;\n\n    @Default(0)\n    @AllowNull(false)\n    @Column\n    ratingCount: number;\n\n    thumbnail: string;\n\n    @Column\n    postal: string;\n\n    @Column\n    pageTitle: string;\n\n    @Column\n    keywords: string;\n\n    @Column\n    pageDescription: string;\n\n\n    @Column\n    instagram: string;\n\n    @Column\n    facebook: string;\n\n    @Column({\n        allowNull: true,\n        type: DataType.TEXT\n    })\n    description: string;\n\n    @Column({\n        allowNull: true,\n        type: DataType.TEXT\n    })\n    mddesc: string;\n\n\n    @Column({\n        allowNull: true\n    })\n    iban: string;    \n\n    @Column({\n        allowNull: true\n    })\n    companyType: string;      \n    \n    @Column({\n        allowNull: true\n    })\n    taxOffice: string;        \n    \n    @Column({\n        allowNull: true\n    })\n    taxNumber: string;      \n\n    @Column({\n        allowNull: true\n    })\n    email: string;   \n    \n    @Column({\n        allowNull: false,\n        defaultValue: false\n    })\n    enableCreditCard: boolean;   \n\n    @Column({\n        allowNull: true\n    })\n    badges: string;   \n\n    getPuanData(): Puan {\n        return this.enablePuan ? {\n            name: 'Kasap Kart Puanı',\n            minSales: this.minSalesPuan,\n            rate: this.customerPuanRate,\n            minPuanForUsage: this.minPuanUsage\n        }: null        \n    }\n\n\n\n    getBadgeList(): Badge[] {\n        let list: Badge[] = []\n\n   \n\n        if (this.enablePuan) {\n            list.push({\n                icon: '',\n                name: 'Kasap Kart™',\n                tip: 'Alışverişlerinizden puan kazandırır'\n            })            \n        }\n\n        // if (this.enableCreditCard) {\n        //     list.push({\n        //         icon: 'czi-card',\n        //         name: 'Online/Kapıda Ödeme',\n        //         tip: 'Online veya kapıda ödeme yapabilirsiniz'\n        //     })\n        // } \n     \n        return list;\n    }\n\n    @Column({\n        allowNull: true\n    })\n    iyzicoSubMerchantKey: string;   \n\n    @Column({\n        allowNull: true\n    })\n    notifyMobilePhones: string;   \n\n    @Column({\n        allowNull: false,\n        type: DataType.DECIMAL(10, 4),\n        defaultValue: 0.02\n    })\n    payCommissionRate: number;    \n\n    @Column({\n        allowNull: false,\n        type: DataType.DECIMAL(13, 2),\n        defaultValue: 0.00\n    })\n    payCommissionFee: number;      \n\n\n    @Column({\n        allowNull: false,\n        type: DataType.DECIMAL(10, 4),\n        defaultValue: 0.1\n    })\n    commissionRate: number;    \n\n    @Column({\n        allowNull: false,\n        type: DataType.DECIMAL(13, 2),\n        defaultValue: 0.00\n    })\n    commissionFee: number;   \n\n    @Column({\n        allowNull: false,\n        type: DataType.DECIMAL(13, 2),\n        defaultValue: 0.00\n    })\n    minSalesPuan: number;       \n\n    @Column({\n        allowNull: false,\n        type: DataType.DECIMAL(5, 2),\n        defaultValue: 0.01\n    })\n    customerPuanRate: number;      \n\n    @Column({\n        allowNull: false,\n        type: DataType.DECIMAL(13, 2),\n        defaultValue: 50.00\n    })\n    minPuanUsage: number;      \n\n    @Column({\n        allowNull: false,\n        defaultValue: false\n    })\n    enablePuan: boolean;   \n    \n    \n\n    @Column\n    videoinstagram: Buffer;\n\n    @HasMany(() => ButcherProduct, {\n        sourceKey: \"id\",\n        foreignKey: \"butcherid\",\n        //as: \"ButcherProduct\"\n    })\n    products: ButcherProduct[];\n\n\n    get videoInstagramStr(): string {\n        return this.getDataValue('videoinstagram') ? (<Buffer>this.getDataValue('videoinstagram')).toString() : \"\"\n    }\n\n    set videoInstagramStr(value: string) {\n        this.setDataValue('videoinstagram', Buffer.from(value));\n    }\n\n    get lat(): number {\n        return this.location ? (<any>this.location).coordinates[0]: 0\n    }\n\n    get lng(): number {\n        return this.location ? (<any>this.location).coordinates[1]: 0\n    }    \n\n\n    getProducts(): Product[] {\n        let result = [];\n        for (let i = 0; i < this.products.length; i++) {\n            result.push(this.products[i].product)\n        }\n        return result;\n    }\n\n    static async sellingButchers(productid: number, areas?: AreaLevels) {\n        let where = {\n            productid: productid,\n            [Op.or]: [\n                {\n                    kgPrice: {\n                        [Op.gt]: 0.0\n                    }\n                },\n                {\n                    unit1price: {\n                        [Op.gt]: 0.0\n                    }\n                },\n                {\n                    unit2price: {\n                        [Op.gt]: 0.0\n                    }\n                },\n                {\n                    unit3price: {\n                        [Op.gt]: 0.0\n                    }\n                }\n\n            ],\n            enabled: true\n        }\n        if (areas) {\n            areas.level1Id ? where['$butcher.areaLevel1Id$'] = areas.level1Id : null;\n            areas.level2Id ? where['$butcher.areaLevel2Id$'] = areas.level2Id : null;;\n            areas.level3Id ? where['$butcher.areaLevel3Id$'] = areas.level3Id : null;\n        }\n        return await ButcherProduct.findAll({\n            where: where,\n            include: [Butcher]\n        })\n    }\n\n    static async getByArea(id, level) {\n        let col = `areaLevel${level}Id`;\n        let where = {};\n        where[col] = id;\n        return await Butcher.findAll(\n            {\n                include: [{\n                    all: true\n                }],\n                where: where\n            }\n        )\n    }\n\n    static async getBySlug(slug: string) {\n        return await Butcher.findOne(\n            {\n                include: [{\n                    all: true\n                }],\n                where: {\n                    slug: slug\n                }\n            }\n        )\n    }\n\n}\n\nexport default Butcher;"],"sourceRoot":"../../../src/"}