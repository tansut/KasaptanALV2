{"version":3,"sources":["../src/db/models/accountmodel.ts"],"names":[],"mappings":"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","file":"accountmodel.js","sourcesContent":["import { Table, Column, DataType, Model, HasMany, CreatedAt, UpdatedAt, DeletedAt, Unique, Default, AllowNull, ForeignKey, BelongsTo } from 'sequelize-typescript';\nimport BaseModel from \"./basemodel\"\nimport { AccountingOperation, Account } from '../../models/account';\nimport Helper from '../../lib/helper';\nimport { SaveOptions } from 'sequelize/types';\nconst orderid = require('order-id')('dkfjsdklfjsdlkg450435034.,')\nimport * as sq from 'sequelize';\nimport { Op } from 'sequelize';\nimport { threadId } from 'worker_threads';\n\n\n@Table({\n    tableName: \"Accounts\",\n    indexes: [{\n        name: \"acc_idx_1\",\n        fields: [\"code\"]\n    },\n\n    {\n        name: \"acc_idx_2\",\n        fields: [\"operation\", \"accorder\"]\n    }]\n})\n\n\nclass AccountModel extends BaseModel<AccountModel> {\n\n    static fromAccount(l: Account) {\n        return new AccountModel({            \n                borc: l.borc,\n                alacak: l.alacak,\n                code: l.code,\n                opDesc: l.opDesc,                \n                itemDesc: l.itemDesc,\n                date: Helper.Now()\n          \n        })\n    }\n\n    static addTotals(list: AccountModel []) {\n        let b = 0.00, a = 0.00;        \n        list.forEach(l=> {\n            b+=Helper.asCurrency(l.borc);\n            a+=Helper.asCurrency(l.alacak);\n        })\n\n        list.push(new AccountModel({\n            alacak: Helper.asCurrency(a),\n            borc: Helper.asCurrency(b),\n            code: 'total',\n            desc: 'Toplam'\n        }))\n    }\n\n    static async list(codes: string[]) {\n        let list = await AccountModel.findAll({\n            where: {\n                code: {\n                    [Op.or]: codes.map(c=>{\n                        return {\n                            [Op.like]: c + '%' \n                        }\n                    })\n                }\n            },\n            order: [['date', 'asc']]\n        })\n\n\n        AccountModel.addTotals(list)\n\n        return list;\n    }\n\n    static async summary(codes: string[]): Promise<AccountModel> {\n        let result = new AccountModel({\n            code: 'total',\n            name: 'Toplam'\n        });\n        let b = 0.00, a = 0.00\n        for(let i=0;i<codes.length;i++) {\n            let totals = await <any>AccountModel.sequelize.query(\n                \"SELECT sum(borc) as b, sum(alacak) as a FROM Accounts where code like :code\"\n               ,\n                {                \n                    replacements: { code: codes[i] + '%' },\n                    type: sq.QueryTypes.SELECT,\n                    mapToModel: false,\n                    raw: true\n                })\n             let numbers = (totals.length <= 0) ?[0.00, 0.00]: [Helper.asCurrency(totals[0].b || 0), Helper.asCurrency(totals[0].a || 0)]\n             result[codes[i]] = numbers;\n             b+=Helper.asCurrency(numbers[0]);\n             a+=Helper.asCurrency(numbers[1]);\n        }\n        result.borc = Helper.asCurrency(b);\n        result.alacak = Helper.asCurrency(a);\n        return result;\n    }\n\n    static async saveOperation(list: AccountingOperation, ops: SaveOptions) {\n        let arr = [];\n        list.accounts.forEach((l, i) => {\n            var dbItem = AccountModel.fromAccount(l);\n            dbItem.accorder = i;\n            dbItem.operation = list.opcode;\n            dbItem.opDesc = list.desc;\n            arr.push(dbItem.save(ops))      \n        })\n        return Promise.all(arr);\n    }\n\n    @Column({\n        allowNull: false\n    })\n    code: string;\n\n    @Column({\n        allowNull: true\n    })\n    name: string;    \n\n    @Column({\n        allowNull: false,\n        type: DataType.INTEGER\n    })\n    accorder: number;    \n\n    @Column({\n        allowNull: false,\n        type: DataType.DECIMAL(13, 2)\n    })\n    borc: number;\n    \n    @Column({\n        allowNull: false,\n        type: DataType.DECIMAL(13, 2)\n    })\n    alacak: number;\n\n    @Column({\n        allowNull: false\n    })\n    opDesc: string;\n\n    @Column({\n        allowNull: false\n    })\n    itemDesc: string;    \n    \n    @Column({\n        allowNull: false        \n    })\n    operation: string;        \n\n    @Column({\n        allowNull: false        \n    })\n    date: Date;       \n}\n\nexport default AccountModel;"],"sourceRoot":"../../../src/"}