{"version":3,"sources":["../src/db/models/user.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,+DAAsG;AACtG,iCAAiC;AAEjC,2CAAmC;AACnC,4CAA4C;AAC5C,mCAAmC;AACnC,6CAAsC;AACtC,yCAAkC;AAGlC,IAAY,QAEX;AAFD,WAAY,QAAQ;AAEpB,CAAC,EAFW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAEnB;AAmCD,IAAqB,IAAI,YAAzB,MAAqB,IAAK,SAAQ,mBAAe;IAkC7C,MAAM,CAAC,sBAAsB,CAAC,KAAa;QACvC,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;QACpB,IAAI,KAAK,GAAG,mBAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACnC,KAAK,EAAE,KAAK,CAAC,WAAW,EAAE;SAC7B,CAAC,CAAC,CAAC;YACI,MAAM,EAAE,gBAAM,CAAC,cAAc,CAAC,KAAK,CAAC;SACvC,CAAA;QACL,IAAI,CAAC,GAAG,MAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;QACvC,OAAO,CAAC,CAAC;IACb,CAAC;IAED,OAAO,CAAC,IAAY;QAChB,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC5B,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC;IAED,WAAW,CAAC,QAAgB;QACxB,IAAI,YAAY,GAAG,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QAC1C,IAAI,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;QACnD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACzB,CAAC;IAED,QAAQ;QACJ,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,IAAI,EAAE,CAAA;QAC5B,OAAO,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;IAyCD,QAAQ;QACJ,OAAO,KAAK,CAAC,QAAQ,CAAC,cAAO,CAAC,CAAC;IACnC,CAAC;IAED,cAAc,CAAC,QAAgB;QAC3B,OAAO,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAA;IACtD,CAAC;IAKD,IAAI,QAAQ;QACR,OAAO,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAU,IAAI,CAAC,YAAY,CAAC,cAAc,CAAE,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;IACxG,CAAC;IAED,IAAI,QAAQ,CAAC,KAAU;QACnB,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;IACnF,CAAC;IAED,UAAU;IACV,+BAA+B;IAE/B,6CAA6C;IAC7C,2HAA2H;IAC3H,IAAI;IAEJ,kDAAkD;IAClD,8FAA8F;IAC9F,QAAQ;IAGR,mBAAmB;QACf,IAAI,SAAS,GAAmC;YAC5C,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC;YAClB,eAAe,EAAE,MAAM,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE;YACpD,KAAK,EAAE,EAAE;SACZ,CAAC;QACF,OAAO,SAAS,CAAC;IACrB,CAAC;CACJ,CAAA;AAzIG;IADC,6BAAM;;mCACO;AAGd;IADC,6BAAM;;kCACM;AAGb;IADC,6BAAM;;oCACQ;AAGf;IADC,6BAAM;;sCACU;AAGjB;IADC,6BAAM;;wCACa;AAGpB;IADC,6BAAM;;mCACM;AAGb;IADC,6BAAM;8BACW,IAAI;6CAAC;AAGvB;IADC,6BAAM;;oCACQ;AAGf;IADC,6BAAM;8BACI,IAAI;uCAAA;AAGf;IADC,6BAAM;;yCACY;AAGnB;IADC,6BAAM;;uCACW;AAiClB;IAJC,6BAAM,CAAC;QACJ,SAAS,EAAE,KAAK;QAChB,YAAY,EAAC,gBAAgB;KAChC,CAAC;;oCACa;AAMf;IAJC,6BAAM,CAAC;QACJ,SAAS,EAAE,KAAK;QAChB,YAAY,EAAC,CAAC;KACjB,CAAC;;sCACe;AAKjB;IAHC,6BAAM,CAAC;QACJ,SAAS,EAAE,IAAI;KAClB,CAAC;;0CACmB;AAKrB;IAHC,6BAAM,CAAC;QACJ,SAAS,EAAE,IAAI;KAClB,CAAC;;0CACmB;AAKrB;IAHC,6BAAM,CAAC;QACJ,SAAS,EAAE,IAAI;KAClB,CAAC;;0CACmB;AAMrB;IAJC,6BAAM,CAAC;QACJ,SAAS,EAAE,KAAK;QAChB,YAAY,EAAE,KAAK;KACtB,CAAC;;4CACsB;AAMxB;IAJC,6BAAM,CAAC;QACJ,SAAS,EAAE,KAAK;QAChB,YAAY,EAAE,KAAK;KACtB,CAAC;;2CACqB;AAWvB;IADC,6BAAM;8BACO,MAAM;0CAAA;AA7GH,IAAI;IAbxB,4BAAK,CAAC;QACH,SAAS,EAAE,OAAO;QAClB,OAAO,EAAE;YACL;gBACI,MAAM,EAAE,IAAI;gBACZ,MAAM,EAAE,CAAC,OAAO,CAAC;aACpB;YACD;gBACI,MAAM,EAAE,IAAI;gBACZ,MAAM,EAAE,CAAC,QAAQ,CAAC;aACrB;SACJ;KACJ,CAAC;GACmB,IAAI,CA2IxB;kBA3IoB,IAAI;AA2IxB,CAAC","file":"user.js","sourcesContent":["import { Table, Column, Model, HasMany, CreatedAt, UpdatedAt, DeletedAt } from 'sequelize-typescript';\nimport * as moment from 'moment';\nimport * as authorization from '../../lib/authorizationToken';\nimport BaseModel from \"./basemodel\"\nimport { AppUser } from '../../models/user';\nimport * as bcrypt from 'bcryptjs';\nimport Helper from '../../lib/helper';\nimport validator from 'validator';\n\n\nexport enum UserRole {\n\n}\n\nexport interface PreferredAddress {\n    level1Id?: number;\n    level2Id?: number;\n    level3Id?: number;\n\n    level1Text?: string;\n    level2Text?: string;\n    level3Text?: string;\n\n    level1Slug?: string;\n    level2Slug?: string;\n    level3Slug?: string;    \n\n    level1Status?: string;\n    level2Status?: string;\n    level3Status?: string;\n\n    display?: string;\n}\n\n@Table({\n    tableName: \"Users\",\n    indexes: [\n        {\n            unique: true,\n            fields: ['email']\n        },\n        {\n            unique: true,\n            fields: ['mphone']\n        }\n    ]\n})\nexport default class User extends BaseModel<User> {\n    @Column\n    email: string;\n\n    @Column\n    name: string;\n\n    @Column\n    mphone: string;\n\n    @Column\n    password: string;\n\n    @Column\n    resetToken?: string;\n\n    @Column\n    roles: string\n\n    @Column\n    resetTokenValid?: Date;\n\n    @Column\n    ivCode: string;\n\n    @Column\n    lastLogin: Date\n\n    @Column\n    lastAddress: string    \n\n    @Column\n    butcherid: number;\n\n    static retrieveByEMailOrPhone(email: string) {\n        email = email || \"\";\n        let where = validator.isEmail(email) ? {\n            email: email.toLowerCase()\n        } : {\n                mphone: Helper.getPhoneNumber(email)\n            }\n        var q = User.findOne({ where: where });\n        return q;\n    }\n\n    hasRole(role: string) {\n        let roles = this.getRoles();\n        return roles.indexOf(role) >= 0;\n    }\n\n    setPassword(password: string) {\n        var passwordSalt = bcrypt.genSaltSync(10);\n        var hash = bcrypt.hashSync(password, passwordSalt);\n        this.password = hash;\n    }\n\n    getRoles() {\n        let roles = this.roles || \"\"\n        return roles.split(\",\");\n    }\n\n    @Column({\n        allowNull: false       ,\n        defaultValue:\"kasaptanal.com\" \n    })\n    source: string;     \n    \n    @Column({\n        allowNull: false       ,\n        defaultValue:0 \n    })\n    sourceId: number;         \n\n    @Column({\n        allowNull: true        \n    })\n    lastLevel1Id: number;  \n    \n    @Column({\n        allowNull: true        \n    })\n    lastLevel2Id: number;     \n    \n    @Column({\n        allowNull: true        \n    })\n    lastLevel3Id: number;       \n\n    @Column({\n        allowNull: false,\n        defaultValue: false\n    })\n    mphoneverified: boolean;\n\n    @Column({\n        allowNull: false,\n        defaultValue: false\n    })\n    emailverified: boolean;\n\n    toClient() {\n        return super.toClient(AppUser);\n    }\n\n    verifyPassword(password: string): boolean {\n        return bcrypt.compareSync(password, this.password)\n    }\n\n    @Column\n    shopcardjson: Buffer\n\n    get shopcard(): any {\n        return this.shopcardjson ? JSON.parse((<Buffer>this.getDataValue('shopcardjson')).toString()) : null\n    }\n\n    set shopcard(value: any) {\n        this.setDataValue('shopcardjson', Buffer.from(JSON.stringify(value), \"utf-8\"));\n    }\n\n    // @Column\n    // preferredAddressjson: Buffer\n\n    // get preferredAddress(): PreferredAddress {\n    //     return this.preferredAddressjson ? JSON.parse((<Buffer>this.getDataValue('preferredAddressjson')).toString()) : null\n    // }\n\n    // set preferredAddress(value: PreferredAddress) {\n    //     this.setDataValue('preferredAddressjson', Buffer.from(JSON.stringify(value), \"utf-8\"));\n    // }    \n\n\n    generateAccessToken(): authorization.IAccessTokenData {\n        var tokenData = <authorization.IAccessTokenData>{\n            userId: this[\"id\"],\n            expiration_time: moment().add('minute', 30).toDate(),\n            props: []\n        };\n        return tokenData;\n    }\n};"],"sourceRoot":"../../../src/"}