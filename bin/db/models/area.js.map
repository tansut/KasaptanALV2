{"version":3,"sources":["../src/db/models/area.ts"],"names":[],"mappings":"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","file":"area.js","sourcesContent":["import { Table, Column, DataType, Model, HasMany, CreatedAt, UpdatedAt, DeletedAt, Unique, Default, AllowNull, ForeignKey, BelongsTo } from 'sequelize-typescript';\nimport BaseModel from \"./basemodel\"\nimport Helper from '../../lib/helper';\nimport { PreferredAddress } from './user';\n\ninterface AreaDict {\n    [key: number]: Area;\n}\n\nexport interface AreaLevels {\n    level1Id?: number;\n    level2Id?: number;\n    level3Id?: number;\n}\n\n@Table({\n    tableName: \"Areas\",\n    indexes: [{\n        name: \"lowerName_idx\",\n        fields: [\"lowerName\"]\n    },\n    {\n        name: \"slug_level_idx\",\n        fields: [\"slug\", \"level\"],\n        unique: true\n    },\n    \n        { type: 'FULLTEXT', name: 'area_fts', fields: ['name', 'slug', 'keywords'] }]\n})\nclass Area extends BaseModel<Area> {\n    static async NormalizeNames() {\n        let areas = await Area.findAll();\n        for (let i = 0; i < areas.length; i++) {\n            const el = areas[i];\n            el.name = Helper.capitlize(Helper.toLower(el.name))\n            let r = await el.save();\n        }\n        return areas;\n    }\n\n    static async getBySlug(slug: string) {\n        return Area.findOne({\n            where: {\n                slug: slug\n            }\n        })\n    }\n\n    @Column({\n        allowNull: false,\n    })\n    name: string;\n\n    @Column\n    keywords: string;\n\n    @Column({\n        allowNull: false,\n        defaultValue: 0\n    })\n    displayOrder: number;\n\n    @Column({\n        allowNull: false,\n        defaultValue: 'generic'\n    })\n    status: string;    \n\n    @Column({\n        allowNull: true,\n    })\n    code: string;\n\n    @Column({\n        allowNull: false,\n    })\n    slug: string;\n\n    @Column({\n        allowNull: false,\n    })\n    lowerName: string;\n\n    @Column({\n        allowNull: false\n    })\n    level: number\n\n    @Column({\n        allowNull: true\n    })\n    @ForeignKey(() => Area)\n    parentid: number\n\n    @BelongsTo(() => Area)\n    parent: Area;\n\n    async getPreferredAddress() {\n        let res: PreferredAddress;\n        if (this.level == 1)  {\n            res = {\n                level1Id: this.id,\n                level1Slug: this.slug,\n                level1Text: this.name,\n                display: this.name,\n                level1Status: this.status\n            }\n        } else if (this.level == 2) {\n            let parent = this.parent || await Area.findByPk(this.parentid);\n            res = {\n                level1Id: parent.id,\n                level1Slug: parent.slug,\n                level1Text: parent.name,\n                level1Status: parent.status,\n\n                level2Id: this.id,\n                level2Slug: this.slug,\n                level2Text: this.name,\n                level2Status: this.status,\n                display: this.name + '/' + parent.name\n            }\n        } else {\n            let parentOfParent, parent: Area;            \n            parentOfParent = this.parent && this.parent.parent;\n            if (parentOfParent == null) {\n                parent = this.parent || await Area.findByPk(this.parentid);\n                parentOfParent = parent.parent || await Area.findByPk(parent.parentid);\n            }\n            res = {\n                level1Id: parentOfParent.id,\n                level1Slug: parentOfParent.slug,\n                level1Text: parentOfParent.name,\n                level1Status: parentOfParent.status,\n\n                level2Id: parent.id,\n                level2Slug: parent.slug,\n                level2Text: parent.name,\n                level2Status: parent.status,\n\n                level3Id: this.id,\n                level3Slug: this.slug,\n                level3Text: this.name           ,\n                level3Status: this.status          ,\n                \n                display: this.name + ', ' + parent.name + '/' + parentOfParent.name \n            }            \n        }\n\n        return res;\n    }\n\n    // static async fillCities() {\n    //     await Area.findAll({\n    //         where: {\n    //             level: 1\n    //         },\n            \n    //         raw: true\n    //     }).then(data => {\n    //         for (let i = 0; i < data.length; i++) {\n    //             Area.Cities[data[i].id] = data[i]\n    //         }\n    //     })\n    // }\n\n}\n\nexport default Area;"],"sourceRoot":"../../../src/"}