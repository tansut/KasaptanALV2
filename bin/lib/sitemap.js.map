{"version":3,"sources":["../src/lib/sitemap.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,qCAAwD;AACxD,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;AACtB,sCAA+B;AAC/B,6BAA6B;AAC7B,kDAA2C;AAC3C,oDAA6C;AAC7C,oDAA6C;AAC7C,yCAAyC;AACzC,kDAA2C;AAC3C,kDAA2C;AAC3C,4CAAqC;AACrC,8DAAuD;AAIvD,MAAqB,cAAc;IAG/B,MAAM,CAAE,SAAS;QACb,MAAM,QAAQ,GAAG,IAAI,uBAAa,CAAC,EAAE,QAAQ,EAAE,4BAA4B,EAAE,CAAC,CAAC;QAC/E,OAAO,QAAQ,CAAC;IACpB,CAAC;IAED,MAAM,CAAO,QAAQ,CAAC,MAAqB;;YACvC,IAAI,KAAK,GAAG,MAAM,cAAI,CAAC,OAAO,CAAC;gBAC3B,KAAK,EAAE;oBACH,MAAM,EAAE,QAAQ;iBACnB;aACJ,CAAC,CAAA;YAEF,KAAK,CAAC,OAAO,CAAC,IAAI,CAAA,EAAE;gBAChB,MAAM,CAAC,KAAK,CAAC;oBACT,GAAG,EAAE,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ;iBAC/C,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;QACN,CAAC;KAAA;IAED,MAAM,CAAO,YAAY,CAAC,MAAqB;;YAC3C,IAAI,KAAK,GAAG,MAAM,iBAAO,CAAC,OAAO,CAAC;gBAC9B,OAAO,EAAE;oBACL;wBACI,KAAK,EAAE,cAAI;wBACX,GAAG,EAAE,IAAI;wBACT,EAAE,EAAE,cAAc;qBAErB;iBACJ;gBACD,KAAK,EAAE;oBACH,QAAQ,EAAE,IAAI;iBACjB;aACJ,CAAC,CAAC;YAEH,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAClC,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACpB,IAAI,SAAS,GAAG,MAAM,kBAAQ,CAAC,OAAO,CAAC;oBACnC,KAAK,EAAE;wBACH,IAAI,EAAE,IAAI,CAAC,EAAE;wBACb,IAAI,EAAE,uBAAuB;qBAChC;iBACJ,CAAC,CAAA;gBACF,MAAM,CAAC,KAAK,CAAC;oBACT,GAAG,EAAE,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE;oBACnC,GAAG,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,CAAA,EAAE;wBAClB,OAAO;4BACH,GAAG,EAAE,CAAC,CAAC,UAAU,EAAE;4BACnB,KAAK,EAAE,CAAC,CAAC,KAAK;4BACd,OAAO,EAAE,GAAG,IAAI,CAAC,IAAI,EAAE;4BACf,WAAW,EAAE,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,GAAG,GAAG,QAAQ,CAAC;yBAElF,CAAA;oBACL,CAAC,CAAC;iBACL,CAAC,CAAA;aACL;QAEL,CAAC;KAAA;IAED,MAAM,CAAO,QAAQ,CAAC,MAAqB;;YACvC,IAAI,OAAO,GAAG,MAAM,iBAAO,CAAC,SAAS,CAAC,KAAK,CAAC,sDAAsD,EAAE;gBAChG,GAAG,EAAE,IAAI;gBACT,IAAI,EAAE,sBAAU,CAAC,MAAM;aAC1B,CAAE,CAAA;YAEH,OAAO,CAAC,OAAO,CAAC,IAAI,CAAA,EAAE;gBAClB,MAAM,CAAC,KAAK,CAAC;oBACT,GAAG,EAAE,GAAG,IAAI,CAAC,OAAO,SAAS,IAAI,CAAC,cAAc,CAAC,EAAE;oBACnD,GAAG,EAAE,EAAE;iBACV,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;YAEF,IAAI,KAAK,GAAG,MAAM,iBAAO,CAAC,OAAO,CAAC;gBAC9B,GAAG,EAAE,IAAI;aACZ,CAAC,CAAC;YAEH,KAAK,CAAC,OAAO,CAAC,IAAI,CAAA,EAAE;gBAChB,MAAM,CAAC,KAAK,CAAC;oBACT,GAAG,EAAE,GAAG,IAAI,CAAC,OAAO,SAAS,IAAI,CAAC,IAAI,EAAE;oBACxC,GAAG,EAAE,CAAC;4BACF,GAAG,EAAE,GAAG,gBAAM,CAAC,YAAY,sBAAsB,IAAI,CAAC,IAAI,MAAM;4BAChE,KAAK,EAAE,IAAI,CAAC,KAAK;4BACjB,OAAO,EAAE,IAAI,CAAC,WAAW;yBAC5B,CAAC;iBACL,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;QACN,CAAC;KAAA;IAGD,MAAM,CAAO,SAAS,CAAC,MAAqB;;YACxC,IAAI,KAAK,GAAG,MAAM,kBAAQ,CAAC,OAAO,CAAC;gBAC/B,KAAK,EAAE;oBACH,IAAI,EAAE,CAAC,gBAAgB,EAAE,gBAAgB,CAAC;oBAC1C,CAAC,cAAE,CAAC,EAAE,CAAC,EAAE,CAAC;4BACN,IAAI,EAAE;gCACF,CAAC,cAAE,CAAC,EAAE,CAAC,EAAE,CAAC;wCACN,CAAC,cAAE,CAAC,IAAI,CAAC,EAAE,SAAS;qCAEvB,EAAE,EAAE,CAAC,cAAE,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC;6BAC/B;yBACJ,CAAC;iBACL;aAAC,CAAC,CAAA;YACH,KAAK,CAAC,OAAO,CAAC,IAAI,CAAA,EAAE;gBAChB,MAAM,CAAC,KAAK,CAAC;oBACT,GAAG,EAAG,GAAG,IAAI,CAAC,OAAO,iBAAiB,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE,EAAE;oBAC5D,GAAG,EAAE,IAAI,CAAC,WAAW,IAAI,YAAY,CAAC,CAAC,CAAC,CAAE;4BACtC,GAAG,EAAE,IAAI,CAAC,UAAU,EAAE;4BACtB,KAAK,EAAE,IAAI,CAAC,KAAK;4BACjB,OAAO,EAAE,IAAI,CAAC,WAAW;yBAC5B;qBAEA,CAAA,CAAC,CAAC,EAAE;iBACR,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;QACV,CAAC;KAAA;IAED,MAAM,CAAO,cAAc,CAAC,MAAqB;;YAC7C,IAAI,KAAK,GAAG,MAAM,kBAAQ,CAAC,OAAO,CAAC;gBAC/B,UAAU,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,YAAY,CAAC;gBACxD,GAAG,EAAE,IAAI;aACZ,CAAC,CAAC;YAEH,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAClC,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACpB,IAAI,SAAS,GAAG,MAAM,kBAAQ,CAAC,OAAO,CAAC;oBACnC,KAAK,EAAE;wBACH,IAAI,EAAE,IAAI,CAAC,EAAE;wBACb,IAAI,EAAE,iBAAiB;qBAC1B;iBACJ,CAAC,CAAA;gBACF,MAAM,CAAC,KAAK,CAAC;oBACT,GAAG,EAAE,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,iBAAiB,IAAI,CAAC,IAAI,EAAE,CAAA,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE;oBAC1G,GAAG,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,CAAA,EAAE;wBAClB,OAAO;4BACH,GAAG,EAAE,CAAC,CAAC,UAAU,EAAE;4BACnB,KAAK,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI;4BAC3B,OAAO,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE;yBACjD,CAAA;oBACL,CAAC,CAAC;iBACL,CAAC,CAAA;gBAEF,IAAI,IAAI,CAAC,IAAI,IAAI,UAAU,IAAI,IAAI,CAAC,UAAU,EAAE;oBAC5C,MAAM,CAAC,KAAK,CAAC;wBACT,GAAG,EAAG,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,eAAe;qBACpD,CAAC,CAAA;iBACL;aAEJ;QAGL,CAAC;KAAA;IAED,MAAM,CAAO,mBAAmB,CAAC,MAAqB;;YAClD,IAAI,KAAK,GAAG,MAAM,uBAAa,CAAC,OAAO,CAAC;gBACpC,OAAO,EAAE;oBACL;wBACI,KAAK,EAAE,kBAAQ;qBAClB;iBACJ;aACJ,CAAC,CAAC;YAEH,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAClC,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACpB,IAAI,SAAS,GAAG,MAAM,kBAAQ,CAAC,OAAO,CAAC;oBACnC,KAAK,EAAE;wBACH,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE;wBACtB,IAAI,EAAE,iBAAiB;qBAC1B;iBACJ,CAAC,CAAA;gBACF,MAAM,CAAC,KAAK,CAAC;oBACT,GAAG,EAAE,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE;oBACnC,GAAG,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,CAAA,EAAE;wBAClB,OAAO;4BACH,GAAG,EAAE,CAAC,CAAC,UAAU,EAAE;4BACnB,KAAK,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI;4BAC3B,OAAO,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE;yBACjD,CAAA;oBACL,CAAC,CAAC;iBACL,CAAC,CAAA;aAGL;QAGL,CAAC;KAAA;IAGD,MAAM,CAAO,YAAY,CAAC,MAAqB;;YAC3C,IAAI,KAAK,GAAG,MAAM,iBAAO,CAAC,OAAO,CAAC;gBAC9B,UAAU,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC;gBAClC,GAAG,EAAE,IAAI;aACZ,CAAC,CAAC;YAEH,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAClC,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACpB,IAAI,SAAS,GAAG,MAAM,kBAAQ,CAAC,OAAO,CAAC;oBACnC,KAAK,EAAE;wBACH,IAAI,EAAE,IAAI,CAAC,EAAE;wBACb,IAAI,EAAE,gBAAgB;wBACtB,CAAC,cAAE,CAAC,EAAE,CAAC,EAAE,CAAC;gCACN,IAAI,EAAE,EAAE;6BACX,EAAE;gCACC,IAAI,EAAE,IAAI;6BACb,CAAC;qBACL;iBACJ,CAAC,CAAA;gBAIF,MAAM,CAAC,KAAK,CAAC;oBACT,GAAG,EAAE,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE;oBACnC,GAAG,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,CAAA,EAAE;wBAClB,OAAO;4BACH,GAAG,EAAE,CAAC,CAAC,UAAU,EAAE;4BACnB,KAAK,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI;4BAC3B,OAAO,EAAE,GAAG,IAAI,CAAC,IAAI,EAAE;yBAC1B,CAAA;oBACL,CAAC,CAAC;iBACL,CAAC,CAAA;aAIL;QAEL,CAAC;KAAA;IAED,MAAM,CAAO,IAAI,CAAC,MAAqB;;YACnC,IAAI,WAAW,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAM,CAAC,UAAU,EAAE,aAAa,CAAC,EAAE,MAAM,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACtG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACvB,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,EAAE,EAAG,CAAC,CAAA;YACpD,CAAC,CAAC,CAAC;YACH,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YAChC,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAClC,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;YACvC,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAC7B,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC5B,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YAChC,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAChC,CAAC;KAAA;;AAhPL,iCAiPC;AAhPU,sBAAO,GAAG,4BAA4B,CAAC","file":"sitemap.js","sourcesContent":["import { SitemapStream, streamToPromise} from \"sitemap\";\nvar fs = require('fs')\nimport config from '../config';\nimport * as path from \"path\";\nimport Product from \"../db/models/product\";\nimport Category from \"../db/models/category\";\nimport Resource from \"../db/models/resource\";\nimport {Op, QueryTypes} from \"sequelize\";\nimport Content from \"../db/models/content\";\nimport Butcher from \"../db/models/butcher\";\nimport Area from \"../db/models/area\";\nimport PriceCategory from \"../db/models/pricecategory\";\nimport * as sq from 'sequelize';\n\n\nexport default class SiteMapManager {\n    static baseUrl = 'https://www.kasaptanal.com';\n\n    static  getStream(): SitemapStream {\n        const smStream = new SitemapStream({ hostname: 'https://www.kasaptanal.com' });\n        return smStream;\n    }\n\n    static async fillArea(stream: SitemapStream) {\n        let items = await Area.findAll({\n            where: {\n                status: 'active'\n            }\n        })\n\n        items.forEach(item=>{\n            stream.write({\n                url: `${this.baseUrl}/${item['slug']}-kasap`\n            })\n        })\n    }\n\n    static async fillButchers(stream: SitemapStream) {\n        let items = await Butcher.findAll({\n            include: [\n                {\n                    model: Area,\n                    all: true,\n                    as: \"areaLevel1Id\"\n    \n                }\n            ],\n            where: {\n                approved: true\n            }\n        });\n\n        for(let i = 0; i < items.length; i++) {\n            let item = items[i];\n            let resources = await Resource.findAll({\n                where: {\n                    ref1: item.id,\n                    type: 'butcher-google-photos'\n                }\n            })\n            stream.write({\n                url: `${this.baseUrl}/${item.slug}`,\n                img: resources.map(r=> {\n                    return {\n                        url: r.getFileUrl(),\n                        title: r.title,\n                        caption: `${item.name}`,\n                                geoLocation: item.areaLevel1 && (item.areaLevel1.name + ',' + 'Turkey')\n\n                    }\n                })\n            })            \n        }\n\n    }\n\n    static async fillBlog(stream: SitemapStream) {\n        let catdata = await Content.sequelize.query(\"SELECT distinct category, categorySlug from Contents\", {\n            raw: true  ,\n            type: QueryTypes.SELECT       \n        } )\n\n        catdata.forEach(item=>{\n            stream.write({\n                url: `${this.baseUrl}/blog/${item['categorySlug']}`,\n                img: []\n            })\n        })\n        \n        let items = await Content.findAll({\n            raw: true\n        });\n\n        items.forEach(item=>{\n            stream.write({\n                url: `${this.baseUrl}/blog/${item.slug}`,\n                img: [{\n                    url: `${config.staticDomain}/content-resimleri/${item.slug}.jpg`,\n                    title: item.title,\n                    caption: item.description\n                }]\n            })\n        })\n    }\n\n\n    static async fillFoods(stream: SitemapStream) {\n        let items = await Resource.findAll({\n            where: {\n                type: ['product-videos', 'product-photos'],\n                [Op.or]: [{\n                    tag1: {\n                        [Op.or]: [{\n                            [Op.like]: '%yemek%'\n        \n                        }, { [Op.like]: '%tarif%' }]\n                    }\n                }]\n            }})\n            items.forEach(item=>{\n                stream.write({\n                    url:  `${this.baseUrl}/et-yemekleri/${item.slug || item.id}`,\n                    img: item.contentType == 'image/jpeg' ? [ {\n                        url: item.getFileUrl(),\n                        title: item.title,\n                        caption: item.description\n                    }\n                        \n                    ]: []\n                })\n            })\n    }\n\n    static async fillCategories(stream: SitemapStream) {\n        let items = await Category.findAll({\n            attributes: ['name', 'slug', 'type', 'id', 'tarifTitle'],\n            raw: true\n        });\n\n        for(let i = 0; i < items.length; i++) {\n            let item = items[i];\n            let resources = await Resource.findAll({\n                where: {\n                    ref1: item.id,\n                    type: 'category-photos'\n                }\n            })\n            stream.write({\n                url: item.type == 'resource' ? `${this.baseUrl}/et-yemekleri/${item.slug}`: `${this.baseUrl}/${item.slug}`,\n                img: resources.map(r=> {\n                    return {\n                        url: r.getFileUrl(),\n                        title: r.title || item.name,\n                        caption: `${item.shortdesc}` || `${item.name}`\n                    }\n                })\n            })    \n            \n            if (item.type != 'resource' && item.tarifTitle) {\n                stream.write({\n                    url:  `${this.baseUrl}/${item.slug}/et-yemekleri`\n                })\n            } \n\n        }\n\n\n    } \n\n    static async fillPriceCategories(stream: SitemapStream) {\n        let items = await PriceCategory.findAll({\n            include: [\n                {\n                    model: Category\n                }\n            ]\n        });\n\n        for(let i = 0; i < items.length; i++) {\n            let item = items[i];\n            let resources = await Resource.findAll({\n                where: {\n                    ref1: item.category.id,\n                    type: 'category-photos'\n                }\n            })\n            stream.write({\n                url: `${this.baseUrl}/${item.slug}`,\n                img: resources.map(r=> {\n                    return {\n                        url: r.getFileUrl(),\n                        title: r.title || item.name,\n                        caption: `${item.shortdesc}` || `${item.name}`\n                    }\n                })\n            })    \n            \n\n        }\n\n\n    } \n\n\n    static async fillProducts(stream: SitemapStream) {\n        let items = await Product.findAll({\n            attributes: ['slug', 'name', 'id'],\n            raw: true\n        });\n\n        for(let i = 0; i < items.length; i++) {\n            let item = items[i];\n            let resources = await Resource.findAll({\n                where: {\n                    ref1: item.id,\n                    type: 'product-photos',\n                    [Op.or]: [{\n                        tag1: ''\n                    }, {\n                        tag1: null\n                    }]\n                }\n            })\n\n\n\n            stream.write({\n                url: `${this.baseUrl}/${item.slug}`,\n                img: resources.map(r=> {\n                    return {\n                        url: r.getFileUrl(),\n                        title: r.title || item.name,\n                        caption: `${item.name}`\n                    }\n                })\n            })    \n            \n\n            \n        }\n\n    } \n\n    static async fill(stream: SitemapStream) {\n        var defaultUrls = fs.readFileSync(path.join(config.projectDir, \"siteurl.txt\"), 'utf8').split(/\\r?\\n/);\n        defaultUrls.forEach(line => {\n            stream.write({ url: `${this.baseUrl}${line}`  })\n        });\n        await this.fillProducts(stream);\n        await this.fillCategories(stream);\n        await this.fillPriceCategories(stream);\n        await this.fillFoods(stream);\n        await this.fillBlog(stream);\n        await this.fillButchers(stream);\n        await this.fillArea(stream);\n    }\n}"],"sourceRoot":"../../src/"}