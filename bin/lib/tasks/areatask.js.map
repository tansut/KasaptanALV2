{"version":3,"sources":["../src/lib/tasks/areatask.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,yCAAsC;AAEtC,gCAAgC;AAIhC,yCAA0C;AAE1C,+CAAwC;AAIxC,MAAqB,QAAS,SAAQ,mBAAQ;IAE1C,IAAI,QAAQ;QACR,OAAO,eAAe,CAAA;IAC1B,CAAC;IAIK,GAAG;;YACL,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAA;YAE/C,IAAI,KAAK,GAAG,MAAM,cAAI,CAAC,SAAS,CAAC,KAAK,CAAC;;;;;;;;;;;;;;;;;;aAkBlC,EACD;gBAEI,IAAI,EAAE,EAAE,CAAC,UAAU,CAAC,MAAM;gBAC1B,UAAU,EAAE,KAAK;gBACjB,GAAG,EAAE,IAAI;aACZ,CAAC,CAAA;YAEN,IAAI,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YAGlC,MAAM,cAAI,CAAC,MAAM,CAAC;gBACd,MAAM,EAAE,QAAQ;aACnB,EACG;gBACI,KAAK,EAAE;oBACH,EAAE,EAAE;wBACA,CAAC,cAAE,CAAC,EAAE,CAAC,EAAE,GAAG;qBACf;iBACJ;aACJ,CACJ,CAAA;YAED,MAAM,cAAI,CAAC,MAAM,CAAC;gBACd,MAAM,EAAE,SAAS;aACpB,EACG;gBACI,KAAK,EAAE;oBACH,EAAE,EAAE;wBACA,CAAC,cAAE,CAAC,KAAK,CAAC,EAAE,GAAG;qBAClB;iBACJ;aACJ,CACJ,CAAA;YAED,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAA;QAEhD,CAAC;KAAA;CACJ;AAnED,2BAmEC","file":"areatask.js","sourcesContent":["import { BaseTask } from \"./basetask\";\nimport { Order, OrderItem } from \"../../db/models/order\";\nimport * as sq from 'sequelize';\nimport { OrderItemStatus } from \"../../models/order\";\nimport Butcher from \"../../db/models/butcher\";\nimport Review from \"../../db/models/review\";\nimport { Op, Sequelize } from \"sequelize\";\nimport Product from \"../../db/models/product\";\nimport Area from \"../../db/models/area\";\n\n\n\nexport default class AreaTask extends BaseTask {\n\n    get interval() {\n        return \"0 0 */1 * * *\"\n    }\n\n\n\n    async run() {\n        console.log('running AreaTask job', Date.now())\n\n        let items = await Area.sequelize.query(`\n        \n        select id from Areas where level=1 and status='active'\n        union\n        select id from Areas ap where ap.level=2 and ( ap.id in \n        (\n        SELECT distinct a.parentid FROM  Areas a where \n        (a.id in (SELECT distinct d.toareaid FROM Dispatchers d where d.toarealevel=3))\n        ) or \n        (ap.id in (SELECT distinct d.toareaid FROM Dispatchers d where d.toarealevel=2))\n        )\n        union SELECT a.id FROM  Areas a where \n        (a.id in (SELECT distinct d.toareaid FROM Dispatchers d where d.toarealevel=3))\n        union select id from Areas ap where ap.level=3 and ( ap.id in \n            (\n            SELECT distinct a.id FROM  Areas a where \n            (a.parentid in (SELECT distinct d.toareaid FROM Dispatchers d where d.toarealevel=2))\n            )) \n            `,\n            {\n\n                type: sq.QueryTypes.SELECT,\n                mapToModel: false,\n                raw: true\n            })\n\n        let arr = items.map(i => i['id']);\n\n\n        await Area.update({\n            status: 'active'\n        },\n            {\n                where: {\n                    id: {\n                        [Op.in]: arr\n                    }\n                }\n            }\n        )\n\n        await Area.update({\n            status: 'generic'\n        },\n            {\n                where: {\n                    id: {\n                        [Op.notIn]: arr\n                    }\n                }\n            }\n        )\n\n        console.log('done AreaTask job', Date.now())\n\n    }\n}"],"sourceRoot":"../../../src/"}