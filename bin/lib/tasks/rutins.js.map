{"version":3,"sources":["../src/lib/tasks/rutins.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,yCAAsC;AACtC,iDAAyD;AACzD,gCAAgC;AAMhC,uDAAgD;AAChD,qEAA8D;AAI9D,MAAqB,YAAa,SAAQ,mBAAQ;IAE9C,IAAI,QAAQ;QACR,OAAO,eAAe,CAAA;IAC1B,CAAC;IAIK,GAAG;;YACL,OAAO,CAAC,GAAG,CAAC,8BAA8B,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;YAExD,IAAI,OAAO,GAAG,MAAM,kBAAQ,CAAC,OAAO,CAAC,EAAC,KAAK,EAAE,EAAC,IAAI,EAAE,eAAe,EAAC,EAAC,CAAC,CAAC;YACvE,IAAI,CAAC,OAAO;gBAAE,OAAO;YACrB,MAAM,yBAAe,CAAC,OAAO,CAAC;gBAC1B,KAAK,EAAE;oBACH,UAAU,EAAE,OAAO,CAAC,EAAE;iBACzB;aACJ,CAAC,CAAC;YACH,MAAM,aAAK,CAAC,SAAS,CAAC,KAAK,CAAC;;;;;;SAM3B,EACG;gBACI,YAAY,EAAE,EAAE,OAAO,EAAE,OAAO,CAAC,EAAE,EAAC;gBACpC,IAAI,EAAE,EAAE,CAAC,UAAU,CAAC,UAAU;aACjC,CAAC,CAAC;YAIP,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAA;QAE/C,CAAC;KAAA;CACJ;AAnCD,+BAmCC","file":"rutins.js","sourcesContent":["import { BaseTask } from \"./basetask\";\nimport { Order, OrderItem } from \"../../db/models/order\";\nimport * as sq from 'sequelize';\nimport { OrderItemStatus } from \"../../models/order\";\nimport Butcher from \"../../db/models/butcher\";\nimport Review from \"../../db/models/review\";\nimport { Op, Sequelize } from \"sequelize\";\nimport Product from \"../../db/models/product\";\nimport Category from \"../../db/models/category\";\nimport ProductCategory from \"../../db/models/productcategory\";\n\n\n\nexport default class ButcherStats extends BaseTask {\n\n    get interval() {\n        return \"0 0 */6 * * *\"\n    }\n\n\n\n    async run() {\n        console.log('running popular products job', Date.now());\n\n        let popular = await Category.findOne({where: {slug: \"populer-etler\"}});\n        if (!popular) return;\n        await ProductCategory.destroy({\n            where: {\n                categoryid: popular.id\n            } \n        });\n        await Order.sequelize.query(`\n        \n        insert into ProductCategories (displayOrder,                      creationDate,   updatedOn,           productid,        categoryid)\n        SELECT count(*) as total, now(), now(), p.id, :popular  FROM OrderItems oi, Products p where p.id =oi.productid  group by p.id order by total desc limit 30;\n        \n\n        `,\n            {\n                replacements: { popular: popular.id},\n                type: sq.QueryTypes.BULKUPDATE,\n            });\n\n\n\n        console.log('done popular job', Date.now())\n\n    }\n}"],"sourceRoot":"../../../src/"}