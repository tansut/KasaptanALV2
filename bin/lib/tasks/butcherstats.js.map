{"version":3,"sources":["../src/lib/tasks/butcherstats.ts"],"names":[],"mappings":"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","file":"butcherstats.js","sourcesContent":["import { BaseTask } from \"./basetask\";\nimport { Order } from \"../../db/models/order\";\nimport * as sq from 'sequelize';\nimport { OrderItemStatus } from \"../../models/order\";\nimport Butcher from \"../../db/models/butcher\";\n\n\nexport default class ButcherStats extends BaseTask {\n\n    get interval() {\n        return \"0 0 */9 * * *\"\n    }\n\n    async updateButcher(butcherid: number, success: number, fail: number) {\n        \n        await Butcher.update({\n            shipTotalCount: fail + success,\n            shipFailureCount: fail\n        }, {\n            where: {\n                id: butcherid\n            }\n        })\n    }\n\n    async run() {\n        console.log('running butchers job', Date.now())\n        let prods = await Order.sequelize.query<any>(\"SELECT butcherid, status, count(*) as total FROM Orders  group by butcherid, status\",\n        {            \n            type: sq.QueryTypes.SELECT,\n            mapToModel: false,\n            raw: true\n        })\n\n        let rates = await Order.sequelize.query<any>(\"SELECT ref2, avg(userRating1) as avg, count(*) as total FROM Reviews group by ref2;\",\n        {            \n            type: sq.QueryTypes.SELECT,\n            mapToModel: false,\n            raw: true\n        })\n        \n        rates.forEach(async r => {\n            await Butcher.update({\n                userRating: r.avg,\n                userRatingCount: r.total\n            }, {\n                where: {\n                    id: r.ref2\n                }\n            })\n        })\n\n        let lastButcher = null, lastSuccess = 0, lastFail = 0;\n\n        for(var i = 0; i < prods.length;i++) {\n            let b = prods[i];\n            if (!lastButcher) lastButcher = b.butcherid;\n            if (lastButcher != b.butcherid) {\n                await this.updateButcher(lastButcher, lastSuccess, lastFail);\n                lastButcher = b.butcherid;\n                lastSuccess = 0;\n                lastFail = 0;\n            } \n                if (b.status == OrderItemStatus.success) {\n                    lastSuccess+=b.total;\n                } else if ((b.status == OrderItemStatus.butcherCannotProvide) || (b.status == OrderItemStatus.butcherCannotShip)) {\n                    lastFail+=b.total;\n                } else {\n                }\n            \n        };\n\n        if (lastButcher) {\n            await this.updateButcher(lastButcher, lastSuccess, lastFail)\n        } \n\n        console.log('done butchers job', Date.now())\n\n        // console.log('stats start');\n        // return new Promise((resolve, reject) => {\n        //     setTimeout(() => {\n        //         console.log('completed');\n        //         resolve()\n        //     }, 250);\n        // })\n    }\n}"],"sourceRoot":"../../../src/"}