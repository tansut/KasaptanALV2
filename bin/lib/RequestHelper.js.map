{"version":3,"sources":["../src/lib/RequestHelper.ts"],"names":[],"mappings":"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","file":"RequestHelper.js","sourcesContent":["import { AppRequest } from \"./http\";\nimport { PreferredAddress } from \"../db/models/user\";\nimport Area from \"../db/models/area\";\nimport * as express from 'express';\nimport { reject, resolve } from \"bluebird\";\nimport { ResourceCacheItem } from \"./cache\";\nimport config from \"../config\";\n\nexport class RequestHelper {\n\n    constructor(public req: AppRequest) {\n\n    }\n\n    _generateUrl(resource: ResourceCacheItem, thumbnail: boolean, defaultPath: string) {\n        let pathprefix = resource ? resource.folder : \"\";\n        if (!resource) {\n            if (defaultPath) {\n                return defaultPath\n            }\n        }\n        let filePath = thumbnail ? `${pathprefix}/${resource.thumbnailUrl}` : `${pathprefix}/${resource.contentUrl}`\n\n        return `${config.staticDomain}/${filePath}`;\n    }\n\n    imgUrl(resourceType: string, slug: string, filename: string = 'thumbnail', thumbnail: boolean = true, tag1: string = null) {\n        let defaultFile = '';\n        let ref1 = 0;\n        if (resourceType == 'product-photos') {\n            ref1 = this.req.__products[slug] ? this.req.__products[slug].id: 0;\n            defaultFile = config.staticDomain + \"/resource/img/product-default-thumbnail.jpg\"\n\n        } else if (resourceType == 'category-photos') {\n            let category = this.req.__categories.find(p => p.slug == slug);\n            ref1 = category ? category.id: 0;\n            defaultFile = config.staticDomain + \"/resource/img/category-default-thumbnail.jpg\";\n        } else if (resourceType == 'butcher-google-photos') {\n            ref1 = this.req.__butchers[slug] ? this.req.__butchers[slug].id: 0;\n            defaultFile = config.staticDomain + \"/resource/img/butcher-default-thumbnail.jpg\";\n        }\n        let photo: ResourceCacheItem;\n        if (filename == \"thumbnail\") {\n            photo = tag1 ? (this.req.helper.getResourcesOfType(resourceType + ref1).find(p => p.ref1 == ref1 && p.tag1 == tag1) || this.req.helper.getResourcesOfType(resourceType + ref1).find(p => p.ref1 == ref1 )) :\n             this.req.helper.getResourcesOfType(resourceType + ref1).find(p => p.ref1 == ref1)\n        } else {\n            photo = this.req.helper.getResourcesOfType(resourceType + filename).find(p => p.contentUrl == filename);\n        }\n            \n        return this._generateUrl(photo, thumbnail, defaultFile)\n    }\n\n    getResourcesOfType(type: string): ResourceCacheItem[] {\n        return this.req.__resources[type] || [];\n    }\n\n    async setPreferredAddress(adr: PreferredAddress, save: boolean = false) {\n        if (adr && adr.level3Id) {\n            if (adr.level3Id) {\n                let area = await Area.findByPk(adr.level3Id, {\n                    include: [\n                        { all: true }\n                    ]\n                })\n\n                \n\n                let pa = await Area.findByPk(area.parent.id, {\n                    include: [\n                        { all: true }\n                    ]\n                });\n\n                adr.level1Id = pa.parent.id;\n                adr.level2Id = pa.id;\n                adr.level3Id = area.id;\n                \n\n                adr.level1Text = pa.parent.name;\n                adr.level2Text = pa.name;\n                adr.level3Text = area.name;\n\n                adr.level1Slug = pa.parent.slug;\n                adr.level2Slug = pa.slug;\n                adr.level3Slug = area.slug;\n\n                adr.level1Status = pa.parent.status;\n                adr.level2Status = pa.status;\n                adr.level3Status = area.status;\n\n                adr.display = `${adr.level3Text}, ${adr.level2Text}/${adr.level1Text}`;\n\n                this.req.prefAddr = adr;\n\n                if (save) {\n                    if (this.req.user) {\n                        this.req.user.lastLevel1Id = adr.level1Id;\n                        this.req.user.lastLevel2Id = adr.level2Id;\n                        this.req.user.lastLevel3Id = adr.level3Id;\n                        await this.req.user.save();\n                    } else {\n                        this.req.session.prefAddr = adr;\n                        await new Promise((resolve, reject) => {\n                            this.req.session.save(err => (err ? reject(err) : resolve()))\n                        })\n                    }\n                }\n            }\n        }\n        else delete this.req.prefAddr;\n    }\n\n    static use(app: express.Application) {\n        app.use((req: AppRequest, res, next) => {\n            req.helper = new RequestHelper(req);\n            req.helper.fillPreferredAddress().then(r => next()).catch(next)\n        })\n    }\n\n    async fillPreferredAddress() {\n        let req = this.req, list = [];\n        if (req.user && req.session.prefAddr != null) {\n            req.user.lastLevel1Id = req.session.prefAddr.level1Id;\n            req.user.lastLevel2Id = req.session.prefAddr.level2Id;\n            req.user.lastLevel3Id = req.session.prefAddr.level3Id;\n            req.session.prefAddr = null;\n            await req.user.save();\n        }\n        var adr: PreferredAddress = {\n            level1Id: null,\n            level2Id: null,\n            level3Id: null\n        };\n        if (req.user) {\n            adr.level1Id = req.user.lastLevel1Id;\n            adr.level2Id = req.user.lastLevel2Id;\n            adr.level3Id = req.user.lastLevel3Id;\n        } else if (req.session.prefAddr) {\n            adr = req.session.prefAddr\n        }\n        await this.setPreferredAddress(adr)\n    }\n}"],"sourceRoot":"../../src/"}