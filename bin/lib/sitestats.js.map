{"version":3,"sources":["../src/lib/sitestats.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAA;AAM9B,4CAAqC;AACrC,kDAA2C;AAC3C,4CAAqC;AACrC,8CAA2C;AAC3C,gCAAgC;AAChC,2CAAkD;AAGlD,MAAa,SAAS;IAClB,MAAM,CAAO,GAAG;;YACZ,IAAI,EAAE,GAAQ,MAAM,aAAK,CAAC,SAAS,CAAC,KAAK,CAAC;;gCAElB,EAAE;gBACtB,IAAI,EAAE,EAAE,CAAC,UAAU,CAAC,MAAM;aAC7B,CAAC,CAAA;YAEF,IAAI,OAAO,GAAQ,MAAM,aAAK,CAAC,SAAS,CAAC,KAAK,CAAC,8EAA8E,EAAE;gBAC3H,IAAI,EAAE,EAAE,CAAC,UAAU,CAAC,MAAM;aAC7B,CAAC,CAAA;YAEF,IAAI,OAAO,GAAG,CAAC,CAAA;YACf,IAAI,IAAI,GAAG,CAAC,CAAA;YAEZ,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACnB,IAAI,IAAI,CAAC,MAAM,IAAI,uBAAe,CAAC,OAAO;oBAAE,OAAO,IAAE,IAAI,CAAC,KAAK,CAAC;gBAChE,IAAI,IAAI,CAAC,MAAM,IAAI,uBAAe,CAAC,iBAAiB;oBAAE,IAAI,IAAE,IAAI,CAAC,KAAK,CAAC;YAE3E,CAAC,CAAC,CAAC;YAEH,IAAI,KAAK,GAAG,OAAO,GAAG,IAAI,CAAC;YAG3B,OAAO;gBACH,QAAQ,EAAE,MAAM,cAAI,CAAC,KAAK,EAAE;gBAC5B,OAAO,EAAE,MAAM,iBAAO,CAAC,KAAK,EAAE;gBAC9B,IAAI,EAAE,MAAM,cAAI,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,EAAC,MAAM,EAAE,QAAQ,EAAC,EAAC,CAAC;gBACnD,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE;gBACZ,IAAI,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAA,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC;aAC9D,CAAA;QACL,CAAC;KAAA;CACJ;AAhCD,8BAgCC","file":"sitestats.js","sourcesContent":["const Nexmo = require(\"nexmo\")\nimport config from \"../config\";\nimport axios, { AxiosResponse } from \"axios\";\nimport email from './email';\nimport SiteLogRoute from \"../routes/api/sitelog\";\nimport { SiteStatsData } from \"../models/sitestat\";\nimport User from \"../db/models/user\";\nimport Product from \"../db/models/product\";\nimport Area from \"../db/models/area\";\nimport { Order } from \"../db/models/order\";\nimport * as sq from 'sequelize';\nimport { OrderItemStatus } from \"../models/order\";\n\n\nexport class SiteStats {\n    static async get(): Promise<SiteStatsData> {\n        let os = <any>await Order.sequelize.query(`SELECT sum(quantity * pounitkgRatio) as kg, count(*) as total, count(distinct orderid) as totalOrder, count(distinct userid) as totalUser\n        FROM OrderItems oi, Orders o \n        where o.id = oi.orderid`, {\n            type: sq.QueryTypes.SELECT,\n        })\n\n        let osStats = <any>await Order.sequelize.query(`SELECT o.status as status, count(*) as total from Orders o group by o.status`, {\n            type: sq.QueryTypes.SELECT,\n        })\n\n        let success = 0\n        let fail = 0\n\n        osStats.forEach(stat => {\n            if (stat.status == OrderItemStatus.success) success+=stat.total;\n            if (stat.status == OrderItemStatus.butcherCannotShip) fail+=stat.total;\n\n        });\n\n        let total = success + fail;\n        \n\n        return {\n            customer: await User.count(),\n            product: await Product.count(),\n            semt: await Area.count({where: {status: 'active'}}),\n            kg: os[0].kg,\n            ship: total <= 0 ? 100: Math.round(100 * (success / total))\n        }\n    }\n}"],"sourceRoot":"../../src/"}