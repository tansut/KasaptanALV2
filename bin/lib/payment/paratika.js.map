{"version":3,"sources":["../src/lib/payment/paratika.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,6CAAyQ;AACzQ,iCAA6C;AAG7C,sCAA+B;AAC/B,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AAYvB,MAAqB,eAAgB,SAAQ,sCAAyB;IAKlE,YAAY,MAAsB;QAC9B,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAED,IAAI,CAAC,IAAS,EAAE,OAAY,EAAE,MAAc,IAAI;QAC5C,MAAM,MAAM,GAAG;YACX,OAAO,EAAE;gBACL,cAAc,EAAE,mCAAmC;aACtD;SACJ,CAAA;QACD,eAAK,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YAC3E,6BAA6B;YAC7B,qBAAqB;YACrB,2BAA2B;YAC3B,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAA;QAC9B,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;IACpC,CAAC;IAED,gBAAgB,CAAC,CAAQ;QACrB,OAAO,CAAC,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAA;IACjC,CAAC;IAEK,UAAU,CAAC,OAAuB;;YACpC,IAAI,cAAc,GAAG,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;YAE5D,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACnC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,GAAG,EAAE,aAAa,EAAE,EAAE;oBAC7C,IAAI,CAAC,YAAY,CAAC,+BAA+B,EAC7C,OAAO,EAAE,aAAa,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;wBAC9B,IAAI,GAAG;4BAAE,MAAM,CAAC,GAAG,CAAC,CAAC;6BAChB,IAAI,aAAa,CAAC,YAAY,IAAI,IAAI;4BACvC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,aAAa,CAAC,CAAC,CAAC;6BACjD;4BACD,OAAO,CAAC,aAAa,CAAC,CAAA;yBACzB;oBACL,CAAC,CAAC,CAAA;gBACV,CAAC,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;QACN,CAAC;KAAA;IAED,wBAAwB,CAAC,OAAuB;QAE5C,IAAI,WAAW,GAAG,IAAI,CAAA;QACtB,IAAI,EAAE,GAAG,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;YAClC,WAAW,IAAI,gBAAM,CAAC,UAAU,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAA;YACrD,OAAO;gBACH,IAAI,EAAE,EAAE,CAAC,EAAE;gBACX,IAAI,EAAE,EAAE,CAAC,IAAI;gBACb,MAAM,EAAE,EAAE,CAAC,KAAK;gBAChB,QAAQ,EAAE,EAAE,CAAC,cAAc;gBAC3B,mBAAmB,EAAE,EAAE,CAAC,gBAAgB;gBACxC,WAAW,EAAE,SAAS;gBACtB,QAAQ,EAAE,CAAC;aACd,CAAA;QACL,CAAC,CAAC,CAAA;QAEF,OAAO;YACH,MAAM,EAAE,cAAc;YACtB,WAAW,EAAE,gBAAgB;YAC7B,MAAM,EAAE,OAAO,CAAC,SAAS;YACzB,QAAQ,EAAE,KAAK;YACf,SAAS,EAAE,OAAO,CAAC,WAAW;YAC9B,iBAAiB,EAAE,OAAO,CAAC,cAAc;YACzC,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY;YACtC,gBAAgB,EAAE,IAAI,CAAC,MAAM,CAAC,gBAAgB;YAC9C,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ;YAC9B,QAAQ,EAAE,OAAO,CAAC,KAAK,CAAC,IAAI;YAC5B,YAAY,EAAE,OAAO,CAAC,KAAK,CAAC,IAAI;YAChC,aAAa,EAAE,OAAO,CAAC,KAAK,CAAC,KAAK;YAClC,UAAU,EAAE,OAAO,CAAC,KAAK,CAAC,EAAE;YAC5B,iBAAiB,EAAE,8GAA8G;YACjI,aAAa,EAAE,OAAO,CAAC,KAAK,CAAC,SAAS;YACtC,gBAAgB,EAAE,YAAY;YAC9B,iBAAiB,EAAE,OAAO,CAAC,cAAc,CAAC,OAAO;YACjD,UAAU,EAAE,OAAO,CAAC,cAAc,CAAC,IAAI;YACvC,aAAa,EAAE,QAAQ;YACvB,gBAAgB,EAAE,OAAO;YACzB,WAAW,EAAE,OAAO,CAAC,KAAK,CAAC,SAAS;YACpC,iBAAiB,EAAE,OAAO,CAAC,eAAe,CAAC,OAAO;YAClD,UAAU,EAAE,OAAO,CAAC,eAAe,CAAC,IAAI;YACxC,aAAa,EAAE,QAAQ;YACvB,gBAAgB,EAAE,OAAO;YACzB,WAAW,EAAE,OAAO,CAAC,KAAK,CAAC,SAAS;YACpC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;YAC9B,wBAAwB,EAAE,WAAW;SAExC,CAAA;IACL,CAAC;IAED,wBAAwB,CAAC,GAAQ,EAAE,KAAK;QACpC,OAAO;YACH,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,GAAG,CAAC,OAAO;YACpB,UAAU,EAAE,GAAG,CAAC,UAAU;YAC1B,UAAU,EAAE,GAAG,CAAC,UAAU;YAC1B,OAAO,EAAE,GAAG,CAAC,OAAO;YACpB,YAAY,EAAE,KAAK;SACtB,CAAA;IACL,CAAC;IAED,IAAI,WAAW;QACX,OAAO,eAAe,CAAC,GAAG,CAAA;IAC9B,CAAC;IAED,qBAAqB,CAAC,QAAa;QAC/B,QAAQ,CAAC,YAAY,GAAG,QAAQ,CAAC,QAAQ,CAAC;QAC1C,OAAO,QAAQ,CAAA;IACnB,CAAC;IAEK,WAAW,CAAC,OAAsC;;YACpD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACnC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;oBAClD,IAAI,CAAC,YAAY,CAAC,sBAAsB,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;wBACjE,IAAI,GAAG;4BAAE,MAAM,CAAC,GAAG,CAAC,CAAC;6BAChB,IAAI,MAAM,CAAC,YAAY,IAAI,IAAI,IAAI,MAAM,CAAC,YAAY,IAAI,IAAI;4BAC/D,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC,CAAC;;4BAC1C,OAAO,CAAC,MAAM,CAAC,CAAC;oBACzB,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA;gBAChC,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAA;QACN,CAAC;KAAA;IAEK,cAAc,CAAC,OAAsC;;YACvD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACnC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;oBACrD,IAAI,CAAC,YAAY,CAAC,yBAAyB,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;wBACpE,IAAI,GAAG;4BAAE,MAAM,CAAC,GAAG,CAAC,CAAC;6BAChB,IAAI,MAAM,CAAC,MAAM,IAAI,SAAS;4BAAE,MAAM,CAAC,MAAM,CAAC,CAAC;;4BAC/C,OAAO,CAAC,MAAM,CAAC,CAAC;oBACzB,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA;gBAChC,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAA;QACN,CAAC;KAAA;IAGK,SAAS,CAAC,OAAuB,EAAE,IAAgB;;YACrD,IAAI,GAAG,GAAG,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;YACjD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACnC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,aAAa,EAAE,EAAE;oBAClC,IAAI,CAAC,YAAY,CAAC,sCAAsC,EAAE,OAAO,EAAE,aAAa,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;wBACxF,IAAI,GAAG;4BAAE,MAAM,CAAC,GAAG,CAAC,CAAC;6BAChB,IAAI,aAAa,CAAC,YAAY,IAAI,IAAI;4BACvC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,aAAa,CAAC,CAAC,CAAC;6BACjD;4BAED,IAAI,EAAE,GAAG;gCACL,SAAS,EAAE,IAAI,CAAC,cAAc;gCAC9B,GAAG,EAAE,IAAI,CAAC,UAAU;gCACpB,WAAW,EAAE,IAAI,CAAC,WAAW;gCAC7B,UAAU,EAAE,IAAI,CAAC,UAAU;gCAC3B,GAAG,EAAE,IAAI,CAAC,UAAU;gCACpB,gBAAgB,EAAE,CAAC;6BAEtB,CAAA;4BAED,OAAO;4BAEP,mCAAmC;4BACnC,4BAA4B;4BAC5B,aAAa;4BACb,oBAAoB;4BACpB,iCAAiC;4BACjC,sDAAsD;4BACtD,0CAA0C;4BAC1C,oCAAoC;4BACpC,4CAA4C;4BAC5C,iDAAiD;4BACjD,mCAAmC;4BACnC,aAAa;4BACb,QAAQ;4BACR,qEAAqE;yBACxE;oBACL,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA;gBAChC,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAA;QACN,CAAC;KAAA;IAGK,qBAAqB,CAAC,MAAW;;YACnC,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC;YACtB,IAAI,MAAM,CAAC,WAAW,IAAI,UAAU,IAAI,MAAM,CAAC,YAAY,IAAI,IAAI;gBAAE,OAAO,IAAI,CAAC;iBAC5E;gBACD,MAAM,IAAI,CAAC,YAAY,CAAC,mBAAmB,EAAE,MAAM,EAAE,EAAE,CAAC,CAAA;gBACxD,OAAO,KAAK,CAAC;aAChB;QACL,CAAC;KAAA;IAEK,aAAa,CAAC,OAAY;;YAE5B,IAAI,MAAM,GAAkB;gBACxB,cAAc,EAAE,OAAO,CAAC,iBAAiB;gBACzC,SAAS,EAAE,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC;gBACrC,SAAS,EAAE,OAAO,CAAC,QAAQ;gBAC3B,MAAM,EAAE,SAAS;gBACjB,KAAK,EAAE,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC;gBACjC,gBAAgB,EAAE;oBACd;wBACI,MAAM,EAAE,OAAO,CAAC,iBAAiB;wBACjC,SAAS,EAAE,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC;wBACrC,oBAAoB,EAAE,OAAO,CAAC,QAAQ;wBACtC,KAAK,EAAE,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC;qBACpC;iBACJ;aACJ,CAAA;YACD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC/B,IAAI,CAAC,YAAY,CAAC,wBAAwB,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;oBACnE,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;gBAClH,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA;YAEpC,CAAC,CAAC,CAAA;QACN,CAAC;KAAA;IAED,gEAAgE;IAChE,8DAA8D;IAC9D,yDAAyD;IACzD,4CAA4C;IAC5C,2FAA2F;IAC3F,wCAAwC;IACxC,yDAAyD;IACzD,kEAAkE;IAClE,4CAA4C;IAC5C,2CAA2C;IAC3C,cAAc;IACd,SAAS;IACT,IAAI;IAEJ,IAAI;IACJ,yEAAyE;IACzE,2BAA2B;IAC3B,+BAA+B;IAC/B,QAAQ;IAER,4BAA4B,CAAC,OAAuB,EAAE,MAAW;QAC7D,OAAO;YACH,cAAc,EAAE,OAAO,CAAC,cAAc;YACtC,SAAS,EAAE,MAAM,CAAC,MAAM;YACxB,KAAK,EAAE,MAAM,CAAC,MAAM;YACpB,MAAM,EAAE,SAAS;YACjB,SAAS,EAAE,MAAM,CAAC,iBAAiB;YACnC,gBAAgB,EAAE,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;gBAC3C,OAAO;oBACH,MAAM,EAAE,EAAE,CAAC,EAAE;oBACb,oBAAoB,EAAE,MAAM,CAAC,iBAAiB;oBAC9C,KAAK,EAAE,EAAE,CAAC,KAAK;oBACf,SAAS,EAAE,EAAE,CAAC,KAAK;iBACtB,CAAA;YACL,CAAC,CAAC;SACL,CAAA;IACL,CAAC;IAEK,GAAG,CAAC,OAAuB,EAAE,IAAgB;;YAC/C,IAAI,GAAG,GAAG,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;YACjD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACnC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;oBAC3B,IAAI,CAAC,YAAY,CAAC,mCAAmC,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;wBAC9E,IAAI,GAAG;4BAAE,MAAM,CAAC,GAAG,CAAC,CAAC;6BAChB,IAAI,MAAM,CAAC,YAAY,IAAI,IAAI;4BAChC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC,CAAC;6BAC1C;4BACD,IAAI,EAAE,GAAG,IAAI,CAAC,wBAAwB,CAAC,GAAG,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC;4BAEjE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;gCAC1B,IAAI,GAAG;oCAAE,MAAM,CAAC,GAAG,CAAC,CAAC;qCAChB,IAAI,MAAM,CAAC,YAAY,IAAI,IAAI;oCAChC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC,CAAC;qCAC1C;oCACD,IAAI,UAAU,GAAkB,IAAI,CAAC,4BAA4B,CAAC,OAAO,EAAE,MAAM,CAAC,CAAA;oCAClF,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,EAAE,EAAE,UAAU,CAAC;yCAC3C,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;yCAC/B,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;iCAClC;4BACL,CAAC,CAAC,CAAA;yBACL;oBACL,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA;gBAChC,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAA;QACN,CAAC;KAAA;IAEK,iBAAiB,CAAC,OAAiC;;YACrD,IAAI,GAAG,GAAG;gBACN,MAAM,EAAE,YAAY;gBACpB,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ;gBAC9B,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY;gBACtC,gBAAgB,EAAE,IAAI,CAAC,MAAM,CAAC,gBAAgB;gBAC9C,QAAQ,EAAE,OAAO,CAAC,qBAAqB;gBACvC,IAAI,EAAE,OAAO,CAAC,iBAAiB;gBAC/B,QAAQ,EAAE,OAAO,CAAC,iBAAiB;gBACnC,KAAK,EAAE,OAAO,CAAC,KAAK;gBACpB,YAAY,EAAE,aAAa;gBAC3B,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,mBAAmB,EAAE,IAAI;gBACzB,MAAM,EAAE,IAAI;aACf,CAAA;YAED,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACnC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;oBAC3B,IAAI,CAAC,YAAY,CAAC,oBAAoB,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;wBAC3D,IAAI,GAAG;4BAAE,MAAM,CAAC,GAAG,CAAC,CAAC;6BAChB,IAAI,MAAM,CAAC,YAAY,IAAI,IAAI;4BAChC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC,CAAC;;4BAC1C,OAAO,CAAC;gCACT,MAAM,EAAE,SAAS;6BACpB,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA;gBAChC,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAA;QACN,CAAC;KAAA;IAEK,iBAAiB,CAAC,OAAiC;;YACrD,IAAI,GAAG,GAAG;gBACN,MAAM,EAAE,WAAW;gBACnB,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ;gBAC9B,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY;gBACtC,gBAAgB,EAAE,IAAI,CAAC,MAAM,CAAC,gBAAgB;gBAC9C,QAAQ,EAAE,OAAO,CAAC,qBAAqB;gBACvC,IAAI,EAAE,OAAO,CAAC,iBAAiB;gBAC/B,QAAQ,EAAE,OAAO,CAAC,iBAAiB;gBACnC,KAAK,EAAE,OAAO,CAAC,KAAK;gBACpB,YAAY,EAAE,aAAa;gBAC3B,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,mBAAmB,EAAE,IAAI;gBACzB,MAAM,EAAE,IAAI;aACf,CAAA;YACD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACnC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;oBAC3B,IAAI,CAAC,YAAY,CAAC,oBAAoB,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;wBAC3D,IAAI,GAAG;4BAAE,MAAM,CAAC,GAAG,CAAC,CAAC;6BAChB,IAAI,MAAM,CAAC,YAAY,IAAI,IAAI,EAAE;4BAClC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,EAAE,CAAA,OAAO,CAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAA,EAAE,CAAA,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;4BACnF,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC,CAAC;yBAC9C;;4BAEI,OAAO,CAAC;gCACT,cAAc,EAAE,MAAM,CAAC,MAAM,CAAC,QAAQ;gCACtC,MAAM,EAAE,SAAS;6BACpB,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA;gBAChC,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAA;QACN,CAAC;KAAA;IAGD,MAAM,CAAC,QAAQ;QACX,qCAAwB,CAAC,QAAQ,CAAC,eAAe,CAAC,GAAG,EAAE,eAAe,CAAC,CAAA;IAC3E,CAAC;;AA9VL,kCA+VC;AA9VU,mBAAG,GAAG,UAAU,CAAC","file":"paratika.js","sourcesContent":["import { PaymentRequest, CreditcardPaymentProvider, CreditcardPaymentFactory, PaymentResult, Creditcard, SubMerchantCreateRequest, SubMerchantCreateResult, SubMerchantItemApproveRequest, SubMerchantItemApproveResponse, SubMerchantUpdateResult } from \"./creditcard\";\nimport axios, { AxiosResponse } from \"axios\";\nimport { response } from \"express\";\nimport { Order } from \"../../db/models/order\";\nimport Helper from \"../helper\";\nvar qs = require('qs');\n\nexport interface ParatikaConfig {\n    apiKey: string,\n    secretKey: string,\n    uri: string;\n    tdpost:string;\n    merchantUser: string,\n    merchantPassword: string,\n    merchant: string,\n}\n\nexport default class ParatikaPayment extends CreditcardPaymentProvider {\n    static key = \"paratika\";\n    private iyzipay: any;\n    private config: ParatikaConfig;\n\n    constructor(config: ParatikaConfig) {\n        super(config);\n        this.config = config;\n    }\n\n    post(body: any, handler: any, uri: string = null) {\n        const config = {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            }\n        }\n        axios.post(uri || this.config.uri, qs.stringify(body), config).then((result) => {\n            // console.log(\"----------\");\n            // console.log(body);\n            // console.log(result.data)\n            handler(null, result.data)\n        }).catch((err) => handler(err));\n    }\n\n    getSubmerchantId(o: Order) {\n        return o.butcherid.toString()\n    }\n\n    async paySession(request: PaymentRequest) {\n        let sessionRequest = this.createParatikaSessionReq(request);\n\n        return new Promise((resolve, reject) => {\n            this.post(sessionRequest, (err, sessionResult) => {\n                this.logOperation(\"creditcard-pay-session-create\",\n                    request, sessionResult).then(() => {\n                        if (err) reject(err);\n                        else if (sessionResult.responseCode != '00')\n                            reject(this.generateErrorResponse(sessionResult));\n                        else {\n                            resolve(sessionResult)\n                        }\n                    })\n            })\n        })\n    }\n\n    createParatikaSessionReq(request: PaymentRequest) {\n\n        let sellerTotal = 0.00\n        let oi = request.basketItems.map(bi => {\n            sellerTotal += Helper.asCurrency(bi.subMerchantPrice)\n            return {\n                code: bi.id,\n                name: bi.name,\n                amount: bi.price,\n                sellerId: bi.subMerchantKey,\n                sellerPaymentAmount: bi.subMerchantPrice,\n                description: \"product\",\n                quantity: 1\n            }\n        })\n\n        return {\n            ACTION: \"SESSIONTOKEN\",\n            SESSIONTYPE: \"PAYMENTSESSION\",\n            AMOUNT: request.paidPrice,\n            CURRENCY: \"TRY\",\n            RETURNURL: request.callbackUrl,\n            MERCHANTPAYMENTID: request.conversationId,\n            MERCHANTUSER: this.config.merchantUser,\n            MERCHANTPASSWORD: this.config.merchantPassword,\n            MERCHANT: this.config.merchant,\n            CUSTOMER: request.buyer.name,\n            CUSTOMERNAME: request.buyer.name,\n            CUSTOMEREMAIL: request.buyer.email,\n            CUSTOMERIP: request.buyer.ip,\n            CUSTOMERUSERAGENT: \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.81 Safari/537.36\",\n            CUSTOMERPHONE: request.buyer.gsmNumber,\n            CUSTOMERBIRTHDAY: \"01-01-2001\",\n            BILLTOADDRESSLINE: request.billingAddress.address,\n            BILLTOCITY: request.billingAddress.city,\n            BILLTOCOUNTRY: \"Turkey\",\n            BILLTOPOSTALCODE: \"11103\",\n            BILLTOPHONE: request.buyer.gsmNumber,\n            SHIPTOADDRESSLINE: request.shippingAddress.address,\n            SHIPTOCITY: request.shippingAddress.city,\n            SHIPTOCOUNTRY: \"Turkey\",\n            SHIPTOPOSTALCODE: \"11105\",\n            SHIPTOPHONE: request.buyer.gsmNumber,\n            ORDERITEMS: JSON.stringify(oi),\n            TOTALSELLERPAYMENTAMOUNT: sellerTotal\n\n        }\n    }\n\n    createParatikaPaymentReq(req: any, token) {\n        return {\n            ACTION: \"SALE\",\n            CARDPAN: req.CARDPAN,\n            CARDEXPIRY: req.CARDEXPIRY,\n            NAMEONCARD: req.NAMEONCARD,\n            CARDCVV: req.CARDCVV,\n            SESSIONTOKEN: token\n        }\n    }\n\n    get providerKey() {\n        return ParatikaPayment.key\n    }\n\n    generateErrorResponse(response: any) {\n        response.errorMessage = response.errorMsg;\n        return response\n    }\n\n    async approveItem(request: SubMerchantItemApproveRequest): Promise<SubMerchantItemApproveResponse> {\n        return new Promise((resolve, reject) => {\n            this.iyzipay.approval.create(request, (err, result) => {\n                this.logOperation(\"submerchant-approval\", request, result).then(() => {\n                    if (err) reject(err);\n                    else if (result.responseCode == '99' || result.responseCode == '98')\n                        reject(this.generateErrorResponse(result));\n                    else resolve(result);\n                }).catch(err => reject(err))\n            });\n        })\n    }\n\n    async disApproveItem(request: SubMerchantItemApproveRequest): Promise<SubMerchantItemApproveResponse> {\n        return new Promise((resolve, reject) => {\n            this.iyzipay.disapproval.create(request, (err, result) => {\n                this.logOperation(\"submerchant-disapproval\", request, result).then(() => {\n                    if (err) reject(err);\n                    else if (result.status == 'failure') reject(result);\n                    else resolve(result);\n                }).catch(err => reject(err))\n            });\n        })\n    }\n\n\n    async pay3dInit(request: PaymentRequest, card: Creditcard): Promise<PaymentResult> {\n        let req = this.createParatikaSessionReq(request);\n        return new Promise((resolve, reject) => {\n            this.post(req, (err, sessionResult) => {\n                this.logOperation(\"creditcard-payment-3d-session-create\", request, sessionResult).then(() => {\n                    if (err) reject(err);\n                    else if (sessionResult.responseCode != '00')\n                        reject(this.generateErrorResponse(sessionResult));\n                    else {\n\n                        let pr = {\n                            cardOwner: card.cardHolderName,\n                            pan: card.cardNumber,\n                            expiryMonth: card.expireMonth,\n                            expiryYear: card.expireYear,\n                            cvv: card.expireYear,\n                            installmentCount: 1,\n\n                        }\n\n                        return;\n\n                        // this.post(pr, (err, result) => {\n                        //     if (err) reject(err);\n                        //     else {\n                        //         resolve({\n                        //             status: 'success',\n                        //             conversationId: request.conversationId,\n                        //             threeDSHtmlContent: result,\n                        //             itemTransactions: [],\n                        //             paidPrice: request.paidPrice,\n                        //             paymentId: request.conversationId,\n                        //             price: request.price\n                        //         })\n                        //     }\n                        // }, `${this.config.uri}/post/sale3d/${sessionResult.sessionToken}`)\n                    }\n                }).catch(err => reject(err))\n            });\n        })\n    }\n\n\n    async pay3dHandshakeSuccess(result: any) {\n        result = result || {};\n        if (result.responseMsg == \"Approved\" && result.responseCode == '00') return true;\n        else {\n            await this.logOperation(\"3d-handshake-fail\", result, {})\n            return false;\n        } \n    }\n\n    async pay3dComplete(request: any): Promise<PaymentResult> {\n        \n        let result: PaymentResult = {\n            conversationId: request.merchantPaymentId,\n            paidPrice: parseFloat(request.amount),\n            paymentId: request.pgTranId,\n            status: 'success',\n            price: parseFloat(request.amount),\n            itemTransactions: [\n                {\n                    itemId: request.merchantPaymentId,\n                    paidPrice: parseFloat(request.amount),\n                    paymentTransactionId: request.pgTranId,\n                    price: parseFloat(request.amount)\n                }\n            ]\n        }\n        return new Promise((resolve, reject) => {\n                this.logOperation(\"creditcard-3d-complete\", request, result).then(() => {\n                    return this.savePayment(\"3d-paratika\", request, result).then(() => resolve(result)).catch(err => reject(err));\n                }).catch(err => reject(err))\n\n        })\n    }\n\n    // async paySession(request: PaymentRequest, card: Creditcard) {\n    //     let req = this.createParatikaSessionReq(request, card);\n    //     return new Promise<boolean>((resolve, reject) => {\n    //         this.post(req, (err, result) => {\n    //             this.logOperation(\"creditcard-payment-create\", request, result).then(() => {\n    //                 if (err) reject(err);\n    //                 else if (result.responseCode != '00') \n    //                     reject(this.generateErrorResponse(result));\n    //                 else return resolve(true)\n    //             }).catch(err => reject(err))\n    //         });\n    //     })\n    // }\n\n    // {\n    //     \"sessionToken\":\"E6KDEUYERXWGPHZQELQU4CQCMQGXKRWPG6FIS2APUV2S5UDR\",\n    //     \"responseCode\":\"00\",\n    //     \"responseMsg\":\"Approved\"\n    //     }\n\n    convertParatikaPaymentResult(request: PaymentRequest, result: any): PaymentResult {\n        return {\n            conversationId: request.conversationId,\n            paidPrice: result.amount,\n            price: result.amount,\n            status: 'success',\n            paymentId: result.merchantPaymentId,\n            itemTransactions: request.basketItems.map(bi => {\n                return {\n                    itemId: bi.id,\n                    paymentTransactionId: result.merchantPaymentId,\n                    price: bi.price,\n                    paidPrice: bi.price\n                }\n            })\n        }\n    }\n\n    async pay(request: PaymentRequest, card: Creditcard): Promise<PaymentResult> {\n        let req = this.createParatikaSessionReq(request);\n        return new Promise((resolve, reject) => {\n            this.post(req, (err, result) => {\n                this.logOperation(\"creditcard-payment-session-create\", request, result).then(() => {\n                    if (err) reject(err);\n                    else if (result.responseCode != '00')\n                        reject(this.generateErrorResponse(result));\n                    else {\n                        let pr = this.createParatikaPaymentReq(req, result.sessionToken);\n\n                        this.post(pr, (err, result) => {\n                            if (err) reject(err);\n                            else if (result.responseCode != '00')\n                                reject(this.generateErrorResponse(result));\n                            else {\n                                let paymentRes: PaymentResult = this.convertParatikaPaymentResult(request, result)\n                                this.savePayment('pos-paratika', pr, paymentRes)\n                                    .then(() => resolve(paymentRes))\n                                    .catch(err => reject(err));\n                            }\n                        })\n                    }\n                }).catch(err => reject(err))\n            });\n        })\n    }\n\n    async updateSubMerchant(request: SubMerchantCreateRequest): Promise<SubMerchantUpdateResult> {\n        let req = {\n            ACTION: \"SELLEREDIT\",\n            MERCHANT: this.config.merchant,\n            MERCHANTUSER: this.config.merchantUser,\n            MERCHANTPASSWORD: this.config.merchantPassword,\n            SELLERID: request.subMerchantExternalId,\n            NAME: request.legalCompanyTitle,\n            LASTNAME: request.legalCompanyTitle,\n            EMAIL: request.email,\n            MOBILENUMBER: '05555551111',\n            IBAN: request.iban,\n            COMMISSIONAPPLYTYPE: \"CA\",\n            STATUS: 'OK'\n        }      \n        \n        return new Promise((resolve, reject) => {\n            this.post(req, (err, result) => {\n                this.logOperation(\"submerchant-update\", req, result).then(() => {\n                    if (err) reject(err);\n                    else if (result.responseCode != '00')\n                        reject(this.generateErrorResponse(result));\n                    else resolve({                        \n                        status: \"success\"\n                    });\n                }).catch(err => reject(err))\n            });\n        })        \n    }\n\n    async createSubMerchant(request: SubMerchantCreateRequest): Promise<SubMerchantCreateResult> {\n        let req = {\n            ACTION: \"SELLERADD\",\n            MERCHANT: this.config.merchant,\n            MERCHANTUSER: this.config.merchantUser,\n            MERCHANTPASSWORD: this.config.merchantPassword,\n            SELLERID: request.subMerchantExternalId,\n            NAME: request.legalCompanyTitle,\n            LASTNAME: request.legalCompanyTitle,\n            EMAIL: request.email,\n            MOBILENUMBER: '05555551111',\n            IBAN: request.iban,\n            COMMISSIONAPPLYTYPE: \"CA\",\n            STATUS: 'OK'\n        }\n        return new Promise((resolve, reject) => {\n            this.post(req, (err, result) => {\n                this.logOperation(\"submerchant-create\", req, result).then(() => {\n                    if (err) reject(err);\n                    else if (result.responseCode != '00') {\n                        this.updateSubMerchant(request).then((r)=>resolve(<any>r)).catch(err=>reject(err));\n                        reject(this.generateErrorResponse(result));\n                    }\n                        \n                    else resolve({\n                        subMerchantKey: result.seller.sellerId,\n                        status: \"success\"\n                    });\n                }).catch(err => reject(err))\n            });\n        })\n    }\n\n\n    static register() {\n        CreditcardPaymentFactory.register(ParatikaPayment.key, ParatikaPayment)\n    }\n} "],"sourceRoot":"../../../src/"}