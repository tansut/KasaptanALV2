{"version":3,"sources":["../src/lib/payment/creditcard.ts"],"names":[],"mappings":"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","file":"creditcard.js","sourcesContent":["var fs = require('fs')\nimport config from '../../config';\nimport * as path from \"path\";\nimport { Order } from '../../db/models/order';\nimport Helper from '../helper';\nimport Butcher from '../../db/models/butcher';\nimport SiteLogRoute from '../../routes/api/sitelog';\nimport { Transaction, or } from \"sequelize\";\nimport Payment from '../../db/models/payment';\nimport { ComissionHelper } from '../commissionHelper';\nimport AccountModel from '../../db/models/accountmodel';\nimport { Account } from '../../models/account';\nimport { OrderSource } from '../../models/order';\nimport OrderApi from \"../../routes/api/order\"\n\nconst paymentConfig = require(path.join(config.projectDir, `payment.json`));\n\nexport type SubMerchantType = 'PRIVATE_COMPANY' | 'LIMITED_OR_JOINT_STOCK_COMPANY' | 'NONE'\n\nexport interface SubMerchantCreateRequest {\n    name: string;\n    taxOffice?: string;\n    taxNumber?: string;\n    legalCompanyTitle?: string;\n    contactName?: string;\n    contactSurname?: string;\n    identityNumber?: string;\n    email: string;\n    address: string;\n\n    iban: string;\n    subMerchantExternalId: string;\n    subMerchantType: SubMerchantType;\n}\n\nexport interface SubMerchantCreateResult {\n    subMerchantKey: string;\n    status: string;\n    errorCode?: string;\n    errorMessage?: string;\n}\n\nexport interface SubMerchantUpdateResult {\n    status: string;\n    errorCode?: string;\n    errorMessage?: string;\n}\n\n\nexport interface Creditcard {\n    cardNumber: string;\n    expireYear: string;\n    expireMonth: string;\n    cvc: string;\n    cardHolderName: string;\n}\n\nexport interface Buyer {\n    id: string,\n    name: string,\n    surname: string,\n    gsmNumber: string,\n    email: string,\n    identityNumber: string,\n    registrationAddress: string,\n    ip: string,\n    city: string,\n    country: string\n}\n\nexport interface Address {\n    contactName: string,\n    city: string,\n    country: string,\n    address: string,\n}\n\n\nexport interface BasketItem {\n    id: string,\n    name: string,\n    category1: string,\n    itemType: string,\n    price: number;\n    subMerchantKey?: string;\n    subMerchantPrice?: number;\n    merchantDebtApplied?: number;\n}\n\nexport interface PaymentRequest {\n    price: number;\n    paidPrice: number;\n    currency: string;\n    installment: string;\n    registerCard: boolean;\n    buyer: Buyer;\n    shippingAddress: Address;\n    billingAddress: Address;\n    conversationId: string;\n    basketId: string;\n    basketItems: BasketItem[];\n    callbackUrl?: string;\n}\n\nexport interface PaymentResult {\n    status: string;\n    threeDSHtmlContent?: string;\n    paymentId: string;\n    conversationId: string;\n    // productPrice: number;\n    // butcherShipPrice: number;\n    // kasaptanAlShipPrice: number;\n    paidPrice: number;\n    price: number;\n    itemTransactions: ItemTransaction[];\n}\n\nexport interface ItemTransaction {\n    itemId: string;\n    paymentTransactionId: string;\n    price: number,\n    paidPrice: number\n}\n\nexport interface SubMerchantItemApproveRequest {\n    paymentTransactionId: string;\n    conversationId?: string;\n}\n\nexport interface SubMerchantItemApproveResponse {\n    paymentTransactionId: string;\n    conversationId?: string;\n    status: string;\n    errorCode: string;\n    errorMessage: string;\n}\n\n\nexport type PaymentType = 'pre' | 'sales'\n\nexport interface PaymentTotal {\n    paymentId: string;\n    paid: number,\n    type: PaymentType,\n}\n\nexport interface ErrorResponse {\n    errorCode: string;\n    errorMessage: string;\n}\n\n\nexport class CreditcardPaymentProvider {\n\n    logger: SiteLogRoute;\n    userid: number;\n    ip: string;\n    marketPlace: boolean = true;\n    api: OrderApi;\n\n\n    constructor(config: any) {\n        this.marketPlace = config.marketPlace == \"true\";\n        this.api = new OrderApi();\n    }\n\n    validateCard(card: Creditcard) {\n\n    }\n\n    async pay3dHandshakeSuccess(result: any): Promise<boolean> {\n        return false;\n    }\n\n    async savePayment(provider: string, request: any, response: PaymentResult) {\n        return Payment.create({\n            userid: this.userid,\n            conversationId: response.conversationId,\n            paymentId: response.paymentId,\n            provider: provider,\n            ip: this.ip,\n            price: response.paidPrice,\n            request: JSON.stringify(request),\n            response: JSON.stringify(response)\n        })\n    }\n\n    get providerKey() {\n        return \"unset\"\n    }\n\n    getSubmerchantId(o: Order) {\n        return o.butcher[this.providerKey + \"SubMerchantKey\"]\n    }\n\n    async paySession(request: PaymentRequest): Promise<any> {\n\n    }\n\n    getMerchantMoney(o: Order, shouldBePaid: number, productPrice, shipOfButcher, shipOfKasaptanAl) {\n        let comission = o.getButcherComission(productPrice + shipOfButcher);        \n        let puan = o.getPuanTotal(productPrice);\n        return Helper.asCurrency(shouldBePaid - comission - puan - shipOfKasaptanAl)\n    }\n\n\n    requestFromOrder(ol: Order[], debts: { [key: string]: number; } = {}): PaymentRequest {\n        let basketItems: BasketItem[] = [];\n        let price = 0.00, paidPrice = 0.00;\n        ol.forEach((o, j) => {\n            let total = o.workedAccounts.find(p => p.code == 'total');\n            let productPrice = this.api.calculateProduct(o);\n            let shipOfButcher = this.api.calculateTeslimatOfButcher(o);\n            let shipOfKasaptanAl = this.api.calculateTeslimatOfKasaptanAl(o);\n            let shouldBePaid = Helper.asCurrency(total.alacak - total.borc);\n            let merchantPrice = 0.00;            \n            let butcherDebt = 0.00, debtApplied = 0.00;\n\n            if (this.marketPlace) {\n                merchantPrice = this.getMerchantMoney(o, shouldBePaid, productPrice, shipOfButcher, shipOfKasaptanAl);\n                butcherDebt = debts[o.butcherid];\n                if (merchantPrice <= butcherDebt) {\n                    debtApplied = merchantPrice - 1.00;\n                } else debtApplied = butcherDebt;\n                merchantPrice = Helper.asCurrency(merchantPrice - debtApplied);\n            }\n            basketItems.push({\n                category1: o.butcherName,\n                id: o.ordernum,\n                itemType: 'PHYSICAL',\n                name: o.name + ' ' + o.ordernum + ' nolu ' + 'ürün siparişi',\n                price: Helper.asCurrency(shouldBePaid),\n                merchantDebtApplied: debtApplied,\n                subMerchantKey: this.marketPlace ? this.getSubmerchantId(o) : undefined,\n                subMerchantPrice: merchantPrice > 0.00 ? merchantPrice : undefined\n            })\n\n            price += Helper.asCurrency(shouldBePaid);\n            paidPrice += Helper.asCurrency(shouldBePaid);\n        })\n\n        let orderids = ol.map(o => o.ordernum).join(',');\n        let o = ol[0];\n\n        let result = {\n            price: Helper.asCurrency(price),\n            paidPrice: Helper.asCurrency(paidPrice),\n            billingAddress: {\n                address: o.address,\n                city: o.areaLevel1Text,\n                contactName: o.name,\n                country: 'Turkey'\n            },\n            shippingAddress: {\n                address: o.address,\n                city: o.areaLevel1Text,\n                contactName: o.name,\n                country: 'Turkey'\n            },\n            basketId: orderids,\n            conversationId: orderids,\n            basketItems: basketItems,\n            buyer: {\n                city: o.areaLevel1Text,\n                country: 'Turkey',\n                email: o.email,\n                gsmNumber: o.phone,\n                id: o.userId.toString(),\n                identityNumber: '2312312',\n                ip: this.ip,\n                name: o.name,\n                registrationAddress: o.address,\n                surname: o.name\n            },\n            currency: 'TRY',\n            installment: '1',\n            registerCard: false\n        }\n        return result;\n    }\n\n\n    // requestFromOrder(ol: Order[]): PaymentRequest {\n    //     let basketItems: BasketItem [] = [];\n    //     let price = 0.00, paidPrice = 0.00;\n    //     ol.forEach((o, j) => {\n    //         o.items.forEach((oi, i) => {\n    //             let merchantPrice = undefined;\n    //             if (this.marketPlace) {\n    //                 let fee = i == 0 ? Helper.asCurrency(o.butcher.commissionFee): 0.00;\n    //                 let rated = Helper.asCurrency(oi.price * (o.butcher.commissionRate))\n    //                 merchantPrice = Helper.asCurrency(oi.price - fee - rated           )                                               \n    //             }\n    //             basketItems.push({\n    //                 category1: o.butcherName,\n    //                 id: oi.orderitemnum,\n    //                 itemType: 'PHYSICAL',\n    //                 name: oi.product.name,\n    //                 price: Helper.asCurrency(oi.price),\n    //                 subMerchantKey: this.marketPlace ? o.butcher[this.providerKey + \"SubMerchantKey\"]: undefined,\n    //                 subMerchantPrice: merchantPrice\n    //             }) \n    //         })\n    //         price += Helper.asCurrency(o.total); \n    //         paidPrice += Helper.asCurrency(o.total); \n    //     })\n\n    //     let orderids = ol.map(o=>o.ordernum).join(',');\n    //     let o = ol[0];\n\n    //     let result = {\n    //         price: Helper.asCurrency(price),\n    //         paidPrice: Helper.asCurrency(paidPrice),\n    //         billingAddress: {\n    //             address: o.address,\n    //             city: o.areaLevel1Text,\n    //             contactName: o.name,\n    //             country: 'Turkey' \n    //         },\n    //         shippingAddress: {\n    //             address: o.address,\n    //             city: o.areaLevel1Text,\n    //             contactName: o.name,\n    //             country: 'Turkey'                \n    //         },\n    //         basketId: orderids,\n    //         conversationId: orderids,\n    //         basketItems: basketItems,\n    //         buyer: {\n    //             city: o.areaLevel1Text,\n    //             country: 'Turkey',\n    //             email: o.email,\n    //             gsmNumber: '',\n    //             id: o.userId.toString(),\n    //             identityNumber: '2312312',\n    //             ip: this.ip,\n    //             name: o.name,\n    //             registrationAddress: o.address,\n    //             surname: o.name                \n    //         },\n    //         currency: 'TRY',\n    //         installment: '1',\n    //         registerCard: false\n    //     }\n    //     return result;\n    // }\n\n    subMerchantRequestFromButcher(b: Butcher): SubMerchantCreateRequest {\n        return {\n            address: b.address,\n            email: b.email,\n            iban: b.iban,\n            name: b.name,\n            legalCompanyTitle: b.legalName,\n            subMerchantExternalId: b.id.toString(),\n            subMerchantType: <any>b.companyType,\n            taxNumber: b.companyType == 'LIMITED_OR_JOINT_STOCK_COMPANY' ? b.taxNumber : undefined,\n            taxOffice: b.taxOffice,\n            identityNumber: b.companyType != 'LIMITED_OR_JOINT_STOCK_COMPANY' ? b.taxNumber : undefined\n        }\n    }\n\n    async logOperation(logType: string, request: any, result: any) {\n        if (this.logger) {\n            let data = {\n                request: request,\n                response: result\n            }\n            return await this.logger.log(\n                {\n                    logData: JSON.stringify(data),\n                    logtype: logType,\n                    f1: request.conversationId,\n                    f2: result.paymentId,\n                    status: result.status\n                }\n            )\n        } else return Promise.resolve();\n    }\n\n    async approveItem(request: SubMerchantItemApproveRequest): Promise<SubMerchantItemApproveResponse> {\n        return null;\n    }\n\n    async disApproveItem(request: SubMerchantItemApproveRequest): Promise<SubMerchantItemApproveResponse> {\n        return null;\n    }\n\n    async pay(request: PaymentRequest, card: Creditcard): Promise<PaymentResult> {\n        return null;\n    }\n\n    async pay3dInit(request: PaymentRequest, card: Creditcard): Promise<PaymentResult> {\n        return null;\n    }\n\n    async pay3dComplete(request: any): Promise<PaymentResult> {\n        return null\n    }\n\n    async createSubMerchant(request: SubMerchantCreateRequest): Promise<SubMerchantCreateResult> {\n        return null;\n    }\n\n\n    async updateSubMerchant(request: SubMerchantCreateRequest): Promise<SubMerchantUpdateResult> {\n        return null;\n    }\n\n}\n\nexport class CreditcardPaymentFactory {\n    static items: { [key: string]: typeof CreditcardPaymentProvider } = {}\n\n    static register(key: string, cls: typeof CreditcardPaymentProvider) {\n        CreditcardPaymentFactory.items[key] = cls;\n    }\n\n    static getInstance(key?: string): CreditcardPaymentProvider {\n        key = key || paymentConfig.default || config.paymentProvider\n        const cls = CreditcardPaymentFactory.items[key]\n        return new cls(paymentConfig.providers[key][config.nodeenv])\n    }\n\n} "],"sourceRoot":"../../../src/"}