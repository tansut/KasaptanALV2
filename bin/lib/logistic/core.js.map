{"version":3,"sources":["../src/lib/logistic/core.ts"],"names":[],"mappings":"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","file":"core.js","sourcesContent":["var fs = require('fs')\nimport config from '../../config';\nimport * as path from \"path\";\nimport { Order } from '../../db/models/order';\nimport Helper from '../helper';\nimport Butcher from '../../db/models/butcher';\nimport SiteLogRoute from '../../routes/api/sitelog';\nimport { Transaction, or } from \"sequelize\";\nimport Payment from '../../db/models/payment';\nimport { ComissionHelper } from '../commissionHelper';\nimport AccountModel from '../../db/models/accountmodel';\nimport { Account } from '../../models/account';\nimport { OrderSource } from '../../models/order';\nimport { ShipmentTypeDesc } from '../../models/shipment';\nimport { GeoLocation } from '../../models/geo';\nimport Dispatcher from '../../db/models/dispatcher';\nimport { off } from 'process';\n\nconst paymentConfig = require(path.join(config.projectDir, `logistic.json`));\n\nexport interface CustomerPriceParams {\n    distance?: number;\n    orderTotal: number;\n    regularPrice?: number;\n}\n\nexport interface CustomerPriceConfig {\n    offerPrice?: number;\n    pricePerKM?: number;\n    priceStartsAt?: number;\n    freeShipPerKM?: number;\n    contribitionRatio?: number;\n    maxDistance?: number;\n    minOrder?: number;\n}\n\nexport enum VehicleType {\n    Motor,\n    Car\n}\n\nexport interface PriceSlice {\n    start?: number;\n    end?: number;\n    cost: number;\n}\n\n\n\nexport interface Point {\n    id?: string;\n    address?: string;\n    contactName?: string;\n    contactPhone?: string;\n    orderId?: string;\n    lat: number;\n    lng: number;\n    note?: string;\n    entrance?: string;\n    floor?: string;\n    apartment?: string;\n    start?: Date,\n    finish?: Date,\n    arrivalEstimatedStart?: Date,\n    arrivalEstimatedFinish?: Date,\n    arrivalActual?: Date\n}\n\nexport interface BasicRequest {\n    matter: string;\n    orderTotal: number;\n    vehicleType: VehicleType;\n    weight: number;\n    points: Point[];\n}\n\nexport interface BasicResponse {\n}\n\nexport interface OfferRequest extends BasicRequest {\n    notifyCustomerSms: boolean;\n}\n\nexport interface OrderRequest extends BasicRequest {\n    notifyCustomerSms: boolean;\n}\n\nexport interface OfferResponse extends BasicResponse {\n    totalFee: number;\n    deliveryFee?: number;\n    weightFee?: number;\n    discount?: number;\n    points?: Point[];\n    customerFee: number;\n}\n\nexport interface OrderResponse extends BasicResponse {\n    orderId: string;\n    status: string;\n    statusDesc: string;\n    totalFee: number;\n    deliveryFee: number;\n    weightFee: number;\n    payment: number;\n    discount: number;\n    createDate: Date;\n    finishDate: Date;\n    points: Point[];\n}\n\n\nexport interface FromTo {\n    start: GeoLocation;\n    finish: GeoLocation;\n}\n\nexport interface LogisticProviderOptions {\n    dispatcher: Dispatcher\n}\n\n\nexport class LogisticProvider {\n    logger: SiteLogRoute;\n    userid: number;\n    ip: string;\n    options: LogisticProviderOptions;\n    lastOffer: OfferResponse;\n\n    async distance(ft: FromTo) {\n        return Helper.distance(ft.start, ft.finish);\n    }\n\n\n    offerRequestFromTo(fromTo: FromTo): OfferRequest {\n        let req: OfferRequest = {\n            orderTotal: 0.00,\n            weight: 0,\n            matter: 'GÄ±da',\n            notifyCustomerSms: false,\n            vehicleType: VehicleType.Motor,\n            points: [{\n                address: 'Foo',\n                contactPhone: '05326374151',\n                lat: fromTo.start.coordinates[0],\n                lng: fromTo.start.coordinates[1],\n                orderId: ''\n            }, {\n                address: 'Foo',\n                contactPhone: '05326374151',\n                lat: fromTo.finish.coordinates[0],\n                lng: fromTo.finish.coordinates[1],\n                orderId: ''\n            }]\n        }\n        return req\n    }\n\n    async offerFromTo(fromTo: FromTo): Promise<OfferResponse> {\n        let req = this.offerRequestFromTo(fromTo);\n        return await this.requestOffer(req)\n    }\n\n\n    async priceSlice(distance: FromTo, slice: number = 50.00, options = {}): Promise<PriceSlice[]> {\n        let arr: PriceSlice[] = []\n\n        return arr;\n    }\n\n    fromOrder(o: Order): BasicRequest {\n        let start = null, finish = null, shour = 0, fHour = 0;\n        if (o.shipmentType == \"plan\" || o.shipmentType == \"sameday\") {\n            shour = Math.round(o.shipmenthour / 100);\n            fHour = o.shipmenthour % 100;\n            start = new Date(o.shipmentdate.getFullYear(), o.shipmentdate.getMonth(), o.shipmentdate.getDate(), shour, 0, 0);\n            finish = new Date(o.shipmentdate.getFullYear(), o.shipmentdate.getMonth(), o.shipmentdate.getDate(), fHour, 0, 0);\n        }\n        return {\n            matter: 'GÄ±da',\n            vehicleType: VehicleType.Motor,\n            weight: 0,\n            orderTotal: o.subTotal,\n            points: [\n                {\n                    address: o.butcher.address,\n                    contactName: o.butcher.name,\n                    contactPhone: o.butcher.phone,\n                    lat: o.butcher.lat,\n                    lng: o.butcher.lng,\n                    orderId: o.ordernum,\n                    note: \"LÃ¼tfen kasaba uÄrayÄ±p mÃ¼Återi paketini alÄ±n: \" + o.butcher.address,\n                },\n                {\n                    address: o.displayAddress,\n                    contactName: o.name,\n                    contactPhone: o.phone,\n                    lat: o.shipLocation.coordinates[0],\n                    lng: o.shipLocation.coordinates[1],\n                    orderId: o.ordernum,\n                    note: o.displayAddress,\n                    apartment: `Bina: ${o.bina}`,\n                    floor: `Kat: ${o.kat}`,\n                    entrance: `Daire: ${o.daire}`,\n                    start: start ? start : undefined,\n                    finish: finish ? finish : undefined,\n                }\n            ]\n        }\n    }\n\n    getCustomerFeeConfig(): CustomerPriceConfig {\n        return null;\n    }\n\n    calculateFeeForCustomer(params: CustomerPriceParams): OfferResponse {\n        let input: CustomerPriceConfig = this.getCustomerFeeConfig();\n        if (!input) return null;\n        let fee = 0.00;\n        if (input.maxDistance && params.distance > input.maxDistance)\n            return null;\n        if (input.minOrder && params.orderTotal < input.minOrder)\n            return null;\n        if (input.priceStartsAt && params.distance < input.priceStartsAt)\n            fee = 0.00;\n        let regular = params.distance ? Helper.asCurrency(input.pricePerKM * params.distance) : input.offerPrice;\n        let contrib = input.contribitionRatio ? Helper.asCurrency(params.orderTotal * input.contribitionRatio) : 0.00;\n        let free = input.freeShipPerKM ? (input.freeShipPerKM * params.distance) : 0.00;\n        if (params.orderTotal >= free) fee = 0;\n        let calc = Math.max(0, regular - contrib);\n        fee = Helper.asCurrency(Math.round(calc / 2.5) * 2.5)\n        return {\n            totalFee: regular,\n            customerFee: fee\n        }\n    }\n\n\n\n    offerFromOrder(o: Order): OfferRequest {\n        let req: OfferRequest = <any>this.fromOrder(o);\n        req.notifyCustomerSms = true;\n        return req;\n    }\n\n    async offerFromDispatcher(to: GeoLocation) {\n       let fromTo: FromTo = {\n           start: this.options.dispatcher.butcher.location,\n           finish: to\n       }\n       let offer = await this.offerFromTo(fromTo);\n       return offer;\n    }\n\n    orderFromOrder(o: Order): OrderRequest {\n        let req: OrderRequest = <any>this.fromOrder(o);\n        req.notifyCustomerSms = true;\n        return req;\n    }\n\n    async requestOffer(req: OfferRequest): Promise<OfferResponse> {\n        return null;\n    }\n\n    async createOrder(req: OrderRequest): Promise<OrderResponse> {\n        return null;\n    }\n\n    constructor(config: any, options: LogisticProviderOptions) {\n        this.options = options;\n    }\n\n    get providerKey() {\n        return \"unset\"\n    }\n\n\n\n    async logOperation(logType: string, request: any, result: any) {\n        if (this.logger) {\n            let data = {\n                request: request,\n                response: result\n            }\n            return await this.logger.log(\n                {\n                    logData: JSON.stringify(data),\n                    logtype: logType,\n                    f1: request.conversationId,\n                    f2: result.paymentId,\n                    status: result.status\n                }\n            )\n        } else return Promise.resolve();\n    }\n\n\n}\n\nexport class LogisticFactory {\n    static items: { [key: string]: typeof LogisticProvider } = {}\n\n    static register(key: string, cls: typeof LogisticProvider) {\n        LogisticFactory.items[key] = cls;\n    }\n\n    static getInstance(key: string, options: LogisticProviderOptions): LogisticProvider {\n        key = key || paymentConfig.default || config.paymentProvider\n        const cls = LogisticFactory.items[key]\n\n        return new cls(paymentConfig.providers[key][config.nodeenv], options)\n    }\n\n} "],"sourceRoot":"../../../src/"}