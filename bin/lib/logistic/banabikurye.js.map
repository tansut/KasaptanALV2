{"version":3,"sources":["../src/lib/logistic/banabikurye.ts"],"names":[],"mappings":"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","file":"banabikurye.js","sourcesContent":["import { LogisticProvider, VehicleType, FromTo, OfferRequest, OfferResponse, Point, LogisticFactory, OrderRequest, OrderResponse, PriceSlice, CustomerPriceConfig } from \"./core\";\nimport axios, { AxiosResponse } from \"axios\";\nimport Helper from \"../helper\";\nimport { off } from \"process\";\n\nexport interface BanabikuryeConfig {\n    apiKey: string,\n    uri: string;\n}\n\ninterface BanabikuryeRequest {\n\n}\n\ninterface BanabikuryeResponse {\n    is_successful: boolean;    \n}\n\nexport default class BanabikuryeProvider extends LogisticProvider {\n    static key = \"banabikurye\";\n    config: BanabikuryeConfig;\n\n    async offerFromTo(fromTo: FromTo): Promise<OfferResponse> {\n        let req: OfferRequest = {\n            weight: 0,\n            matter:'GÄ±da',\n            notifyCustomerSms: false,\n            vehicleType: VehicleType.Motor,\n            points: [{\n                address: 'Foo',\n                contactPhone: '05326374151',\n                lat: fromTo.start.coordinates[0],\n                lng: fromTo.start.coordinates[1],\n                orderId:''\n            }, {\n                address:'Foo',\n                contactPhone: '05326374151',\n                lat: fromTo.finish.coordinates[0],\n                lng: fromTo.finish.coordinates[1],\n                orderId:''\n            }]\n        }\n        return await this.requestOffer(req)\n    }\n\n    async priceSlice(ft: FromTo, slice: number = 100.00, options = {}): Promise<PriceSlice[]> {\n        let prices = [], result: PriceSlice []=[];\n        let offer = await this.offerFromTo(ft);\n        \n        let distance = Helper.distance(ft.start, ft.finish);\n\n\n        for(let i = 0; i < 10; i++)\n            prices.push(Helper.asCurrency(i*slice))        \n\n            let config: CustomerPriceConfig = {\n                distance: 0,\n                offerPrice: offer.totalFee,\n                orderTotal: 0,\n                contribitionRatio: 0.04,\n                freeShipPerKM: 25,\n                pricePerKM: 1.5,\n                priceStartsAt: 5,\n                maxDistance: 20,\n                minOrder: 100,\n            }\n    \n    \n            for(let i = 0; i < 10; i++)\n                prices.push(Helper.asCurrency(i*slice));\n                \n            for(let i = 0; i < prices.length; i++) {\n                    config.orderTotal = prices[i];\n                    let cost = (await this.calculateFeeForCustomer(config));\n                    if (cost) {\n                        let item = {\n                            start: prices[i],\n                            end: prices[i] + slice,\n                            cost: cost.totalFee\n                        }\n                        result.push(item)\n                        if (cost.totalFee <= 0.00) {\n                            item.end = 0.00;\n                            break\n                        };\n                    }\n            }\n    \n            return result;\n\n\n    }\n    \n\n\n\n\n    async get<T>(method: string) {\n        const config = {\n            headers: {\n                'X-DV-Auth-Token': this.config.apiKey\n            }\n        }\n        return await axios.get<T>(`${this.config.uri}/${method}`, config)\n    }\n\n    async post<T>(method: string, req:BanabikuryeRequest) {\n        const config = {\n            headers: {\n                'X-DV-Auth-Token': this.config.apiKey\n            }\n        }\n        return await axios.post<T>(`${this.config.uri}/${method}`, req, config)\n    }    \n\n    toBnbPoint(p: Point) {\n        return {\n            address: p.address,\n            contact_person: {\n                name: p.contactName,\n                phone: p.contactPhone\n            },\n            client_order_id: p.orderId,\n            latitude: p.lat,\n            longitude: p.lng,\n            required_start_datetime: p.start ? p.start: undefined,\n            required_finish_datetime: p.finish ? p.finish: undefined,\n            note: p.note,\n            apartment_number: p.apartment,\n            entrance_number: p.entrance,\n            floor_number: p.floor,\n            packages:[]\n        }\n    }\n\n    fromBnbPoint(p: any): Point {\n        return {\n            id: p.point_id,\n            contactName: p.contact_person.name, \n            contactPhone: p.contact_person.phone,\n            lat: p.latitude,\n            lng: p.longitude,\n            address: p.address,\n            orderId: p.client_order_id,\n            start: p.required_start_datetime,\n            finish: p.required_finish_datetime,\n            arrivalEstimatedStart: p.arrival_start_datetime,\n            arrivalEstimatedFinish: p.arrival_finish_datetime,     \n            arrivalActual: p.courier_visit_datetime  \n        }\n    }    \n\n    toOfferRequest(oreq: OfferRequest): BanabikuryeRequest {\n        let req = {\n            total_weight_kg: oreq.weight,\n            matter: oreq.matter,\n            is_contact_person_notification_enabled: oreq.notifyCustomerSms,\n            points: []\n        }\n        \n        oreq.points.forEach(p=> {\n            req.points.push(this.toBnbPoint(p))\n        })\n        return req;\n    }\n\n    toOrderRequest(oreq: OrderRequest): BanabikuryeRequest {\n        let req = {\n            total_weight_kg: oreq.weight,\n            matter: oreq.matter,\n            is_contact_person_notification_enabled: oreq.notifyCustomerSms,\n            points: []\n        }\n        oreq.points.forEach(p=> {\n            req.points.push(this.toBnbPoint(p))\n        })\n        return req;\n    }    \n\n    fromOfferResponse(ores: BanabikuryeResponse): OfferResponse {\n        if (ores.is_successful) {\n            let order = ores['order'];\n            let res: OfferResponse = {\n                deliveryFee: parseFloat(order['delivery_fee_amount']),\n                discount: parseFloat(order['discount_amount']),\n                points: order['points'].map(p=>this.fromBnbPoint(p)),\n                weightFee: parseFloat(order['weight_fee_amount']),                \n                totalFee: parseFloat(order['payment_amount']),   \n            }    \n            return res;            \n        } else {\n            throw new Error('TaÅÄ±ma teklifi alÄ±namadÄ±')\n        }\n    }    \n\n    fromOrderResponse(ores: BanabikuryeResponse): OrderResponse {\n        if (ores.is_successful) {\n            let order = ores['order'];\n            let res: OrderResponse = {\n                orderId: order['order_id'],\n                createDate: order['created_datetime'],\n                finishDate: order['finish_datetime'],\n                status: order['status'],\n                statusDesc: order['status_description'],                \n                deliveryFee: parseFloat(order['delivery_fee_amount']),\n                payment: parseFloat(order['payment_amount']), \n                discount: parseFloat(order['discount_amount']),\n                points: order['points'].map(p=>this.fromBnbPoint(p)),\n                weightFee: parseFloat(order['weight_fee_amount']),\n                totalFee: parseFloat(order['payment_amount'])    \n            }    \n            return res;            \n        } else {\n            throw new Error('TaÅÄ±ma teklifi alÄ±namadÄ±')\n        }\n    }  \n\n    async requestOffer(req: OfferRequest): Promise<OfferResponse> {\n        let request = this.toOfferRequest(req);\n        let result = await this.post<BanabikuryeResponse>(\"calculate-order\", request);\n        return this.fromOfferResponse(result.data);\n    }\n\n    async createOrder(req: OrderRequest): Promise<OrderResponse> {\n        let request = this.toOrderRequest(req);\n        let result = await this.post<BanabikuryeResponse>(\"create-order\", request);\n        return this.fromOrderResponse(result.data);        \n    }        \n\n    static register() {\n        LogisticFactory.register(BanabikuryeProvider.key, BanabikuryeProvider)\n    }\n\n    constructor(config: BanabikuryeConfig) {\n        super(config);      \n        this.config = config;  \n    }\n}"],"sourceRoot":"../../../src/"}