{"version":3,"sources":["../src/lib/logistic/butcher.ts"],"names":[],"mappings":"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","file":"butcher.js","sourcesContent":["import { LogisticProvider, LogisticFactory, PriceSlice, FromTo, CustomerPriceConfig, OfferResponse, CustomerPriceParams, OfferRequest } from \"./core\";\nimport Dispatcher from \"../../db/models/dispatcher\";\nimport Helper from \"../helper\";\n\nexport class ButcherManualLogistics extends LogisticProvider {\n    static key = \"butcher\";\n\n    static register() {\n        LogisticFactory.register(ButcherManualLogistics.key, ButcherManualLogistics)\n    }\n\n\n\n    async requestOffer(req: OfferRequest): Promise<OfferResponse> {\n        let fee = 0.00;\n        if (this.options.dispatcher.totalForFree <= 0) {\n            fee = this.options.dispatcher.fee\n        }\n        else fee = (Math.max(0.00, (this.options.dispatcher.totalForFree - req.orderTotal > 0) ? this.options.dispatcher.fee : 0))\n        return {\n            totalFee: this.options.dispatcher.fee,\n            customerFee: fee\n        }\n    }\n\n    async offerFromTo(fromTo: FromTo): Promise<OfferResponse> {\n       let req = this.offerRequestFromTo(fromTo);\n       return this.requestOffer(req)\n    }\n\n    async priceSlice(distance: FromTo, slice: number = 50.00): Promise<PriceSlice[]> {\n\n        let arr: PriceSlice[] = []\n\n        if (this.options.dispatcher) {\n            if (this.options.dispatcher.fee > 0.0) {\n                arr.push({\n                    start: this.options.dispatcher.min,\n                    end: this.options.dispatcher.totalForFree,\n                    cost: this.options.dispatcher.fee\n                })\n            }\n            if (this.options.dispatcher.totalForFree > 0.00) {\n                arr.push({\n                    start: this.options.dispatcher.totalForFree,\n                    cost: 0.00\n                })\n            }\n            if (arr.length == 0) {\n                arr.push({\n                    start: this.options.dispatcher.min,\n                    end: this.options.dispatcher.totalForFree,\n                    cost: this.options.dispatcher.fee\n                })\n            }\n\n\n        }\n\n        return arr;\n    }\n\n    constructor(config: any, options: any) {\n        super(config, options);\n    }\n\n}\n\n\n\nexport class ButcherAutoLogistics extends LogisticProvider {\n    static key = \"butcher/auto\";\n    private dispatcher: Dispatcher;\n\n    static register() {\n        LogisticFactory.register(ButcherAutoLogistics.key, ButcherAutoLogistics)\n    }\n\n    getCustomerFeeConfig(): CustomerPriceConfig {\n        let config: CustomerPriceConfig = {\n            contribitionRatio: 0.04,\n            freeShipPerKM: 25,\n            pricePerKM: 1.5,\n            priceStartsAt: 5,\n            maxDistance: 20,\n            minOrder: 100,\n        }\n\n        return config;\n    }\n\n    async priceSlice(ft: FromTo, slice: number = 100.00): Promise<PriceSlice[]> {\n        let distance = Helper.distance(ft.start, ft.finish);\n        let prices = [], result: PriceSlice[] = [];\n        for (let i = 0; i < 10; i++)\n            prices.push(Helper.asCurrency(i * slice));\n        for (let i = 0; i < prices.length; i++) {\n            let cost = this.calculateFeeForCustomer({\n                distance: distance,\n                orderTotal: prices[i]\n            });\n            if (cost) {\n                let item = {\n                    start: prices[i],\n                    end: prices[i] + slice,\n                    cost: cost.totalFee\n                }\n                result.push(item)\n                if (cost.totalFee <= 0.00) {\n                    item.end = 0.00;\n                    break\n                };\n            }\n        }\n\n        return result;\n    }\n\n    constructor(config: any, options: any) {\n        super(config, options);\n        this.dispatcher = options.dispatcher;\n    }\n\n}"],"sourceRoot":"../../../src/"}