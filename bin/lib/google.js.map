{"version":3,"sources":["../src/lib/google.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,iCAA6C;AAa7C,MAAa,MAAM;IAEf,MAAM,CAAC,qBAAqB,CAAC,OAAe;QACzC,IAAI,GAAG,GAAqB,EAAE,CAAC;QAC/B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,CAAA,EAAE;YAC1B,IAAI,GAAG,GAAkB;gBACrB,YAAY,EAAE,CAAC,CAAC,QAAQ,CAAC,aAAa;gBACtC,QAAQ,EAAE;oBACN,IAAI,EAAE,OAAO;oBACb,WAAW,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC;iBAClE;gBACD,OAAO,EAAE,CAAC,CAAC,QAAQ;gBACnB,QAAQ,EAAE;oBACN,SAAS,EAAE;wBACV,IAAI,EAAE,OAAO;wBACb,WAAW,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC;qBACnF;oBACD,SAAS,EAAE;wBACV,IAAI,EAAE,OAAO;wBACb,WAAW,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC;qBACnF;iBACH;aACD,CAAA;YACJ,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACf,CAAC,CAAC,CAAA;QACF,OAAO,GAAG,CAAC;IAClB,CAAC;IAED,MAAM,CAAO,WAAW,CAAC,KAAa;;YAClC,IAAI,OAAO,GAAG,MAAM,MAAM,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YACpD,OAAO,MAAM,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAA;QAChD,CAAC;KAAA;IAKD,MAAM,CAAO,OAAO,CAAC,GAAW,EAAE,GAAW;;YAC1C,IAAI,GAAG,GAAG,4DAA4D,GAAG,IAAI,GAAG,8CAA8C,CAAA;YAC7H,IAAI,IAAmB,CAAC;YACxB,IAAI,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC5B,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;QAC7B,CAAC;KAAA;IAED,MAAM,CAAO,iBAAiB,CAAC,KAAa;;YACxC,IAAI,GAAG,GAAG,6DAA6D,SAAS,CAAC,KAAK,CAAC,8CAA8C,CAAC;YACtI,IAAI,IAAmB,CAAC;YACxB,IAAI,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC5B,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;QAC7B,CAAC;KAAA;CACJ;AAjDD,wBAiDC","file":"google.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\nimport { GeoLocation, LocationType } from \"../models/geo\";\n\nexport interface GeocodeResult {\n    location: GeoLocation;\n    locationType: LocationType;\n    placeid: string;\n    viewport: {\n        northeast: GeoLocation;\n        southwest: GeoLocation;\n    }\n}\n\nexport class Google  {\n\n    static convertLocationResult(results: any []): GeocodeResult [] {\n       let res: GeocodeResult [] = [];\n       results && results.forEach(r=> {\n           let geo: GeocodeResult = {\n               locationType: r.geometry.location_type,\n               location: {\n                   type: 'Point',\n                   coordinates: [r.geometry.location.lat, r.geometry.location.lng]\n               },\n               placeid: r.place_id,\n               viewport: {\n                   northeast: {\n                    type: 'Point',\n                    coordinates: [r.geometry.viewport.northeast.lat, r.geometry.viewport.northeast.lng]\n                   },\n                   southwest: {\n                    type: 'Point',\n                    coordinates: [r.geometry.viewport.southwest.lat, r.geometry.viewport.southwest.lng]\n                   }\n                },\n               }\n            res.push(geo);\n           })\n           return res;\n    }\n\n    static async getLocation(adres: string): Promise<GeocodeResult []> {\n        let results = await Google.getLocationResult(adres);\n        return Google.convertLocationResult(results)\n    }    \n\n\n\n\n    static async reverse(lat: number, lng: number) {\n       let url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${lng}&key=AIzaSyBFqn2GNAhwbJnpga-3S3xQGBc0EcdAgH8`\n        let resp: AxiosResponse;\n        resp = await axios.get(url);\n        return resp.data.results;\n    }\n\n    static async getLocationResult(adres: string) {\n        let url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURI(adres)}&key=AIzaSyBFqn2GNAhwbJnpga-3S3xQGBc0EcdAgH8`;       \n        let resp: AxiosResponse;\n        resp = await axios.get(url);\n        return resp.data.results;\n    }\n}"],"sourceRoot":"../../src/"}