{"version":3,"sources":["../src/lib/productManager.ts"],"names":[],"mappings":"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","file":"productManager.js","sourcesContent":["import * as Jimp2 from 'jimp'\nconst Jimp = <Jimp2>require('jimp');\nimport * as path from \"path\"\nimport Category, { CategorySubItemsMode } from '../db/models/category';\nimport ProductCategory from '../db/models/productcategory';\nimport { Json } from 'sequelize/types/lib/utils';\nimport ProductModel from '../db/models/product';\nimport * as _ from \"lodash\";\nimport Butcher from '../db/models/butcher';\nimport ButcherProduct from '../db/models/butcherproduct';\nimport Resource from '../db/models/resource';\nimport ResourceCategory from '../db/models/resourcecategory';\nimport SubCategory from '../db/models/subcategory';\n\ninterface FilterOptions {\n    chunk?: number;\n}\n\nexport default class ProductManager {\n    static async getProducts() {\n        return await ProductModel.findAll({\n            include: [{\n                model: ProductCategory,\n                include: [Category]\n            },\n            ], where: {},\n            order: [[\"displayorder\", \"desc\"]]\n        });\n    }\n\n    static async getProductsOfCategories(catids: number[]) {\n        return await ProductModel.findAll({\n            include: [{\n                model: ProductCategory,\n                as: 'categories',\n                include: [{\n                    model: Category}\n                ]\n            },\n            ], where: {\n                '$categories.category.id$': catids\n            },\n            order: [[ { model: ProductCategory, as: 'categories' }, \"displayOrder\", \"desc\"], [ \"displayorder\", \"desc\"]]\n        });\n    }    \n\n\n\n    static async getCategories() {\n        return await Category.findAll({\n            order: [\"type\", \"displayorder\"]\n        });\n    }\n\n    static async getProductsOfButcher(butcher: Butcher) {\n        return await ProductModel.findAll({\n            include: [{\n                model: ProductCategory,\n                include: [Category]\n            }\n            ], where: {\n\n            }\n        });\n    }\n\n    static filterResources(products: Resource[], filter = {}, options: FilterOptions = {}) {\n        let result = _.filter(products, filter)\n        return options.chunk > 0 ? _.chunk(result, options.chunk) : result\n    }\n\n    static filterResourcesByCategory(products: Resource[], categoryFilter = {}, productFilter = {}, options: FilterOptions = {}) {\n        let filteredProducts = ProductManager.filterResources(products, productFilter);\n        let result = products.filter(p => {\n            return p.categories.findIndex(c => {\n                let pass = true\n                Object.keys(categoryFilter).forEach(k => {\n                    let val = c.category[k];\n                    pass = pass && (val == categoryFilter[k])\n                })\n                return pass;\n            }) >= 0\n        })\n        result = _.orderBy(result, (i: Resource) => {\n            return i.categories.find(c=>c.category.slug == categoryFilter['slug']).displayOrder\n        }, ['desc']);\n        return options.chunk > 0 ? _.chunk(result, options.chunk) : result\n    }\n\n    static filterProducts(products: ProductModel[], filter = {}, options: FilterOptions = {}) {\n        let result = _.filter(products, filter)\n        return options.chunk > 0 ? _.chunk(result, options.chunk) : result\n    }\n\n    static generateSubcategories(category: Category, products: ProductModel[]) {\n        let subCategories: SubCategory [] = [];\n        if (category.subItemsMode == CategorySubItemsMode.subitems) {\n            subCategories = category.subCategories;\n        } else if (category.subItemsMode == CategorySubItemsMode.tag1) {\n            let tags = _.uniq(products.map(p=>p.tag1));\n            let i = 0;\n            tags.forEach(t=> {\n                let subCat = new SubCategory({\n                    id: i++,\n                    visible: true,\n                    categoryid: 0,\n                    displayOrder: i,\n                    title: t,\n                    description:'',\n                    category: null\n                })\n                subCategories.push(subCat)\n            })\n        }\n\n        if (subCategories.length == 0) {\n            let subCat = new SubCategory({\n                id: 0,\n                visible: false,\n                categoryid: 0,\n                displayOrder: 0,\n                title: 'tümü',\n                description:'',\n                category: null\n            })\n            subCategories.push(subCat)            \n        }\n \n        subCategories.forEach((sc,i) => {\n            if (subCategories.length == 1) {\n                sc.products = products \n            } else {\n                if (category.subItemsMode == CategorySubItemsMode.subitems) {\n                    sc.products = products.filter(p => { return p.categories.find(pc=>pc.subcategoryid == sc.id) }) \n                } else {\n                    sc.products = products.filter(p => { return p.tag1 == sc.title }) \n                }\n            }\n        })\n        subCategories = _.sortBy(subCategories, [\"displayOrder\"]).reverse() ; \n        return subCategories;\n    }\n\n\n\n\n    static filterProductsByCategory(products: ProductModel[], categoryFilter = {}, productFilter = {}, options: FilterOptions = {}) {\n        let filteredProducts = ProductManager.filterProducts(products, productFilter);\n        let result = products.filter(p => {\n            return p.categories.findIndex(c => {\n                let pass = true\n                Object.keys(categoryFilter).forEach(k => {\n                    let val = c.category[k];\n                    pass = pass && (val == categoryFilter[k])\n                })\n                return pass;\n            }) >= 0\n        })\n        result = _.orderBy(result, (i: ProductModel) => {\n            return i.categories.find(c=>c.category.slug == categoryFilter['slug']).displayOrder\n        }, ['desc']);\n        return options.chunk > 0 ? _.chunk(result, options.chunk) : result\n    }\n\n\n\n\n    static getProductCategories(product: ProductModel) {\n        let categories = product.getCategories();\n        return JSON.stringify(categories.map(p => p.name))\n    }\n\n    static filterCategories(categories: Category[], filter = {}, options: FilterOptions = {}) {\n        let result = _.filter(categories, filter)\n        return options.chunk > 0 ? _.chunk(result, options.chunk) : result\n    }\n}"],"sourceRoot":"../../src/"}