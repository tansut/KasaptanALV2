{"version":3,"sources":["../src/lib/paymentrouter.ts"],"names":[],"mappings":"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","file":"paymentrouter.js","sourcesContent":["import * as http from './http';\nimport * as express from \"express\";\nimport { auth } from '../middleware/auth';\nimport { Auth } from './common';\nimport 'reflect-metadata';\nimport { request } from 'https';\nimport * as stream from 'stream';\nimport * as _ from 'lodash';\nimport * as moment from 'moment';\nimport sequelize = require('sequelize');\nimport config from \"../config\";\nimport * as path from \"path\";\nimport Area from '../db/models/area';\nimport Category from '../db/models/category';\nimport Product from '../db/models/product';\nimport { where } from 'sequelize';\nlet ellipsis = require('text-ellipsis');\nimport { PreferredAddress } from '../db/models/user';\nimport { ViewRouter } from './router';\nimport { Creditcard, CreditcardPaymentFactory, PaymentTotal, PaymentRequest, PaymentResult, CreditcardPaymentProvider } from './payment/creditcard';\nimport SiteLogRoute from '../routes/api/sitelog';\nvar MarkdownIt = require('markdown-it')\nimport Payment from '../db/models/payment';\nimport { Order } from '../db/models/order';\n\n\nexport class PaymentRouter extends ViewRouter {\n    _paymentProvider: CreditcardPaymentProvider;\n    threeDhtml: string;\n\n    async paymentSuccess(request: PaymentRequest, payment: PaymentResult) {\n        if (this.req.body.paymentId) {\n            await Payment.update(\n                {\n                    status: 'used'\n                },\n                {\n                    where: {\n                        paymentId: this.req.body.paymentId\n                    }\n                }\n            )\n        }\n    }\n\n    get pageHasPaymentId() {\n        return this.req.body.paymentId\n    }\n\n    get threeDPaymentRequested() {\n        return this.req.body['3d'] == \"on\"\n    }\n\n    async init3dPayment(req: PaymentRequest) {\n        req.callbackUrl = this.url + '/3dnotify?provider=' + this.paymentProvider.providerKey;\n        let creditCard = this.getCreditCard();\n        let paymentResult: PaymentResult;\n\n        try {\n            paymentResult = await this.paymentProvider.pay3dInit(req, creditCard);\n            this.req.session.threeDhtml = paymentResult.threeDSHtmlContent;\n            await new Promise((resolve, reject) => {\n                this.req.session.save(err => (err ? reject(err) : resolve()))\n            })\n            this.threeDhtml = \"/3dpaymentHtml\";\n        } catch (err) {\n            throw err;\n        }\n    }\n\n\n    async createPayment(req: PaymentRequest, card: Creditcard) {\n        return this.paymentProvider.pay(req, card);\n    }\n\n\n    async created3DPayment(): Promise<PaymentResult> {\n        if (this.req.body.paymentId) {\n            let payment = await Payment.findOne({\n                where: {\n                    paymentId: this.req.body.paymentId,\n                    status: 'unused'\n                }\n            })\n            return payment ? JSON.parse(payment.response) : null;\n\n        } else return null;\n    }\n\n    @Auth.Anonymous()\n    async threeDRoute() {\n        this.res.send(this.req.session.threeDhtml);\n        this.req.session.threeDhtml = undefined;\n    }\n\n\n    @Auth.Anonymous()\n    async threeDNotifyRoute() {\n        let result = this.req.body;\n        let view = `pages/_partial/paymentprovider/${this.paymentProvider.providerKey}.3dcomplete.ejs`;\n        try {\n            let shakeResult = await this.paymentProvider.pay3dHandshakeSuccess(result);\n            if (!shakeResult)\n                throw new Error(\"3d işlemi başarısız\");\n            let threedResult = await this.paymentProvider.pay3dComplete(result);\n            this.res.render(view, {\n                paymentId: threedResult.paymentId,\n                ordernum: result.merchantPaymentId,\n            })\n        } catch (err) {            \n            this.res.status(500);            \n            this.res.render(view, {\n                paymentId: 'NONE',\n                ordernum: result.merchantPaymentId\n            })\n        }\n    }\n\n    getCreditCard(): Creditcard {\n        this.req.body.pan = this.req.body.pan || \"\";\n        this.req.body.expiry = <string>this.req.body.expiry || \"\";\n        let expireMonth = \"\";\n        let expireYear = \"\";\n        if (this.req.body.expiry.includes(\"/\")) {\n            expireMonth = this.req.body.expiry.split('/')[0]\n            expireYear = this.req.body.expiry.split('/')[1]\n        } else {\n            if (this.req.body.expiry.length == 4) {\n                expireMonth = this.req.body.expiry.slice(0, 2);\n                expireYear = this.req.body.expiry.slice(2, 4);\n            } else if (this.req.body.expiry.length == 6) {\n                expireMonth = this.req.body.expiry.slice(0, 2);\n                expireYear = this.req.body.expiry.slice(2, 6);\n            }\n        }\n\n        if (expireYear.length == 2) {\n            expireYear = \"20\" + expireYear\n        }\n\n        if (expireMonth.length == 1) {\n            expireMonth = \"0\" + expireMonth\n        }\n\n        return {\n            cardHolderName: this.req.body.cardOwner,\n            cardNumber: this.req.body.pan.replace(/\\s+/g, ''),\n            cvc: this.req.body.cvv,\n            expireMonth: expireMonth.replace(/\\s+/g, ''),\n            expireYear: expireYear.replace(/\\s+/g, '')\n        }\n    }\n\n    get paymentProvider() {\n        if (!this._paymentProvider) {\n            let payment = CreditcardPaymentFactory.getInstance(this.req.query.provider as string);\n            let log = new SiteLogRoute(this.constructorParams);\n            payment.logger = log;\n            payment.userid = this.req.user ? this.req.user.id : null;\n            payment.ip = this.req.header(\"x-forwarded-for\") || this.req.connection.remoteAddress;\n            this._paymentProvider = payment\n        }\n        return this._paymentProvider;\n\n    }\n\n\n}\n\n"],"sourceRoot":"../../src/"}