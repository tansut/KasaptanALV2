{"version":3,"sources":["../src/middleware/sitemap.ts"],"names":[],"mappings":";;;AAEA,iCAAgC;AAChC,4CAA2C;AAE3C,qCAAwD;AACxD,+BAAiC;AAEjC,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,EAC5B,aAAa,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC;AAIzD,MAAM,iBAAkB,SAAQ,cAAU;IAiCtC,YAAY,GAAoB;QAC5B,KAAK,CAAC,GAAG,CAAC,CAAC;QACX,GAAG,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACxD,CAAC;IAhCD,UAAU,CAAC,GAAe,EAAE,GAAqB;QAC7C,GAAG,CAAC,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,CAAC;QAC9C,GAAG,CAAC,MAAM,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;QACvC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;YACtB,OAAO;SACR;QACD,IAAI;YACF,MAAM,QAAQ,GAAG,iBAAc,CAAC,SAAS,EAAE,CAAC;YAC5C,MAAM,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,iBAAU,EAAE,CAAC,CAAA;YAE5C,iBAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAE,EAAE;gBACnC,QAAQ,CAAC,GAAG,EAAE,CAAA;gBAEd,yBAAe,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,CAAA;gBACvD,sBAAsB;gBACtB,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE,GAAE,MAAM,CAAC,CAAA,CAAA,CAAC,CAAC,CAAA;YACpD,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAA,EAAE;gBACR,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;gBAChB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAA;YACzB,CAAC,CAAC,CAAC;SAEJ;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;YAChB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAA;SACtB;IACP,CAAC;CAMJ;AAGD,kBAAe,CAAC,GAAwB,EAAE,EAAE,CAAC,UAAE,GAAG,IAAI,iBAAiB,CAAC,GAAG,CAAC,CAAC","file":"sitemap.js","sourcesContent":["import * as express from \"express\";\nimport * as moment from 'moment';\nimport Middleware from \"./base\";\nimport SiteMapManager from '../lib/sitemap'\nimport { AppRequest } from '../lib/http'\nimport { SitemapStream, streamToPromise } from 'sitemap'\nimport { createGzip } from \"zlib\"\n\nvar passport = require('passport')\n    , LocalStrategy = require('passport-local').Strategy;\n\nexport var sm: SitemapMiddleware;\n\nclass SitemapMiddleware extends Middleware {\n\n    sitemap: any;\n\n    sitemapXML(req: AppRequest, res: express.Response) {\n        res.header('Content-Type', 'application/xml');\n        res.header('Content-Encoding', 'gzip');       \n        this.sitemap = null;\n        if (this.sitemap) {\n            res.send(this.sitemap)\n            return;\n          }\n          try {\n            const smStream = SiteMapManager.getStream();\n            const pipeline = smStream.pipe(createGzip())\n\n            SiteMapManager.fill(smStream).then(()=> {\n                smStream.end() \n\n                streamToPromise(pipeline).then(sm => this.sitemap = sm)\n                // stream the response\n                pipeline.pipe(res).on('error', (e) => {throw e})\n            }).catch(e=>{\n                console.error(e)\n                res.status(500).end()\n            });\n\n          } catch (e) {\n            console.error(e)\n            res.status(500).end()\n          }\n    }\n\n    constructor(app: express.IRouter) {\n        super(app);\n        app.get('/sitemap.xml', this.sitemapXML.bind(this));\n    }\n}\n\n\nexport default (app: express.Application) => sm = new SitemapMiddleware(app);\n"],"sourceRoot":"../../src/"}