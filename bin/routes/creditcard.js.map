{"version":3,"sources":["../src/routes/creditcard.ts"],"names":[],"mappings":"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","file":"creditcard.js","sourcesContent":["import { ApiRouter, ViewRouter } from '../lib/router';\nimport * as express from \"express\";\nimport * as maps from \"@google/maps\"\nimport ButcherModel from '../db/models/butcher';\nimport moment = require('moment');\nimport { Auth } from '../lib/common';\nimport AreaModel from '../db/models/area';\nimport Helper from '../lib/helper';\nimport Area from '../db/models/area';\nimport Category from '../db/models/category';\nimport Content from '../db/models/content';\nimport config from '../config';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { readFileSync } from 'fs';\nimport UserRoute from './api/user';\nimport { Order } from '../db/models/order';\nlet ellipsis = require('text-ellipsis');\nvar MarkdownIt = require('markdown-it')\nimport iyzico from '../lib/payment/iyzico';\nimport { CreditcardPaymentFactory, Creditcard, PaymentResult } from '../lib/payment/creditcard';\nimport OrderApi from \"./api/order\"\nimport SiteLogRoute from './api/sitelog';\nimport SiteLog from '../db/models/sitelog';\nimport Payment from '../db/models/payment';\nimport { PaymentRouter } from '../lib/paymentrouter';\n\nexport default class Route extends PaymentRouter {\n\n    orders: Order[] = [];\n\n\n    @Auth.Anonymous()\n    async paySessionRoute() {\n        debugger\n    }\n    \n\n\n    @Auth.Anonymous()\n    async payRoute() {\n\n        let orderids = this.req.body.ordernum.split(',');\n        let orderApi = new OrderApi(this.constructorParams);\n        let userMessage = \"\";\n\n        for (let i = 0; i < orderids.length; i++)\n            this.orders.push(await orderApi.getOrder(orderids[i]))\n\n        if (this.pageHasPaymentId) {\n            let threedPaymentMade = await this.created3DPayment();\n            if (threedPaymentMade) {\n                //await this.paymentSuccess(threedPaymentMade);\n                userMessage = \"Başarılı 3d ödemesi\"\n            } else {\n                userMessage = \"Hatalı 3d ödemesi\"\n            }\n        } else if (this.req.body.makepayment == \"true\") {\n            let req = await this.paymentProvider.requestFromOrder(this.orders);\n            let paymentResult: PaymentResult;\n\n            if (this.threeDPaymentRequested) {\n                try {\n                    await this.init3dPayment(req);\n                } catch (err) {\n                    userMessage = err.message || err.errorMessage\n                }\n            } else {\n                let creditCard = this.getCreditCard();\n                try {\n                    paymentResult = await this.createPayment(req, creditCard);\n                    await this.paymentSuccess(req, paymentResult)\n                    userMessage = \"başarılı\"\n                } catch (err) {\n                    userMessage = err.message || err.errorMessage\n                }\n            }\n        }\n\n        this.sendView(\"pages/testcard.ejs\", {\n            _usrmsg: userMessage ? { text: userMessage }: null\n        })\n\n    }\n\n    static SetRoutes(router: express.Router) {\n        router.post(\"/testcard\", Route.BindRequest(Route.prototype.payRoute));\n        router.get(\"/3dpaymentHtml\", Route.BindRequest(Route.prototype.threeDRoute));\n        router.post(\"/3dnotify\", Route.BindRequest(Route.prototype.threeDNotifyRoute));\n        router.post(\"/pay-session\", Route.BindRequest(Route.prototype.paySessionRoute));\n        router.get('/testcard', Route.BindToView(\"pages/testcard.ejs\"))       \n    }\n}"],"sourceRoot":"../../src/"}