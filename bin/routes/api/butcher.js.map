{"version":3,"sources":["../src/routes/api/butcher.ts"],"names":[],"mappings":"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","file":"butcher.js","sourcesContent":["import { Auth } from '../../lib/common';\nimport { ApiRouter } from '../../lib/router';\nimport * as express from \"express\";\nimport * as maps from \"@google/maps\"\nimport ButcherModel from '../../db/models/butcher';\nimport moment = require('moment');\nimport { ValidationError } from '../../lib/http';\nimport Helper from '../../lib/helper';\nimport Resource from '../../db/models/resource';\nimport Area from '../../db/models/area';\nimport * as fs from \"fs\";\nimport * as mime from \"mime-types\"\nimport Butcher from '../../db/models/butcher';\nimport * as Jimp2 from 'jimp'\nconst Jimp = <Jimp2>require('jimp');\nimport * as path from \"path\"\nimport * as stream from \"stream\"\n\nexport default class Route extends ApiRouter {\n\n\n    @Auth.Anonymous()\n    googleSearchRoute() {\n        if (this.req.query.q)\n            return this.googleSearch(this.req.query.q as string).then((data) => this.res.send(data))\n        throw new ValidationError(\"Bişey gir\")\n    }\n\n    @Auth.Anonymous()\n    googleSyncRoute() {\n        const placeid = this.req.body.place_id;\n        if (!placeid)\n            throw new ValidationError(\"\")\n        return this.googleSync(placeid).then((data) => this.res.send({ id: data.id, slug: data.slug }));\n    }\n\n    @Auth.Anonymous()\n    googleSyncPhotosRoute() {\n        const id = this.req.params.id\n        if (!id)\n            throw new ValidationError(\"id required\");\n        return ButcherModel.findByPk(id).then(model => {\n            if (!model)\n                throw new ValidationError(\"id invalid\");\n            return this.syncGooglePhotos(model).then((data) => this.res.sendStatus(200));\n        })\n    }\n\n    getGoogleAreas(place: maps.PlaceDetailsResult) {\n        let result = {};\n        for (let i = 0; i < place.address_components.length; i++) {\n            let adres = place.address_components[i];\n            let level1 = adres.types.indexOf(\"administrative_area_level_1\");\n            let level2 = adres.types.indexOf(\"administrative_area_level_2\");\n            let level3 = adres.types.indexOf(\"administrative_area_level_2\");\n            let level4 = adres.types.indexOf(\"administrative_area_level_4\");\n            let postal = adres.types.indexOf(\"postal_code\");\n            let route = adres.types.indexOf(\"route\");\n            let street = adres.types.indexOf(\"street_number\");\n            let premise = adres.types.indexOf(\"premise\");\n            let subpremise = adres.types.indexOf(\"subpremise\");\n\n            level1 >= 0 ? result[\"level1\"] = adres : null;\n            level2 >= 0 ? result[\"level2\"] = adres : null;\n            level3 >= 0 ? result[\"level3\"] = adres : null;\n            level4 >= 0 ? result[\"level4\"] = adres : null;\n            postal >= 0 ? result[\"postal\"] = adres : null;\n            route >= 0 ? result[\"route\"] = adres : null;\n            street >= 0 ? result[\"street\"] = adres : null;\n\n            premise >= 0 ? result[\"premise\"] = adres : null;\n            subpremise >= 0 ? result[\"subpremise\"] = adres : null;\n        }\n        if (result[\"level4\"] && Helper.slugify(result[\"level4\"].short_name) == \"cayyolu\")\n            result[\"level2\"].short_name = \"Çankaya\"\n        if ((<string>result[\"level2\"].short_name).startsWith(result[\"level1\"].short_name + \" \"))\n            result[\"level2\"].short_name = \"MERKEZ\"\n        return result;\n    }\n\n    generateAddress(area1: Area, area2: Area, area3: Area, place: maps.PlaceDetailsResult, model: ButcherModel) {\n        let areas = this.getGoogleAreas(place);\n        let result = areas[\"level4\"] ? areas[\"level4\"].short_name + \", \" : \"\";\n\n        if (areas[\"route\"]) {\n            result = result + areas[\"route\"].short_name + \", \";\n        }\n\n        if (areas[\"street\"]) {\n            result = result + areas[\"street\"].short_name + \", \";\n        }\n\n        if (areas[\"premise\"]) {\n            result = result + areas[\"premise\"].short_name + \", \";\n\n            if (areas[\"subpremise\"]) {\n                result = result + areas[\"subpremise\"].short_name + \", \";\n            }\n        }\n        model.address = place.formatted_address;\n        if (place.formatted_address) {\n            let adresses = place.formatted_address.split(\",\")\n            if (adresses.length > 1)\n                model.address = adresses[1] + \", \" + adresses[0]\n        } else\n            model.address = result.trim().slice(0, result.length - 2)\n\n        model.address = Helper.capitlize(model.address)\n    }\n\n    getBestArea(place: maps.PlaceDetailsResult, model: ButcherModel) {\n\n        let areas = this.getGoogleAreas(place);\n\n        let area1p = Area.findOne({\n            where: {\n                level: 1,\n                slug: Helper.slugify(areas[\"level1\"].short_name)\n            }\n        }).then((area) => {\n            if (!area) {\n                throw new Error(areas[\"level1\"].short_name + \" ili bulunamadı\");\n            } else {\n                model.areaLevel1Id = area.id;\n                let areas = this.getGoogleAreas(place);\n                areas[\"postal\"] ? model.postal = areas[\"postal\"].short_name : null;\n                return model.save().then(() => area)\n            }\n        })\n\n\n        let area2p = area1p.then(area1 => {\n            return Area.findOne({\n                where: {\n                    level: 2,\n                    slug: area1.slug + \"-\" + Helper.slugify(areas[\"level2\"].short_name)\n                }\n            }).then((area2) => {\n                if (!area2) {\n                    throw new Error(areas[\"level2\"].short_name + \" ilçe bulunamadı\");\n                } else {\n                    model.areaLevel2Id = area2.id;\n                    return model.save().then(() => [area1, area2])\n                }\n            })\n        })\n\n        let area3p = area2p.then(areas12 => {\n            let area1 = areas12[0], area2 = areas12[1];\n            let search = [];\n            areas[\"level4\"] ? search.push(area2.slug + \"-\" + Helper.slugify(areas[\"level4\"].short_name)) : null;\n            areas[\"level4\"] ? null : (areas[\"level3\"] ? search.push(area2.slug + \"-\" + Helper.slugify(areas[\"level3\"].short_name)) : null);\n            return Area.findOne({\n                where: {\n                    level: 3,\n                    slug: search\n                }\n            }).then((area3) => {\n                if (!area3) {\n                    //throw new Error(areas[\"level4\"].short_name + \" semt bulunamadı\");\n                } else {\n                    model.areaLevel3Id = area3.id;\n                    return model.save().then(() => [area1, area2, area3])\n                }\n                return [area1, area2, area3];\n            })\n        })\n\n        return area3p.then((areas) => this.generateAddress(areas[0], areas[1], areas[2], place, model));\n    }\n\n\n    googleToButcher(place: maps.PlaceDetailsResult, model: ButcherModel) {\n        model.name = place.name;\n        model.gpid = place.place_id;\n        place.website && (model.website = place.website);\n        place.formatted_address && (model.address = place.formatted_address);\n        place.formatted_phone_number && (model.phone = place.formatted_phone_number);\n        model.gplastdate = moment.utc().toDate();\n        model.gpPlace = place;\n        if (place.geometry && place.geometry.location) {\n            model.location = {\n                \n                \n                    type: 'Point',\n                    coordinates: [place.geometry.location.lat, place.geometry.location.lng]\n                \n            \n            }\n      \n        } \n        place[\"user_ratings_total\"] && (model.ratingCount = place[\"user_ratings_total\"]);\n        model.rating = isNaN(place.rating) ? 0.0 : place.rating;\n        model.legalName = place.name;\n        if (!model.slug)\n            model.slug = Helper.slugify(model.name)\n\n        return this.getBestArea(place, model);\n    }\n\n    @Auth.Anonymous()\n    dbSyncAllFromCachedGoogle() {\n\n\n        //return this.normalizePhoto(\"public/kasap-resimleri/zirve-et-urunleri-tarinssanve-ticltdsti-50-6.jpeg\");\n\n        return ButcherModel.findAll().then(butchers => {\n            let promlist = [];\n            for (let i = 0; i < butchers.length; i++) {\n                let butcher = butchers[i];\n\n                ((butcher) => {\n                    return this.googleToButcher(<any>(butcher.gpPlace), butcher).then(() => {\n                        return butcher.save().then(savedButcher => {\n                            console.log(butcher.name + \" done\")\n                            return this.syncGooglePhotos(savedButcher).then(() => savedButcher)\n                        })\n                    }).catch(err => {\n                        console.log(butcher.name + \": ERR: \" + err.message)\n\n                    });\n                })(butcher)\n            }\n        })\n    }\n\n    googleSync(placeid: string) {\n        return this.getGoogleClient().place({\n            placeid: placeid\n        }).asPromise().then((response) => {\n            if (response.status != 200)\n                throw new Error(\"Google Error\")\n\n            const place = response.json.result;\n            return ButcherModel.findOne({\n                where: {\n                    gpid: place.place_id\n                }\n            }).then((dbresult) => {\n                if (!dbresult)\n                    dbresult = new ButcherModel();\n                return this.googleToButcher(place, dbresult).then(() => {\n                    return dbresult.save().then(savedButcher => {\n                        return this.syncGooglePhotos(savedButcher).then(() => savedButcher)\n                    })\n                });\n            })\n        })\n    }\n\n    getGoogleClient() {\n        return maps.createClient({\n            key: 'AIzaSyBFqn2GNAhwbJnpga-3S3xQGBc0EcdAgH8',\n            Promise: Promise\n        });\n    }\n\n    // static managecitydata() {\n    //     return Area.findAll({\n    //         where: {\n    //             level: 1\n    //         }\n    //     }).then(data => {\n    //         let list = []\n    //         for (let i = 0; i < data.length; i++) {\n    //             let city = data[i];\n    //             city.lowerName = Helper.toLower(city.name)\n    //             city.slug = Helper.slugify(city.lowerName);\n    //             list.push(city.save());\n    //         }\n    //         return Promise.all(list)\n\n    //     })\n    // }\n\n    // static managetowndata() {\n    //     return Area.findAll({\n    //         where: {\n    //             level: 2\n    //         },\n    //         include: [\n    //             Area\n    //         ]\n    //     }).then(data => {\n    //         let list = []\n    //         for (let i = 0; i < data.length; i++) {\n    //             let area = data[i];\n    //             area.lowerName = Helper.toLower(area.name)\n    //             area.slug = area.parent.slug + \"-\" + Helper.slugify(area.lowerName);\n    //             list.push(area.save());\n    //         }\n    //         return Promise.all(list)\n\n    //     })\n    // }\n\n    // static managedistrictdata() {\n    //     return Area.findAll({\n    //         where: {\n    //             level: 3\n    //         },\n    //         include: [\n    //             Area\n    //         ]\n    //     }).then(data => {\n    //         let list = []\n    //         for (let i = 0; i < data.length; i++) {\n    //             let area = data[i];\n    //             if (area.name != area.slug)\n    //                 continue;\n    //             area.lowerName = Helper.toLower(area.name)\n    //             area.slug = area.parent.slug + \"-\" + Helper.slugify(area.lowerName);\n    //             list.push(area.save());\n    //         }\n    //         return Promise.all(list)\n\n    //     })\n    // }\n\n    // processGooglePhoto(buffer: Buffer) {\n    //     Jimp.read(buffer).then\n    // }\n\n    savePhoto(model: Butcher, photo: maps.PlacePhoto, photoContent: any, index: number) {\n        return new Promise((resolve, reject) => {\n            let ct = photoContent.headers[\"content-type\"]\n            let fileExt = mime.extension(ct);\n            let fileName = `${model.slug}-${model.id}-${index}.${fileExt}`;\n            let thumbnailName = `${model.slug}-${model.id}-${index}-thumbnail.${fileExt}`;\n            let contentUrl = fileName; // ;\n            let str = new stream.Transform();\n            photoContent.on(\"data\", (data) => {\n                str.push(data)\n            })\n            photoContent.on(\"end\", () => {\n                fs.writeFileSync(this.publicDir + `kasap-resimleri/${fileName}`, str.read());\n                Resource.create({\n                    type: \"butcher-google-photos\",\n                    ref1: model.id,\n                    //ref2: photo.photo_reference,\n                    contentType: ct,\n                    contentLength: parseInt(photoContent.headers[\"content-length\"]),\n                    contentUrl: contentUrl,\n                    title: model.name + ` Resimleri ${index}`,\n                    thumbnailUrl: thumbnailName,\n                    fileName: fileName\n                }).then((res) => {\n                    return Helper.normalizePhoto(this.publicDir + `kasap-resimleri/${fileName}`, this.publicDir + `kasap-resimleri/${thumbnailName}`).then(() => resolve(res))\n                }).catch(err => reject(err))\n\n            })\n        });\n\n    }\n\n\n\n    syncGooglePhotos(model: ButcherModel) {\n        let gg = <maps.PlaceDetailsResult>model.gpPlace;\n        let photos = gg.photos || [];\n        let client = this.getGoogleClient();\n        let promiseList = [];\n        return Resource.findAll({\n            where: {\n                type: \"butcher-google-photos\",\n                ref1: model.id\n            }\n        }).then((savedPhotos) => {\n            let photoCounter = savedPhotos.length\n            for (let i = 0; i < photos.length; i++) {\n                let item = photos[i];\n                // if (savedPhotos.findIndex((sp) => sp.ref2 == item.photo_reference) >= 0)\n                //     break;\n                if (savedPhotos.length > 0)\n                    break;\n                let promise = client.placesPhoto({\n                    maxwidth: item.width,\n                    photoreference: item.photo_reference,\n\n                }).asPromise().then((photoContent: any) => {\n                    return this.savePhoto(model, item, photoContent, ++photoCounter);\n                })\n                promiseList.push(promise)\n            }\n            return promiseList.length > 0 ? Promise.all(promiseList) : Promise.resolve(null);\n        })\n\n\n    }\n\n    googleSearch(input: string) {\n        return this.getGoogleClient().findPlace({\n            language: \"tr\",\n            input: input,\n            inputtype: \"textquery\",\n            fields: [\"name\", \"place_id\", \"permanently_closed\", \"formatted_address\"]\n        }).asPromise().then((response) => {\n            if (response.status != 200)\n                throw new Error(\"Google Error\")\n            return response.json.candidates;\n        })\n    }\n\n\n    static SetRoutes(router: express.Router) {\n        router.get(\"/butcher/googlesearch\", Route.BindRequest(this.prototype.googleSearchRoute));\n        router.post(\"/butcher/googlesync\", Route.BindRequest(this.prototype.googleSyncRoute));\n        //router.get(\"/butcher/googlesyncphotos/:id\", Route.BindRequest(this.prototype.googleSyncPhotosRoute));\n        //router.get(\"/butcher/dbsync\", Route.BindRequest(this.prototype.dbSyncAllFromCachedGoogle));\n\n\n    }\n}\n\n"],"sourceRoot":"../../../src/"}