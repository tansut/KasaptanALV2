{"version":3,"sources":["../src/routes/api/dispatcher.ts"],"names":[],"mappings":"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","file":"dispatcher.js","sourcesContent":["import { Auth } from '../../lib/common';\nimport { ApiRouter } from '../../lib/router';\nimport * as express from \"express\";\nimport SiteLog from '../../db/models/sitelog';\nimport email from '../../lib/email';\nimport { ShopCard } from '../../models/shopcard';\nimport Product from '../../db/models/product';\nimport ProductApi from './product'\nimport Butcher from '../../db/models/butcher';\nimport Area from '../../db/models/area';\nimport Dispatcher from '../../db/models/dispatcher';\nimport ButcherProduct from '../../db/models/butcherproduct';\nimport { Op, Sequelize } from \"sequelize\";\nimport { PreferredAddress } from '../../db/models/user';\n\nexport default class Route extends ApiRouter {\n\n    async _where(where: any, address: PreferredAddress) {\n\n        where['enabled'] = true;\n        where[Op.or] = where[Op.or] || [];\n        if (address && address.level1Id) {\n            where[Op.or].push({\n                toareaid: [address.level1Id]\n            })\n        }\n        if (address && address.level2Id) {\n            where[Op.or].push({\n                toareaid: [address.level2Id]\n            })\n        }\n        if (address && address.level3Id) {\n            where[Op.or].push({\n                toareaid: address.level3Id\n            })\n        }\n        return where\n    }\n\n    async bestDispatcher(butcherId, address: PreferredAddress) {\n        let where = {\n            type: 'butcher',\n            butcherid: butcherId,\n            [Op.or]: []\n        };\n        where = await this._where(where, address);\n\n        let res = await Dispatcher.findOne({\n            where: where,\n            include: [\n                {\n                    model: Butcher,\n                    as: 'butcher'\n                },\n            ],            \n            order: [[\"toarealevel\", \"DESC\"]],\n\n        })\n        return res;\n    }\n\n    // async bestDispatcher(butcherId, toAreaId, tolevel) {\n    //     let res = await Dispatcher.findOne({\n    //         where: {\n    //             toareaid: toAreaId,\n    //             type: 'butcher'      ,\n    //             butcherid: butcherId \n    //         }\n    //     })\n    //     return res;\n    // }\n\n    // async getDispatchers(toid, include=[]) {\n    //     let res = await Dispatcher.findAll({\n    //         where: {\n    //             toareaid: toid,\n    //             type: 'butcher'              \n    //         },\n    //         include:include\n    //     })\n    //     return res;\n    // }\n\n    // async getButchersSeling(address: PreferredAddress) {\n    //     let where = {\n    //         type: 'butcher'\n    //     }\n    //     where['$butcher.approved$'] = true;\n    //     where = await this._where(where, address);\n    //     let res = await Dispatcher.findAll({\n    //         where: where,\n    //         include: [\n    //             {\n    //                 model: Butcher,\n    //                 as: 'butcher'\n    //             },\n    //         ],\n    //         order: [[\"toarealevel\", \"DESC\"]]\n    //         //limit: 10\n    //     })\n    //     let ugly = {}, result = [];\n    //     res.forEach(r => {\n    //         if (!ugly[r.butcherid]) {\n    //             ugly[r.butcherid] = r;\n    //             result.push(r)\n    //         }\n    //     })\n    //     return result;\n    // }\n\n    async getButchersDispatchesForAll(areaids: number[]) {\n        let where = {\n            type: 'butcher'\n        }\n\n        where[\"toareaid\"] = areaids\n        let res = await Dispatcher.findAll({\n            where: where,\n            include: [\n                {\n                    model: Butcher,\n                    as: 'butcher'\n                },\n            ],\n            order: [[\"toarealevel\", \"DESC\"]]\n        })\n\n        return res;\n    }\n\n\n    async getButchersDispatches(address: PreferredAddress) {\n        let where = {\n            type: 'butcher'\n        }\n\n        where = await this._where(where, address);\n        where[\"toarealevel\"] = address.level3Id ? 3: (address.level2Id ? 2: 1)\n        let res = await Dispatcher.findAll({\n            where: where,\n            include: [\n                {\n                    model: Butcher,\n                    as: 'butcher'\n                },\n            ],\n            order: [[\"toarealevel\", \"DESC\"]]\n        })\n\n        return res;\n    }\n\n\n    async  getButchersSelingAndDispatches(address: PreferredAddress, pid) {\n        let where = {\n            type: 'butcher'\n        }\n        where = await this._where(where, address);\n        where['$butcher.products.productid$'] = pid;\n        where['$butcher.products.enabled$'] = true;\n\n        let w = [{\n            '$butcher.products.kgPrice$': {\n                [Op.gt]: 0.0\n            }\n        },\n\n        {\n            [Op.and]: [\n                {\n                    '$butcher.products.unit1price$': {\n                        [Op.gt]: 0.0\n                    }\n                },\n                {\n                    '$butcher.products.unit1enabled$': true\n                }\n            ]\n\n\n        },\n\n        {\n            [Op.and]: [\n                {\n                    '$butcher.products.unit2price$': {\n                        [Op.gt]: 0.0\n                    }\n                },\n                {\n                    '$butcher.products.unit2enabled$': true\n                }\n            ]\n        },\n        {\n            [Op.and]: [\n                {\n                    '$butcher.products.unit3price$': {\n                        [Op.gt]: 0.0\n                    }\n                },\n                {\n                    '$butcher.products.unit3enabled$': true\n                }\n            ]\n        }\n        ]\n        where[Op.or].push(w);\n\n\n        let res = await Dispatcher.findAll({\n            where: where,\n            include: [\n                {\n                    model: Butcher,\n                    as: 'butcher',\n                    include: [{\n                        model: ButcherProduct\n                    }\n                    ]\n                },\n            ],\n            order: [[\"toarealevel\", \"DESC\"]]\n            //limit: 10\n        })\n        let ugly = {}, result = [];\n        res.forEach(r => {\n            if (!ugly[r.butcherid]) {\n                ugly[r.butcherid] = r;\n                result.push(r)\n            }\n        })\n        return result;\n    }\n\n\n\n    static SetRoutes(router: express.Router) {\n    }\n}\n\n\n"],"sourceRoot":"../../../src/"}