{"version":3,"sources":["../src/routes/api/dispatcher.ts"],"names":[],"mappings":"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","file":"dispatcher.js","sourcesContent":["import { Auth } from '../../lib/common';\nimport { ApiRouter } from '../../lib/router';\nimport * as express from \"express\";\nimport SiteLog from '../../db/models/sitelog';\nimport email from '../../lib/email';\nimport { ShopCard } from '../../models/shopcard';\nimport Product, { ProductType } from '../../db/models/product';\nimport ProductApi from './product'\nimport Butcher from '../../db/models/butcher';\nimport Area from '../../db/models/area';\nimport Dispatcher, { DispatcherTypeDesc } from '../../db/models/dispatcher';\nimport ButcherProduct from '../../db/models/butcherproduct';\nimport { Op, Sequelize } from \"sequelize\";\nimport { PreferredAddress } from '../../db/models/user';\nimport { LogisticFactory, LogisticProvider, OfferResponse } from '../../lib/logistic/core';\nimport { Order } from '../../db/models/order';\nimport { off } from 'process';\nimport Helper from '../../lib/helper';\nimport { ButcherManualLogistics, ButcherAutoLogistics } from '../../lib/logistic/butcher';\n\nexport default class Route extends ApiRouter {\n    async _where(where: any, address: PreferredAddress) {\n        where['enabled'] = true;\n        where[Op.or] = where[Op.or] || [];\n        if (address && address.level1Id) {\n            where[Op.or].push({\n                toareaid: [address.level1Id]\n            })\n        }\n        if (address && address.level2Id) {\n            where[Op.or].push({\n                toareaid: [address.level2Id]\n            })\n        }\n        if (address && address.level3Id) {\n            where[Op.or].push({\n                toareaid: address.level3Id\n            })\n        }\n        return where\n    }\n\n\n    // async getDispatcher(butcher: Butcher, address: PreferredAddress): Promise< LogisticProvider> {\n    //     if (butcher.defaultDispatcher == \"butcher\") {\n    //         return LogisticFactory.getInstance(\"butcher\")\n    //     } else if (butcher.defaultDispatcher == \"butcher/auto\")\n    //         return LogisticFactory.getInstance(\"butcher/auto\")\n    //     else {\n    //         return LogisticFactory.getInstance(butcher.defaultDispatcher)\n    //     }\n    // }\n\n    async bestDispatcher2(butcher: number | Butcher, address: PreferredAddress, basedOn: Order) {\n        butcher = typeof(butcher) == 'number' ? await Butcher.findByPk(butcher):butcher;\n        let where = {\n            type: 'butcher',\n            butcherid: butcher.id,\n            [Op.or]: []\n        };\n        where = await this._where(where, address);\n        let res = await Dispatcher.findOne({\n            where: where,\n            include: [\n                {\n                    model: Butcher,\n                    as: 'butcher'\n                },\n            ],            \n            order: [[\"toarealevel\", \"DESC\"]],\n        })\n\n        let provider: LogisticProvider = null;\n\n        if (res) {\n            let usage = res.logisticProviderUsage == \"default\" ? butcher.logisticProviderUsage: res.logisticProviderUsage;\n            if (usage != \"none\" && butcher.logisticProviderUsage != \"disabled\" && butcher.logisticProvider) {\n                provider = LogisticFactory.getInstance(butcher.logisticProvider, {\n                    dispatcher: res,\n                })\n            } else {\n                provider = LogisticFactory.getInstance(butcher.defaultDispatcher, {\n                    dispatcher: res,\n                })\n            }\n\n\n\n        } \n\n        return provider;\n    }\n\n\n    async bestDispatcher(butcherId, address: PreferredAddress, basedOn: Order) {\n        let where = {\n            type: 'butcher',\n            butcherid: butcherId,\n            [Op.or]: []\n        };\n        where = await this._where(where, address);\n        let res = await Dispatcher.findOne({\n            where: where,\n            include: [\n                {\n                    model: Butcher,\n                    as: 'butcher'\n                },\n            ],            \n            order: [[\"toarealevel\", \"DESC\"]],\n        })\n        if (res && res.logisticProviderUsage != \"none\" && basedOn && basedOn.orderType != \"kurban\") {\n            let butcher = await Butcher.findByPk(butcherId);\n            let usage = res.logisticProviderUsage == \"default\" ? butcher.logisticProviderUsage: res.logisticProviderUsage;\n            if (usage != \"none\" && butcher.logisticProviderUsage != \"disabled\" && butcher.logisticProvider) {\n                let provider = LogisticFactory.getInstance(butcher.logisticProvider, {\n                    dispatcher: res\n                });\n                res.name = provider.providerKey;\n                res.min = 0.00;\n                res.totalForFree = 0.00;\n                res.type = \"kasaptanal/motokurye\";\n                res.name = DispatcherTypeDesc[res.type]\n                res.fee = 0.00;\n                res.feeOffer = 0.00;\n                if (basedOn && basedOn.shipLocation) {\n                    try {\n                        let request = provider.offerFromOrder(basedOn);\n                        let offer = await provider.requestOffer(request);\n                        res.feeOffer = offer.totalFee;\n                        res.fee = offer.totalFee;\n                    } catch(err) {\n                        email.send('tansut@gmail.com', 'hata: get offer from dispatcher', \"error.ejs\", {\n                            text: err + '/' + err.message,\n                            stack: err.stack\n                        })                        \n                    }\n                }                \n            }\n        }\n        return res;\n    }\n\n\n    async getButchersDispatchesForAll(areaids: number[]) {\n        let where = {\n            type: 'butcher'\n        }\n\n        where[\"toareaid\"] = areaids\n        let res = await Dispatcher.findAll({\n            where: where,\n            include: [\n                {\n                    model: Butcher,\n                    as: 'butcher'\n                },\n            ],\n            order: [[\"toarealevel\", \"DESC\"]]\n        })\n\n        return res;\n    }\n\n\n    async getButchersDispatches(address: PreferredAddress) {\n        let where = {\n            type: 'butcher'\n        }\n\n        where = await this._where(where, address);\n        where[\"toarealevel\"] = address.level3Id ? 3: (address.level2Id ? 2: 1)\n        let res = await Dispatcher.findAll({\n            where: where,\n            include: [\n                {\n                    model: Butcher,\n                    as: 'butcher'\n                },\n            ],\n            order: [[\"toarealevel\", \"DESC\"]]\n        })\n\n        return res;\n    }\n\n    async dispatchingAvailable(address: PreferredAddress, useLevel1: boolean) {\n        let where = {\n            type: 'butcher'\n        }\n        where = await this._where(where, address);\n\n        // if (!useLevel1) {\n        //     where[Op.and] = where[Op.and] || []\n        //     where[Op.and].push({\n        //         toarealevel: {\n        //             [Op.ne]: 1\n        //         }\n        //     })\n        // }        \n\n        let res = await Dispatcher.findOne({\n            where: where,\n            include: [\n                {\n                    model: Butcher,\n                    as: 'butcher'\n                }\n            ],   \n        });        \n\n        if (res && res.toarealevel == 1) {\n            if (!useLevel1) {\n                let forceL1 = res.butcher.dispatchArea == \"citywide\" || res.butcher.dispatchArea == \"radius\";\n                res = forceL1 ? res: null;\n            }\n        }\n\n        return res != null;\n    }\n\n    async getButchersSelingAndDispatches(address: PreferredAddress, product: Product, useLevel1: boolean) {\n        let where = {\n            type: 'butcher'\n        }\n        where = await this._where(where, address);\n\n        where['$butcher.products.productid$'] = product.id;\n        where['$butcher.products.enabled$'] = true;\n        let w = [{\n            '$butcher.products.kgPrice$': {\n                [Op.gt]: 0.0\n            }\n        },\n        {\n            [Op.and]: [\n                {\n                    '$butcher.products.unit1price$': {\n                        [Op.gt]: 0.0\n                    }\n                },\n                {\n                    '$butcher.products.unit1enabled$': true\n                }\n            ]\n        },\n        {\n            [Op.and]: [\n                {\n                    '$butcher.products.unit2price$': {\n                        [Op.gt]: 0.0\n                    }\n                },\n                {\n                    '$butcher.products.unit2enabled$': true\n                }\n            ]\n        },\n        {\n            [Op.and]: [\n                {\n                    '$butcher.products.unit3price$': {\n                        [Op.gt]: 0.0\n                    }\n                },\n                {\n                    '$butcher.products.unit3enabled$': true\n                }\n            ]\n        }\n        ]\n        where[Op.or].push(w);\n        // if (!useLevel1) {\n        //     where[Op.and] = where[Op.and] || []\n        //     where[Op.and].push({\n        //         toarealevel: {\n        //             [Op.ne]: 1\n        //         }\n        //     })\n        // }\n\n        let res = await Dispatcher.findAll({\n            where: where,\n            include: [\n                {\n                    model: Butcher,\n                    as: 'butcher',\n                    include: [{\n                        model: ButcherProduct\n                    }\n                    ]\n                },\n            ],\n            order: [[\"toarealevel\", \"DESC\"]]\n        });\n        let ugly = {}, result = [];\n        for(let i = 0; i < res.length; i++) {\n           let r = res[i]\n            let butcherAvail = r.toarealevel > 1  || useLevel1;\n            if (!useLevel1 && r.toarealevel == 1) {\n                let forceL1 = r.butcher.dispatchArea == \"citywide\" || r.butcher.dispatchArea == \"radius\";\n                if (r.butcher.dispatchArea == \"radius\") {\n                    let l3 = await Area.findByPk(address.level3Id)\n                    let distance = Helper.distance(r.butcher.location, l3.location);\n                    butcherAvail = r.butcher.radiusAsKm >= distance\n                } else butcherAvail = forceL1;\n                if (butcherAvail && r.areaTag) {\n                    let area = await Area.findByPk(address.level3Id);\n                    butcherAvail = r.areaTag == area.dispatchTag;\n                }                \n            }        \n\n            if (butcherAvail && !ugly[r.butcherid]) {\n                ugly[r.butcherid] = r;\n                result.push(r);\n            }\n        }\n        return result;\n    }\n\n    static SetRoutes(router: express.Router) {\n    }\n}\n\n\n"],"sourceRoot":"../../../src/"}