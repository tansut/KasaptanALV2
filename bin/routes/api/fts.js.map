{"version":3,"sources":["../src/routes/api/fts.ts"],"names":[],"mappings":"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","file":"fts.js","sourcesContent":["import { Auth } from '../../lib/common';\nimport { ApiRouter } from '../../lib/router';\nimport * as express from \"express\";\nimport * as sq from 'sequelize';\nimport User from '../../db/models/user';\nimport Product from '../../db/models/product';\nimport Resource from '../../db/models/resource';\nimport * as _ from \"lodash\"\n\nexport class SearchResult {\n    type: string;\n    url: string;\n}\n\nexport default class Route extends ApiRouter {\n\n    @Auth.Anonymous()\n    async searchRoute() {\n\n\n        if (!this.req.query.q || (this.req.query.q as string).length < 2)\n            return this.res.send([])\n\n        let text =  <string>this.req.query.q;\n        let words = text.match(/\\S+/g).filter(w=>w.length>2).map(w=> `+${w}*`)\n        let search = words.join()\n\n        let psql = this.req.query.c ? \n        \"select p.name as name, p.slug as url, '' as type, match(p.name, p.shortdesc, p.slug, p.keywords) against (:search IN BOOLEAN MODE) as RELEVANCE \" +\n        \"from Products p, ProductCategories pc, Categories c where pc.productid = p.id and c.id = pc.categoryid and c.slug = :category and match(p.name, p.shortdesc, p.slug, p.keywords)  against (:search IN BOOLEAN MODE) ORDER BY RELEVANCE DESC LIMIT 10\"\n\n        : \n        \n        \"select name, slug as url, '' as type, match(name, shortdesc, slug, keywords) against (:search IN BOOLEAN MODE) as RELEVANCE \" +\n        \"from Products where match(name, shortdesc, slug, keywords)  against (:search IN BOOLEAN MODE) ORDER BY RELEVANCE DESC LIMIT 10\"\n\n        let prods =  await User.sequelize.query(psql,\n            {\n                replacements: { search: search, category: this.req.query.c },\n                type: sq.QueryTypes.SELECT,\n                mapToModel: false,\n                raw: true\n            },\n\n        ).map((p, i) => {\n            let px = <any>p;\n            return {\n                id: 'p' + i,\n                name: px.name,\n                url: '/' + px.url,\n                type: px.type,\n                score: px.RELEVANCE,\n                thumb: this.req.helper.imgUrl('product-photos', px.url)\n            }\n        })\n\n        let cats = this.req.query.t == 'product' ? []: await User.sequelize.query(\"select name, slug as url, 'Kategoriler' as type, match(name, shortdesc, slug, keywords) against (:search IN BOOLEAN MODE) as RELEVANCE \" +\n            \"from Categories where match(name, shortdesc, slug, keywords)  against (:search IN BOOLEAN MODE) ORDER BY Categories.type, RELEVANCE DESC LIMIT 10\",\n            {\n                replacements: { search: search },\n                type: sq.QueryTypes.SELECT,\n                mapToModel: false,\n                raw: true\n            },\n\n        ).map((p, i) => {\n            let px = <any>p;\n            return {\n                id: 'c' + i,\n                name: px.name,\n                url: '/' + px.url,\n                type: px.type,\n                score: px.RELEVANCE,\n                thumb: this.req.helper.imgUrl('category-photos', px.url)\n            }\n        })        \n\n        let areas = this.req.query.t == 'product' ? []: await User.sequelize.query(\"select name, slug as url, 'Bölgeler' as type, match(name, slug, keywords) against (:search IN BOOLEAN MODE) as RELEVANCE \" +\n        \"from Areas where status='active' and match(name, slug, keywords)  against (:search IN BOOLEAN MODE) ORDER BY RELEVANCE DESC LIMIT 10\",\n        {\n            replacements: { search: search },\n            type: sq.QueryTypes.SELECT,\n            mapToModel: false,\n            raw: true\n        },\n\n    ).map((p, i) => {\n        let px = <any>p;\n        return {\n            id: 'loc' + i,\n            name: px.name + ' Kasapları',\n            url: '/' + px.url + '-kasap',\n            type: px.type,\n            score: px.RELEVANCE,\n            thumb: null // this.req.helper.imgUrl('category-photos', px.url)\n        }\n    })              \n\n        let butchers = this.req.query.t == 'product' ? []: await User.sequelize.query(\"select name, slug as url, 'Kasaplar' as type, match(name, slug, keywords) against (:search IN BOOLEAN MODE) as RELEVANCE \" +\n            \"from Butchers where approved=true and match(name, slug, keywords)  against (:search IN BOOLEAN MODE) ORDER BY RELEVANCE DESC LIMIT 10\",\n            {\n                replacements: { search: search },\n                type: sq.QueryTypes.SELECT,\n                mapToModel: false,\n                raw: true\n            },\n\n        ).map((p, i) => {\n            let px = <any>p;\n            return {\n                id: 'b' + i,\n                name: px.name,\n                url: '/' + px.url,\n                type: px.type,\n                score: px.RELEVANCE,\n                thumb: this.req.helper.imgUrl('butcher-google-photos', px.url)\n            }\n        })\n\n        let foodResources = await Resource.sequelize.query(\"select id, title, ref1, slug, contentType, thumbnailUrl, folder,  match(title, description, slug, keywords) against (:search IN BOOLEAN MODE) as RELEVANCE \" +\n            \"from Resources where (tag1 like '%tarif%' or tag1 like '%yemek%') and match(title, description, slug, keywords)  against (:search IN BOOLEAN MODE) ORDER BY  RELEVANCE DESC LIMIT 10\",\n            {\n                replacements: { search: search },\n                model: Resource,\n                type: sq.QueryTypes.SELECT,\n                mapToModel: true\n            }\n\n        );\n\n         let foodProds = await Product.findAll({\n             where: {\n                 id: foodResources.map(p=> p['ref1'])\n             }\n         })\n        \n\n        let foods = foodResources.map((p, i) => {\n            let px = <any>p;\n            return {\n                id: 'f' + i,\n                name: px.title,\n                score: px.RELEVANCE,\n                url: px.slug ? ('/et-yemekleri/' + px.slug): '/' + foodProds.find(fp=>fp.id == px.ref1).slug + '?r=' + px.id,\n                type: 'Eti Bizden',\n                thumb : px.contentType == 'video-youtube' ? (px.thumbnailUrl ? px.getThumbnailFileUrl(): null): px.getThumbnailFileUrl()\n\n            }\n        })        \n\n        let combined = cats.concat(prods.concat(foods.concat(butchers.concat(areas))));\n        let sorted = _.sortBy(combined, 'RELEVANCE')\n\n        this.res.send(sorted)\n    }\n\n    static SetRoutes(router: express.Router) {\n        router.get(\"/fts\", Route.BindRequest(this.prototype.searchRoute));\n    }\n}\n\n\n"],"sourceRoot":"../../../src/"}