{"version":3,"sources":["../src/routes/api/fts.ts"],"names":[],"mappings":"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","file":"fts.js","sourcesContent":["import { Auth } from '../../lib/common';\nimport { ApiRouter } from '../../lib/router';\nimport * as express from \"express\";\nimport * as sq from 'sequelize';\nimport User from '../../db/models/user';\nimport Product from '../../db/models/product';\nimport Resource from '../../db/models/resource';\nimport * as _ from \"lodash\"\nimport { PreferredAddress } from '../../db/models/user';\nimport Area from '../../db/models/area';\n\n\nexport class SearchResult {\n    type: string;\n    url: string;\n}\n\nexport default class Route extends ApiRouter {\n\n\n    async getProducrs(search: string) {\n        let psql = this.req.query.c ?\n            \"select p.name as name, p.slug as url, '' as type, match(p.name, p.shortdesc, p.slug, p.keywords) against (:search IN BOOLEAN MODE) as RELEVANCE \" +\n            \"from Products p, ProductCategories pc, Categories c where pc.productid = p.id and c.id = pc.categoryid and c.slug = :category and match(p.name, p.shortdesc, p.slug, p.keywords)  against (:search IN BOOLEAN MODE) ORDER BY RELEVANCE DESC LIMIT 10\"\n\n            :\n\n            \"select name, slug as url, '' as type, match(name, shortdesc, slug, keywords) against (:search IN BOOLEAN MODE) as RELEVANCE \" +\n            \"from Products where match(name, shortdesc, slug, keywords)  against (:search IN BOOLEAN MODE) ORDER BY RELEVANCE DESC LIMIT 10\"\n\n        let prods = await User.sequelize.query(psql,\n            {\n                replacements: { search: search, category: this.req.query.c },\n                type: sq.QueryTypes.SELECT,\n                mapToModel: false,\n                raw: true\n            },\n\n        ).map((p, i) => {\n            let px = <any>p;\n            return {\n                id: 'p' + i,\n                name: px.name,\n                url: '/' + px.url,\n                type: px.type,\n                score: px.RELEVANCE,\n                thumb: this.req.helper.imgUrl('product-photos', px.url)\n            }\n        })\n        return prods;\n    }\n\n    async getCategories(search: string) {\n        let cats = await User.sequelize.query(\"select name, slug as url, 'Kategoriler' as type, match(name, shortdesc, slug, keywords) against (:search IN BOOLEAN MODE) as RELEVANCE \" +\n            \"from Categories where match(name, shortdesc, slug, keywords)  against (:search IN BOOLEAN MODE) ORDER BY Categories.type, RELEVANCE DESC LIMIT 10\",\n            {\n                replacements: { search: search },\n                type: sq.QueryTypes.SELECT,\n                mapToModel: false,\n                raw: true\n            },\n\n        ).map((p, i) => {\n            let px = <any>p;\n            return {\n                id: 'c' + i,\n                name: px.name,\n                url: '/' + px.url,\n                type: px.type,\n                score: px.RELEVANCE,\n                thumb: this.req.helper.imgUrl('category-photos', px.url)\n            }\n        })\n        return cats;\n    }\n\n    async getAreaButchers(search: string) {\n        let areas = await User.sequelize.query(\"select name, slug as url, 'Bölgeler' as type, match(name, slug, keywords) against (:search IN BOOLEAN MODE) as RELEVANCE \" +\n            \"from Areas where status='active' and match(name, slug, keywords)  against (:search IN BOOLEAN MODE) ORDER BY RELEVANCE DESC LIMIT 10\",\n            {\n                replacements: { search: search },\n                type: sq.QueryTypes.SELECT,\n                mapToModel: false,\n                raw: true\n            },\n\n        ).map((p, i) => {\n            let px = <any>p;\n            return {\n                id: 'loc' + i,\n                name: px.name + ' Kasapları',\n                url: '/' + px.url + '-kasap',\n                type: px.type,\n                score: px.RELEVANCE,\n                thumb: null // this.req.helper.imgUrl('category-photos', px.url)\n            }\n        })\n        return areas;\n    }\n\n    async getAreas(search: string) {\n        let areas =  await User.sequelize.query(\"select id, name, slug as url, 'Semt' as type, match(name, slug, keywords) against (:search IN BOOLEAN MODE) as RELEVANCE \" +\n            \"from Areas where level=3 and match(name, slug, keywords)  against (:search IN BOOLEAN MODE) ORDER BY RELEVANCE DESC LIMIT 10\",\n            {\n                replacements: { search: search },\n                type: sq.QueryTypes.SELECT,\n                mapToModel: false,\n                raw: true\n            },\n\n        ).map((p, i) => {\n            let px = <any>p;\n            return {\n                id: px.id,\n                name: px.name,\n                url: px.url,\n                type: px.type,\n                score: px.RELEVANCE\n            }\n        })\n        for(let i = 0; i < areas.length; i++) {\n            let area = areas[i]\n            let addr = await Area.findByPk(area.id);\n            let pref = await addr.getPreferredAddress();\n            area['display'] = pref.display\n            area['l1'] = {\n                name: pref.level1Text,\n                slug: pref.level1Slug\n            },\n            area['l2'] = {\n                name: pref.level2Text,\n                slug: pref.level2Slug\n            }            \n        }\n        return <any>areas;\n    }\n\n\n    async getButchers(search: string) {\n\n\n        let butchers =  await User.sequelize.query(\"select name, slug as url, 'Kasaplar' as type, match(name, slug, keywords) against (:search IN BOOLEAN MODE) as RELEVANCE \" +\n            \"from Butchers where approved=true and match(name, slug, keywords)  against (:search IN BOOLEAN MODE) ORDER BY RELEVANCE DESC LIMIT 10\",\n            {\n                replacements: { search: search },\n                type: sq.QueryTypes.SELECT,\n                mapToModel: false,\n                raw: true\n            },\n\n        ).map((p, i) => {\n            let px = <any>p;\n            return {\n                id: 'b' + i,\n                name: px.name,\n                url: '/' + px.url,\n                type: px.type,\n                score: px.RELEVANCE,\n                thumb: this.req.helper.imgUrl('butcher-google-photos', px.url)\n            }\n        })\n        return butchers;\n\n    }\n\n    async getFoods(search: string) {\n\n        let foodResources = await Resource.sequelize.query(\"select id, title, ref1, slug, contentType, thumbnailUrl, folder,  match(title, description, slug, keywords) against (:search IN BOOLEAN MODE) as RELEVANCE \" +\n            \"from Resources where (tag1 like '%tarif%' or tag1 like '%yemek%') and match(title, description, slug, keywords)  against (:search IN BOOLEAN MODE) ORDER BY  RELEVANCE DESC LIMIT 10\",\n            {\n                replacements: { search: search },\n                model: Resource,\n                type: sq.QueryTypes.SELECT,\n                mapToModel: true\n            }\n\n        );\n\n        let foodProds = await Product.findAll({\n            where: {\n                id: foodResources.map(p => p['ref1'])\n            }\n        })\n\n\n        let foods = foodResources.map((p, i) => {\n            let px = <any>p;\n            return {\n                id: 'f' + i,\n                name: px.title,\n                score: px.RELEVANCE,\n                url: px.slug ? ('/et-yemekleri/' + px.slug) : '/' + foodProds.find(fp => fp.id == px.ref1).slug + '?r=' + px.id,\n                type: 'Eti Bizden',\n                thumb: px.contentType == 'video-youtube' ? (px.thumbnailUrl ? px.getThumbnailFileUrl() : null) : px.getThumbnailFileUrl()\n\n            }\n        })\n        return foods        \n    }\n\n    @Auth.Anonymous()\n    async searchRoute() {\n        if (!this.req.query.q || (this.req.query.q as string).length < 2)\n            return this.res.send([])\n\n        let text = <string>this.req.query.q;\n        let words = text.match(/\\S+/g).filter(w => w.length > 2).map(w => `+${w}*`)\n        let search = words.join()\n\n        let products = (!this.req.query.t || this.req.query.t == 'product') ? await this.getProducrs(search): [];\n        let categories = (!this.req.query.t || this.req.query.t == 'category') ? await this.getCategories(search): [];\n        let foods = (!this.req.query.t || this.req.query.t == 'food') ? await this.getFoods(search): [];\n        let butchers = (!this.req.query.t || this.req.query.t == 'butcher') ? await this.getButchers(search): [];\n        let areaBtchers = (!this.req.query.t || this.req.query.t == 'area-butcher') ? await this.getAreaButchers(search): [];\n        let areas = (this.req.query.t == 'area') ? await this.getAreas(search): [];\n\n        let combined = categories.concat(products.concat(foods.concat(butchers.concat(areaBtchers.concat(areas)))));\n        \n        let sorted = _.sortBy(combined, 'RELEVANCE')\n        this.res.send(sorted)\n    }\n\n    static SetRoutes(router: express.Router) {\n        router.get(\"/fts\", Route.BindRequest(this.prototype.searchRoute));\n    }\n}\n\n\n"],"sourceRoot":"../../../src/"}