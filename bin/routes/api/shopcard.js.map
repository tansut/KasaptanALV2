{"version":3,"sources":["../src/routes/api/shopcard.ts"],"names":[],"mappings":"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","file":"shopcard.js","sourcesContent":["import { Auth } from '../../lib/common';\nimport { ApiRouter } from '../../lib/router';\nimport * as express from \"express\";\nimport SiteLog from '../../db/models/sitelog';\nimport email from '../../lib/email';\nimport { ShopCard } from '../../models/shopcard';\nimport Product from '../../db/models/product';\nimport ProductApi from './product'\nimport Butcher from '../../db/models/butcher';\nimport Area from '../../db/models/area';\nimport Dispatcher from '../../db/models/dispatcher';\nimport { Google } from '../../lib/google';\n\n\nexport default class Route extends ApiRouter {\n\n    async getDispatcher(to:Area) {\n        let res = await Dispatcher.findOne({\n            where: {\n                toareaid: to.id,                \n            }\n        })\n        return res;\n    }\n\n    @Auth.Anonymous()\n    async addRoute() {\n        let api = new ProductApi(this.constructorParams);\n        let item = this.req.body;\n      \n        let shopcard = await ShopCard.createFromRequest(this.req);\n        let product = await Product.findByPk(item.id);\n        let butcher = this.req.body.butcher ? await Butcher.findOne( {             \n            where: {\n               slug: this.req.body.butcher.slug\n            },            \n                include: [{\n                  all: true  \n                }]\n        }): null;\n        let productView = await api.getProductView(product, butcher)\n        if (item.shopcardIndex >= 0) {\n            shopcard.remove(item.shopcardIndex);\n        }\n        shopcard.addProduct(productView, item.quantity, item.purchaseoption, item.note, item.productTypeData || {});\n        await shopcard.saveToRequest(this.req);\n        this.res.send(shopcard);\n    }\n\n    @Auth.Anonymous()\n    async updateRoute() {\n        let api = new ProductApi(this.constructorParams);\n        let item = this.req.body;\n      \n        let shopcard = await ShopCard.createFromRequest(this.req);\n        let product = await Product.findByPk(item.id);\n        let butcher = this.req.body.butcher ? await Butcher.findOne( {             \n            where: {\n               slug: this.req.body.butcher.slug\n            },            \n                include: [{\n                  all: true  \n                }]\n        }): null;\n        let productView = await api.getProductView(product, butcher)\n        shopcard.addProduct(productView, item.quantity, item.purchaseoption, item.note, item.productTypeData || {});\n        await shopcard.saveToRequest(this.req);\n        this.res.send(shopcard);\n    }    \n\n    @Auth.Anonymous()\n    async removeRoute() {\n        let item = this.req.body;\n        let shopcard = await ShopCard.createFromRequest(this.req);\n        shopcard.remove(item.order);\n        await shopcard.saveToRequest(this.req);\n        this.res.send(shopcard);\n    }\n\n    async geocode() {\n        if(!this.req.body.address)\n            return this.next();\n        let semt = this.req.prefAddr.display;\n        let coded = await Google.getLocation(this.req.body.address + ' ' + semt)\n        this.res.send(coded)\n    }\n\n    async revgeocode() {\n        if(!this.req.body.lat || !this.req.body.lng)\n            return this.next();\n        let semt = this.req.prefAddr.display;\n        let address = await Google.reverse(parseFloat(this.req.body.lat), parseFloat(this.req.body.lng))\n        this.res.send(address);\n    }\n\n    \n\n\n    static SetRoutes(router: express.Router) {\n        router.post(\"/shopcard/geocode\", Route.BindRequest(this.prototype.geocode));        \n        router.post(\"/shopcard/reversegeocode\", Route.BindRequest(this.prototype.revgeocode));        \n        router.post(\"/shopcard/add\", Route.BindRequest(this.prototype.addRoute));\n        router.post(\"/shopcard/update\", Route.BindRequest(this.prototype.updateRoute));\n        router.post(\"/shopcard/remove\", Route.BindRequest(this.prototype.removeRoute));\n    }\n}\n\n\n"],"sourceRoot":"../../../src/"}