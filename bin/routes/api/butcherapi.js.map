{"version":3,"sources":["../src/routes/api/butcherapi.ts"],"names":[],"mappings":"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","file":"butcherapi.js","sourcesContent":["import * as express from \"express\";\nimport { ViewRouter, ApiRouter } from '../../lib/router';\nimport moment = require('moment');\nimport { CacheManager } from \"../../lib/cache\";\nimport Butcher from \"../../db/models/butcher\";\nimport { Auth } from \"../../lib/common\";\nimport ButcherProduct from \"../../db/models/butcherproduct\";\nimport Product from \"../../db/models/product\";\nimport Area from \"../../db/models/area\";\nimport Helper from \"../../lib/helper\";\nimport OrderApi from \"./../api/order\"\nimport { Order } from \"../../db/models/order\";\nimport { OrderItemStatus } from \"../../models/order\";\nimport { Sms } from \"../../lib/sms\";\nimport SiteLogRoute from \"./sitelog\";\nimport User from \"../../db/models/user\";\nimport UserRoute from \"./user\";\n\n\n\nexport default class Route extends ApiRouter {\n\n    butcher: Butcher;\n    adminButchers: Butcher[];\n    api: OrderApi;\n\n    async loadButcher(id: number) {\n        let butcher = await Butcher.findOne({\n            include: [{\n                model: ButcherProduct,\n                include: [Product],\n                order: [['id', \"DESC\"]]\n                                    \n            },\n            {\n                model: Area,\n                all: true,\n                as: \"areaLevel1Id\"\n\n            }], where: { id: id\n            \n            \n            }\n        });\n        return butcher;\n    }\n\n    async setButcher() {\n        if (this.req.session.__butcherid) {\n            this.butcher = await this.loadButcher(this.req.session.__butcherid)\n        } else if (this.req.user.butcherid) {\n            this.butcher = await this.loadButcher(this.req.user.butcherid)\n        }\n    }\n\n\n    async sendPayment() {\n        await this.setButcher();\n        this.req.body.phone = this.req.body.phone || \"\";\n        this.req.body.name = this.req.body.name || \"\"\n        let phone = this.req.body.phone.trim();\n        let name = this.req.body.name.trim();\n        let tutar = Helper.parseFloat(this.req.body.pay);\n\n        let user = await User.retrieveByEMailOrPhone(phone)\n        if (!user) {\n            user = await new UserRoute(this.constructorParams).createAsButcherCustomer({\n                phone: phone,\n                name: name\n            }, this.butcher.id)\n        }\n\n        this.api = new OrderApi(this.constructorParams);\n\n        let o = new Order();\n        o.total = tutar;\n        o.subTotal = tutar;\n        o.phone = user.mphone;\n        o.name = name;\n        o.note = this.req.body.desc;\n        o.paymentType = \"onlinepayment\"\n        o.paymentTypeText = \"Online Ödeme\";\n        o.status = OrderItemStatus.shipping;\n        o.userId = user.id;\n        o.discountTotal = 0;\n        o.shippingTotal = 0;\n        o.butcherid = this.butcher.id;\n        o.butcherName = this.butcher.name;\n        o.dispatcherType = \"butcher\";\n        o.dispatcherName = this.butcher.name;\n        o.email = this.butcher.email || `${this.butcher.slug}@kasaptanal.com`\n        o.address = \"sipariş adresi\";\n        o.areaLevel1Id = this.butcher.areaLevel1Id;\n        o.areaLevel1Text = this.butcher.areaLevel1.name;\n        await this.api.createAsButcherOrder(o);\n        let payUrl = `${this.url}/pay/${o.ordernum}`;\n        let text = `${this.butcher.name} ${ Helper.formattedCurrency(tutar)} sipariş tutarı online ödeme yapmak için lütfen ${payUrl} adresini ziyaret edin. ${this.req.body.desc}`\n        let log = new SiteLogRoute(this.constructorParams)\n        await Sms.send('90' + o.phone, text, true, log);\n        this.res.send({\n            text: text,\n            url: payUrl\n        })        \n    }\n\n    async getPaymentSmsTextRoute() {\n        await this.setButcher();\n        let tutar = Helper.parseFloat(this.req.body.pay);\n        let text = `${this.butcher.name} ${ Helper.formattedCurrency(tutar)} siparişiniz online ödeme yapmak için lütfen tıklayın. ${this.req.body.desc}`\n        this.res.send({text:text})\n    }\n\n\n\n    static SetRoutes(router: express.Router) {\n        router.post(\"/payment/send\", Route.BindRequest(this.prototype.sendPayment));        \n        router.post(\"/payment/getsms\", Route.BindRequest(this.prototype.getPaymentSmsTextRoute));        \n    }\n}"],"sourceRoot":"../../../src/"}