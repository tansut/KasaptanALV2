{"version":3,"sources":["../src/routes/api/user.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AACA,6CAA6C;AAE7C,+CAA6C;AAC7C,yCAAkC;AAElC,uCAAuC;AACvC,mCAAmC;AACnC,iCAAiC;AAEjC,6CAA6C;AAC7C,8DAA8D;AAC9D,6CAAmD;AAEnD,6CAAsC;AACtC,uCAAoC;AACpC,2CAAoC;AACpC,uCAAqC;AACrC,+CAAwC;AACxC,IAAI,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AACrC,IAAI,SAAS,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAC7C,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAA;AAClC,gCAAgC;AAahC,MAAqB,SAAU,SAAQ,kBAAS;IAE5C,mBAAmB;IACnB,gFAAgF;IAChF,+BAA+B;IAC/B,YAAY;IAEZ,2BAA2B;IAC3B,qCAAqC;IACrC,+BAA+B;IAC/B,2BAA2B;IAC3B,0BAA0B;IAC1B,gCAAgC;IAChC,oBAAoB;IACpB,0BAA0B;IAC1B,2BAA2B;IAC3B,SAAS;IACT,IAAI;IAGJ,QAAQ,CAAC,GAAW;QAChB,GAAG,GAAG,GAAG,IAAI,EAAE,CAAC;QAChB,OAAQ,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;IAC/C,CAAC;IAGK,iBAAiB;;YAEnB,IAAI,IAAI,GAAG,MAAM,cAAS,CAAC,OAAO,CAAC;gBAC/B,KAAK,EAAE;oBACH,MAAM,EAAE,gBAAM,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;iBACrD;aACJ,CAAC,CAAC;YACH,IAAI,CAAC,IAAI;gBAAE,MAAM,IAAI,IAAI,CAAC,eAAe,CAAC,oBAAoB,GAAG,gBAAM,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YAC7G,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAChD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC;gBACzB,MAAM,IAAI,IAAI,CAAC,eAAe,CAAC,2EAA2E,GAAI,gBAAM,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YAC9J,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC3B,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YAClB,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAA;QAC5B,CAAC;KAAA;IAMK,aAAa;;YACf,IAAI,MAAM,GAAG,MAAM,cAAI,CAAC,SAAS,CAAC,KAAK,CAAC;;;;;SAKvC,EAAa;gBACN,YAAY,EAAE;oBACT,GAAG,EAAE,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAa,CAAC;oBAC5C,GAAG,EAAE,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAa,CAAC;iBAC5C;gBACL,IAAI,EAAE,EAAE,CAAC,UAAU,CAAC,MAAM;gBAC1B,UAAU,EAAE,KAAK;gBACjB,GAAG,EAAE,IAAI;aACZ,CACA,CAAA;YACD,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAC,CAAC,EAAE,EAAE;gBAClC,IAAI,IAAI,GAAG,MAAM,cAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBAChD,IAAI,IAAI,GAAG,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;gBAC5C,MAAM,CAAC,CAAC,CAAC,GAAG;oBACR,OAAO,EAAE,IAAI,CAAC,OAAO;oBACrB,GAAG,EAAE,IAAI,CAAC,UAAU;oBACpB,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;iBAClC,CAAA;aACJ;YAEL,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACzB,CAAC;KAAA;IAGK,mBAAmB;;YACrB,IAAI,IAAI,GAAG,MAAM,cAAS,CAAC,OAAO,CAAC;gBAC/B,KAAK,EAAE;oBACH,MAAM,EAAE,gBAAM,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;iBACrD;aACJ,CAAC,CAAC;YAGH,IAAI,CAAC,IAAI;gBAAE,MAAM,IAAI,IAAI,CAAC,eAAe,CAAC,iBAAiB,GAAG,gBAAM,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YAC1G,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAChD,IAAI,SAAS,GAAW,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;YAElE,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC;gBACzB,MAAM,IAAI,IAAI,CAAC,eAAe,CAAC,qBAAqB,GAAG,gBAAM,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAE,CAAC;YACxG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC;gBAC7B,MAAM,IAAI,IAAI,CAAC,eAAe,CAAC,yBAAyB,CAAC,CAAC;YAC9D,IAAI,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;gBACrC,MAAM,IAAI,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,CAAC;YACxD,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;YACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;YAC/B,IAAI;gBACA,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;aACrB;YAAC,OAAM,GAAG,EAAE;gBACT,IAAI,GAAG,CAAC,QAAQ,IAAI,GAAG,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,EAAE;oBACrD,MAAM,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,GAAG,6EAA6E,EAAE,GAAG,CAAC,CAAC;iBAEnI;aACJ;YACD,eAAK,CAAC,IAAI,CAAE,IAAI,CAAC,KAAK,EAAE,gBAAgB,EAAE,eAAe,EAAE;gBACvD,KAAK,EAAG,IAAI,CAAC,KAAK;aACrB,CAAC,CAAA;YACF,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAA;QAClC,CAAC;KAAA;IAEK,uBAAuB,CAAC,KAAkB,EAAE,SAAiB;;YAC/D,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC;gBACrC,MAAM,IAAI,IAAI,CAAC,eAAe,CAAC,wBAAwB,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;YAC3E,IAAI,IAAI,GAAG,IAAI,cAAS,EAAE,CAAC;YAC3B,IAAI,CAAC,MAAM,GAAG,gBAAM,CAAC,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACjD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,GAAG,4BAA4B,CAAC;YACxD,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;YACvB,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC;YAClD,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;YACxB,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;YAC1B,IAAI,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAA;YAClC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACtB,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YAClB,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;IAGK,WAAW;;YACb,IAAI,KAAK,GAAgB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;YACvC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,IAAI,EAAE,CAAC;YAChC,IAAI,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC;gBAC9B,MAAM,IAAI,IAAI,CAAC,eAAe,CAAC,yBAAyB,CAAC,CAAC;YAC9D,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC;gBACrC,MAAM,IAAI,IAAI,CAAC,eAAe,CAAC,wBAAwB,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;YAC3E,4CAA4C;YAC5C,cAAc;YACd,cAAc;YACd,mGAAmG;YACnG,IAAI;gBACA,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;gBAChC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;aAC5B;YAAC,OAAO,GAAG,EAAE;gBACV,IAAI,GAAG,CAAC,QAAQ,IAAI,GAAG,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,EAAE;oBACrD,IAAI,YAAY,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBAClE,IAAI,YAAY,CAAC,cAAc;wBAC3B,MAAM,IAAI,IAAI,CAAC,eAAe,CAAC,UAAU,GAAG,YAAY,CAAC,IAAI,GAAG,oCAAoC,EAAE,GAAG,CAAC,CAAC;yBAC1G;wBACD,IAAI,GAAG,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,YAAY,CAAC,MAAM,CAAC,CAAA;wBAC1E,YAAY,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;wBAC9B,MAAM,YAAY,CAAC,IAAI,EAAE,CAAA;wBACzB,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;qBAC5B;iBACJ;;oBACG,MAAM,GAAG,CAAC;aACjB;QAEL,CAAC;KAAA;IAED,WAAW;QACP,IAAI,GAAG,GAAG,SAAS,CAAC,QAAQ,CAAC;YACzB,MAAM,EAAE,CAAC;YACT,OAAO,EAAE,IAAI;YACb,SAAS,EAAE,KAAK;YAChB,SAAS,EAAE,IAAI;YACf,wBAAwB,EAAE,IAAI;SACjC,CAAC,CAAC;QAEH,IAAI,gBAAM,CAAC,OAAO,IAAI,aAAa;YAC/B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;QACpB,OAAO,GAAG,CAAC;IACf,CAAC;IAEK,YAAY,CAAC,GAAW,EAAE,WAAmB;;YAC/C,MAAM,SAAG,CAAC,IAAI,CAAC,IAAI,GAAG,WAAW,EAAE,GAAG,GAAG,uDAAuD,EAAE,IAAI,EAAE,IAAI,iBAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAClJ,OAAO,GAAG,CAAC;QACf,CAAC;KAAA;IAEK,eAAe,CAAC,IAAe;;YACjC,IAAI,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAA;YAClC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACtB,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YAClB,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC;KAAA;IAGK,MAAM,CAAC,KAAkB;;YAC3B,IAAI,IAAI,GAAG,IAAI,cAAS,EAAE,CAAC;YAC3B,IAAI,CAAC,MAAM,GAAG,gBAAM,CAAC,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACjD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,GAAG,4BAA4B,CAAC;YACxD,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC;YAClD,IAAI,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAA;YAClC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACtB,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YAClB,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1C,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;IAED,YAAY,CAAC,KAAa,EAAE,QAAgB;QACxC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnC,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,GAAc,EAAE,EAAE;gBACvD,IAAI,CAAC,GAAG;oBAAE,OAAO,MAAM,CAAC,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;gBACpD,IAAI,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAE;oBAC5C,GAAG,CAAC,SAAS,GAAG,MAAM,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC;oBACtC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC;oBAClC,GAAG,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;iBAC7D;;oBACI,MAAM,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC,4BAA4B,GAAG,KAAK,CAAC,CAAC,CAAA;YAC/E,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAED,sBAAsB,CAAC,KAAa;QAChC,OAAO,cAAS,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAA;IAClD,CAAC;IAEO,YAAY,CAAC,IAAe;QAChC,IAAI,WAAW,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC7C,IAAI,oBAAoB,GAAG,aAAa,CAAC,OAAO,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;QACjF,OAAO,aAAa,CAAC,OAAO,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,qBAA6B,EAAE,EAAE;YAC1G,OAAO,EAAE,WAAW,EAAE,oBAAoB,EAAE,YAAY,EAAE,qBAAqB,EAAE,CAAC;QACtF,CAAC,CAAC,CAAC;IACP,CAAC;IAED,OAAO;QACH,gCAAgC;QAChC,2BAA2B;QAC3B,KAAK;QACL,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC7C,IAAI,CAAC,GAAI,CAAC,MAAM,EAAE,CAAC;IAC7B,CAAC;IAED,cAAc,CAAC,WAAoD;QAC/D,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,EAAE;YACjC,MAAM,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;SAC/B,CAAC,CAAC;IACP,CAAC;IAED,KAAK,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,EAAE;QAC1B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;gBAC3C,IAAI,GAAG,EAAE;oBAAE,MAAM,CAAC,GAAG,CAAC,CAAC;iBAAE;gBACzB,IAAI,CAAC,IAAI,EAAE;oBAAE,MAAM,CAAC,sBAAsB,CAAC,CAAC;iBAAE;gBAE9C,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACL,CAAC;IAGG,iBAAiB;;YACnB,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;YACtC,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC;YAC5C,IAAI,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC;gBACxB,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC,sCAAsC,CAAC,CAAC,CAAC;YAC5F,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC;gBAC5D,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC,oCAAoC,CAAC,CAAC,CAAC;YAC1F,IAAI,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC;gBAC3B,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,CAAC,CAAC;YACxE,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;gBACpD,OAAO,IAAI,CAAC,KAAK,CAAC;oBACd,KAAK,EAAE,KAAK;oBACZ,QAAQ,EAAE,QAAQ;oBAClB,GAAG,EAAE,IAAI,CAAC,GAAG;iBAChB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAA,EAAE;oBACV,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;oBACzB,OAAO,IAAI,CAAC;gBAChB,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAA,EAAE,CAAA,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAA;gBAEvC,iFAAiF;gBACjF,wDAAwD;gBACxD,6BAA6B;gBAC7B,uFAAuF;gBACvF,KAAK;YACT,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;IAED,8CAA8C;IAC9C,gDAAgD;IAChD,sGAAsG;IACtG,wEAAwE;IACxE,2GAA2G;IAC3G,kIAAkI;IAClI,sBAAsB;IACtB,mBAAmB;IACnB,sCAAsC;IACtC,2CAA2C;IAC3C,yBAAyB;IACzB,8BAA8B;IAC9B,yIAAyI;IACzI,0FAA0F;IAC1F,sCAAsC;IACtC,cAAc;IACd,UAAU;IACV,IAAI;IAEJ,oBAAoB;IACpB,2BAA2B;IAC3B,qEAAqE;IACrE,+BAA+B;IAC/B,mHAAmH;IACnH,wFAAwF;IACxF,eAAe;IACf,yDAAyD;IACzD,QAAQ;IACR,IAAI;IAEJ,oBAAoB;IACpB,gCAAgC;IAChC,uCAAuC;IACvC,iEAAiE;IACjE,qFAAqF;IACrF,kEAAkE;IAClE,gEAAgE;IAChE,mCAAmC;IACnC,UAAU;IACV,IAAI;IAEJ,mEAAmE;IACnE,0DAA0D;IAC1D,iHAAiH;IACjH,oEAAoE;IACpE,uEAAuE;IACvE,8CAA8C;IAC9C,kHAAkH;IAClH,qCAAqC;IACrC,4FAA4F;IAC5F,kBAAkB;IAClB,cAAc;IACd,SAAS;IACT,IAAI;IAEJ,oBAAoB;IACpB,+BAA+B;IAC/B,6CAA6C;IAC7C,+CAA+C;IAC/C,iFAAiF;IACjF,4EAA4E;IAC5E,QAAQ;IACR,4EAA4E;IAC5E,oCAAoC;IACpC,SAAS;IACT,IAAI;IAEJ,qDAAqD;IAErD,6EAA6E;IAC7E,uBAAuB;IACvB,iHAAiH;IACjH,YAAY;IACZ,8DAA8D;IAC9D,iHAAiH;IACjH,YAAY;IACZ,kCAAkC;IAClC,uCAAuC;IAEvC,qDAAqD;IACrD,0DAA0D;IAC1D,gCAAgC;IAEhC,uCAAuC;IACvC,+GAA+G;IAC/G,aAAa;IACb,UAAU;IAEV,IAAI;IAEJ,0BAA0B;IAC1B,2CAA2C;IAC3C,2CAA2C;IAC3C,kIAAkI;IAClI,oEAAoE;IACpE,mHAAmH;IACnH,0FAA0F;IAC1F,SAAS;IACT,IAAI;IAEJ,yDAAyD;IACzD,iDAAiD;IACjD,yDAAyD;IACzD,4BAA4B;IAC5B,0CAA0C;IAC1C,wGAAwG;IACxG,cAAc;IACd,SAAS;IACT,IAAI;IAEJ,oBAAoB;IACpB,0BAA0B;IAE1B,IAAI;IAEJ,qBAAqB;IAErB,IAAI;IAEJ,oBAAoB;IACpB,qBAAqB;IACrB,uCAAuC;IACvC,qDAAqD;IACrD,yBAAyB;IACzB,+BAA+B;IAC/B,YAAY;IACZ,iCAAiC;IACjC,SAAS;IACT,IAAI;IAEJ,6BAA6B;IAC7B,0DAA0D;IAC1D,sBAAsB;IACtB,iFAAiF;IACjF,mBAAmB;IACnB,yFAAyF;IACzF,2CAA2C;IAC3C,gCAAgC;IAChC,uCAAuC;IACvC,gBAAgB;IAChB,kEAAkE;IAClE,4FAA4F;IAC5F,kBAAkB;IAClB,YAAY;IACZ,gCAAgC;IAChC,uGAAuG;IACvG,UAAU;IACV,IAAI;IAEJ,gCAAgC;IAChC,4BAA4B;IAC5B,yEAAyE;IACzE,sFAAsF;IACtF,+EAA+E;IAC/E,sEAAsE;IACtE,IAAI;IAEJ,kDAAkD;IAClD,gBAAgB;IAChB,yDAAyD;IACzD,4DAA4D;IAC5D,6CAA6C;IAC7C,IAAI;IAEJ,8EAA8E;IAC9E,yDAAyD;IACzD,IAAI;IAEJ,MAAM,CAAC,SAAS,CAAC,MAAsB;QACnC,6CAA6C;QAC7C,oBAAoB;QACpB,mBAAmB;QACnB,MAAM;QAEN,6FAA6F;QAC7F,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;QAC/E,MAAM,CAAC,IAAI,CAAC,oBAAoB,EAAE,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;QAC3F,MAAM,CAAC,IAAI,CAAC,sBAAsB,EAAE,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC;QAC/F,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC;QAGnF,0FAA0F;QAC1F,6FAA6F;QAC7F,uFAAuF;QACvF,+EAA+E;QAC/E,sGAAsG;QACtG,2EAA2E;IAG/E,CAAC;CACJ;AAxbG;IADC,aAAI,CAAC,SAAS,EAAE;;;;kDAehB;AAMD;IADC,aAAI,CAAC,SAAS,EAAE;;;;8CA4BhB;AAGD;IADC,aAAI,CAAC,SAAS,EAAE;;;;oDAiChB;AAmBD;IADC,aAAI,CAAC,SAAS,EAAE;;;;4CA8BhB;AA6FD;IADC,aAAI,CAAC,SAAS,EAAE;;;;kDA0BhB;AAlRL,4BAkdC","file":"user.js","sourcesContent":["import RefreshToken from '../../db/models/refreshToken';\nimport { ApiRouter } from '../../lib/router';\nimport * as express from \"express\";\nimport UserModel from '../../db/models/user';\nimport config from '../../config';\nimport * as um from '../../db/models/user';\nimport * as http from '../../lib/http';\nimport * as bcrypt from 'bcryptjs';\nimport * as moment from 'moment';\nimport * as crypto from 'crypto';\n//import emailmanager from '../../lib/email';\nimport * as authorization from '../../lib/authorizationToken';\nimport { Auth, UserRoles } from '../../lib/common';\nimport { SignupModel, AppUser, LoginResult } from '../../models/user';\nimport Helper from '../../lib/helper';\nimport { Sms } from '../../lib/sms';\nimport email from '../../lib/email';\nimport SiteLogRoute from './sitelog';\nimport Area from '../../db/models/area';\nvar validator = require(\"validator\");\nvar generator = require('generate-password');\nlet passport = require(\"passport\")\nimport * as sq from 'sequelize';\nimport { add } from 'lodash';\n\n \ninterface GeneratedTokenData {\n    accessToken: authorization.IEncryptedAccessTokenData;\n    refreshToken: string;\n}\n\nexport interface UserCreateResult {\n    user: AppUser;\n}\n\nexport default class UserRoute extends ApiRouter {\n\n    // createSample() {\n    //     // userroute.authenticate(\"tansut@gmail.com\", \"deneme1\").then((user) => {\n    //     //     console.log(user)\n    //     // })\n\n    //     return this.create({\n    //         email: \"tansut@gmail.com\",\n    //         password: \"deneme1\",\n    //         roles: [\"admin\"]\n    //     }).then((user) => {\n    //         console.log(user.id);\n    //         debugger;\n    //     }).catch((err) => {\n    //         console.log(err)\n    //     })\n    // }\n\n\n    cleanSMS(sms: string) {\n        sms = sms || \"\";\n        return  sms.match(/\\S+/g)[0].toLowerCase();\n    }\n    \n    @Auth.Anonymous()\n    async verifysignupRoute() {\n        \n        let user = await UserModel.findOne({\n            where: {\n                mphone: Helper.getPhoneNumber(this.req.body.phone)\n            }\n        });\n        if (!user) throw new http.ValidationError(\"Geçersiz telefon: \" + Helper.getPhoneNumber(this.req.body.phone));\n        let sms = this.cleanSMS(this.req.body.password);\n        if (!user.verifyPassword(sms))\n            throw new http.ValidationError(\"SMS şifreniz hatalıdır. SMS şifreniz 5 karakterden oluşmaktadır. Tel no: \" +  Helper.getPhoneNumber(this.req.body.phone));\n        user.mphoneverified = true;\n        await user.save();\n        this.res.sendStatus(200)\n    }\n\n    \n\n\n    @Auth.Anonymous()\n    async findSemtRoute() {\n        let result = await Area.sequelize.query(`\n        \n        select id, name, slug, GLength(LineStringFromWKB(LineString(\n            location, \n            GeomFromText('POINT(:lat :lng)')))) AS distance from Areas  where level=3 and location is not null ORDER BY distance ASC LIMIT 3\n        `,            {\n                replacements: { \n                     lat: parseFloat(this.req.body.lat as string), \n                     lng: parseFloat(this.req.body.lng as string) \n                    },\n                type: sq.QueryTypes.SELECT,\n                mapToModel: false,\n                raw: true\n            }\n            )\n            for(let i = 0; i < result.length;i++) {\n                let area = await Area.findByPk(result[i]['id']);\n                let addr = await area.getPreferredAddress();\n                result[i] = {\n                    display: addr.display,\n                    url: addr.level3Slug,\n                    distance: result[i]['distance']\n                }\n            }\n\n        this.res.send(result)\n    }\n\n    @Auth.Anonymous()\n    async completesignupRoute() {\n        let user = await UserModel.findOne({\n            where: {\n                mphone: Helper.getPhoneNumber(this.req.body.phone)                \n            }\n        });\n\n        \n        if (!user) throw new http.ValidationError(\"invalid phone: \" + Helper.getPhoneNumber(this.req.body.phone));\n        let sms = this.cleanSMS(this.req.body.password);\n        let userEmail: string = (this.req.body.email || \"\").toLowerCase();\n        \n        if (!user.verifyPassword(sms))\n            throw new http.ValidationError(\"SMS kodu hatalıdır.\" + Helper.getPhoneNumber(this.req.body.phone) );\n        if (!validator.isEmail(userEmail))\n            throw new http.ValidationError(\"Geçersiz e-posta adresi\");\n        if (validator.isEmpty(this.req.body.name))\n            throw new http.ValidationError(\"Geçersiz ad soyad\");\n        user.email = userEmail;\n        user.name = this.req.body.name;\n        try {\n            await user.save();\n        } catch(err) {\n            if (err.original && err.original.code == 'ER_DUP_ENTRY') {\n                throw new http.ValidationError(user.email + ' e-posta adresi sistemimizde mevcut. Lütfen başla bir e-posta adresi girin.', 400);\n\n            }            \n        }\n        email.send( user.email, \"iyi et rehberi\", \"meatguide.ejs\", {\n            email:  user.email\n        })\n        await this.authenticateRoute()\n    }\n\n    async createAsButcherCustomer(model: SignupModel, butcherId: number): Promise<UserModel> {\n        if (!validator.isMobilePhone(model.phone))\n            throw new http.ValidationError('Cep telefonu geçersiz:' + model.phone);        \n        var user = new UserModel();\n        user.mphone = Helper.getPhoneNumber(model.phone);\n        user.email = user.mphone + '@unverified.kasaptanal.com';\n        user.name = model.name;\n        user.ivCode = (Math.random() * 999999).toString();\n        user.source = \"butcher\";\n        user.sourceId = butcherId;\n        let pwd = await this.generatePwd()\n        user.setPassword(pwd);\n        await user.save();\n        return user;\n    }\n\n    @Auth.Anonymous()\n    async signupRoute() {\n        var model = <SignupModel>this.req.body;\n        model.phone = model.phone || \"\";\n        if (validator.isEmpty(model.phone))\n            throw new http.ValidationError('Cep telefonu gereklidir');\n        if (!validator.isMobilePhone(model.phone))\n            throw new http.ValidationError('Cep telefonu geçersiz:' + model.phone);\n        // if (!validator.isLength(model.password, {\n        //     min: 6,\n        //     max: 20\n        // })) return Promise.reject(new http.ValidationError('Password should be at least 6 characters'));\n        try {\n            await this.create(this.req.body)\n            this.res.sendStatus(200);\n        } catch (err) {\n            if (err.original && err.original.code == 'ER_DUP_ENTRY') {\n                let existingUser = await this.retrieveByEMailOrPhone(model.phone);\n                if (existingUser.mphoneverified)\n                    throw new http.ValidationError(\"Merhaba \" + existingUser.name + \", hesabınıza giriş yapabilirsiniz.\", 400);\n                else {\n                    let pwd = await this.sendPassword(this.generatePwd(), existingUser.mphone)\n                    existingUser.setPassword(pwd);\n                    await existingUser.save()\n                    this.res.sendStatus(200);\n                }\n            } else\n                throw err;\n        }\n\n    }\n\n    generatePwd() {\n        let pwd = generator.generate({\n            length: 5,\n            numbers: true,\n            uppercase: false,\n            lowercase: true,\n            excludeSimilarCharacters: true,\n        });\n\n        if (config.nodeenv == 'development')\n            console.log(pwd)\n        return pwd;\n    }\n\n    async sendPassword(pwd: string, phoneNumber: string) {\n        await Sms.send('90' + phoneNumber, `${pwd} kasaptanal.com giris sifreniz ile isleme devam edin.`, true, new SiteLogRoute(this.constructorParams));\n        return pwd;\n    }\n\n    async sendNewPassword(user: UserModel) {\n        let pwd = await this.generatePwd()\n        user.setPassword(pwd);\n        await user.save();\n        await this.sendPassword(pwd, user.mphone);        \n    }\n\n\n    async create(model: SignupModel): Promise<UserModel> {\n        var user = new UserModel();\n        user.mphone = Helper.getPhoneNumber(model.phone);\n        user.email = user.mphone + '@unverified.kasaptanal.com';\n        user.ivCode = (Math.random() * 999999).toString();\n        let pwd = await this.generatePwd()\n        user.setPassword(pwd);\n        await user.save();\n        await this.sendPassword(pwd, user.mphone);\n        return user;\n    }\n\n    authenticate(email: string, password: string): Promise<UserModel> {\n        return new Promise((resolve, reject) => {\n            this.retrieveByEMailOrPhone(email).then((doc: UserModel) => {\n                if (!doc) return reject(new http.PermissionError());\n                if (bcrypt.compareSync(password, doc.password)) {\n                    doc.lastLogin = moment.utc().toDate();\n                    this.req && (this.req.user = doc);\n                    doc.save().then(() => resolve(doc), (err) => reject(err));\n                }\n                else reject(new http.PermissionError(\"Giriş bilgileriniz hatalı:\" + email))\n            })\n        });\n    }\n\n    retrieveByEMailOrPhone(email: string) {\n        return UserModel.retrieveByEMailOrPhone(email)\n    }\n\n    private createTokens(user: UserModel): Promise<any> {\n        var accessToken = user.generateAccessToken();\n        var accessTokenEncrypted = authorization.default.encryptAccessToken(accessToken);\n        return authorization.default.encryptRefreshToken(user.id, accessToken).then((encryptedRefreshToken: string) => {\n            return { accessToken: accessTokenEncrypted, refreshToken: encryptedRefreshToken };\n        });\n    }\n\n    signOff() {\n        // this.res.cookie(\"auth\", \"\", {\n        //     expires: new Date(0)\n        // })\n        this.req.session.shopcard = this.req.user.shopcard;\n        (<any>this.req).logout();\n    }\n\n    setAccessToken(accessToken: authorization.IEncryptedAccessTokenData) {\n        this.res.cookie(\"auth\", accessToken, {\n            maxAge: 0.5 * 60 * 60 * 1000\n        });\n    }\n\n    login({ email, password, req }) {\n        return new Promise((resolve, reject) => {\n          passport.authenticate('local', (err, user) => {\n            if (err) { reject(err); }\n            if (!user) { reject('Invalid credentials.'); }\n      \n            req.login(user, () => resolve(user));\n          })({ body: { email, password } });\n        });\n      }\n\n    @Auth.Anonymous()\n    async authenticateRoute() {\n        var email = this.req.body.email || \"\";\n        var password = this.req.body.password || \"\";\n        if (validator.isEmpty(email))\n            return Promise.reject(new http.ValidationError('e-posta veya cep telefonu gereklidir'));\n        if (!validator.isEmail(email) && !validator.isMobilePhone(email))\n            return Promise.reject(new http.ValidationError('e-posta veya cep telefonu geçersiz'));\n        if (validator.isEmpty(password))\n            return Promise.reject(new http.ValidationError('Şifre boş olamaz'));\n        return this.authenticate(email, password).then((user) => {\n            return this.login({\n                email: email,\n                password: password,\n                req: this.req\n            }).then(user=>{\n                this.res.sendStatus(200);\n                return user;\n            }).catch(err=>this.res.sendStatus(401))\n\n            // return this.createTokens(user).then((generatedTokens: GeneratedTokenData) => {\n            //     this.setAccessToken(generatedTokens.accessToken);\n            //     this.res.redirect(\"/\")\n            //     //this.res.send(<LoginResult>{ user: user.toClient(), token: generatedTokens });\n            // })\n        });\n    }\n\n    // useRefreshToken(refreshTokenData: string) {\n    //     return new Promise((resolve, reject) => {\n    //         authorization.default.decryptRefreshToken(refreshTokenData).then((user: IUserDocument) => {\n    //             return this.createTokens(user).then((generatedTokens => {\n    //                 return new AccountRoute(this.constructorParams).retrieve(user.account).then(account => {\n    //                     this.res.send(<LoginResult>{ user: user.toClient(), account: account.toClient(), token: generatedTokens });\n    //                 });\n    //             }));\n    //         }).then((responseData) => {\n    //             this.res.send(responseData);\n    //             resolve();\n    //         }).catch((err) => {\n    //             var errorDetail = { message: 'Refresh Token Not Validated Msg :' + err, PermissionErrorType: 'refreshTokenNotValidated' };\n    //             var generatedError = new http.ValidationError(JSON.stringify(errorDetail));\n    //             reject(generatedError);\n    //         });\n    //     });\n    // }\n\n    // @Auth.Anonymous()\n    // useRefreshTokenRoute() {\n    //     var refreshTokenData = <string>this.req.body.refreshTokenData;\n    //     if (!refreshTokenData) {\n    //         var errorDetail = { message: 'Refresh Token Not Granted', PermissionErrorType: 'refreshTokenRequired' };\n    //         return Promise.reject(new http.ValidationError(JSON.stringify(errorDetail)));\n    //     } else {\n    //         return this.useRefreshToken(refreshTokenData);\n    //     }\n    // }\n\n    // @Auth.Anonymous()\n    // resetPasswordRequestRoute() {\n    //     var email = this.req.body.email;\n    //     if (validator.isEmpty(email) || !validator.isEmail(email))\n    //         return Promise.reject(new http.ValidationError('Invalid e-mail address'));\n    //     var url = this.req.protocol + '://' + this.req.get('host');\n    //     return this.resetPasswordRequest(email, url).then(() => {\n    //         this.res.sendStatus(200)\n    //     });\n    // }\n\n    // resetPasswordRequest(email: string, url: string): Promise<any> {\n    //     return this.retrieveByEMail(email).then((user) => {\n    //         if (!user) return Promise.reject(new http.NotFoundError('There is no user with this e-mail address'));\n    //         user.resetToken = crypto.randomBytes(32).toString('hex');\n    //         user.resetTokenValid = moment.utc().add(1, 'days').toDate();\n    //         return user.save().then((user) => {\n    //             return emailmanager.send(user.email, 'Jdash Cloud - Password Reset Request', 'resetpassword.ejs', {\n    //                 email: user.email,\n    //                 resetLink: `${url}/#!/app/account/resetpasswordreturn/${user.resetToken}`\n    //             });\n    //         });\n    //     })\n    // }\n\n    // @Auth.Anonymous()\n    // passwordResetReturnRoute() {\n    //     var resetToken = this.req.params.token\n    //     var newPassword = this.req.body.password\n    //     if (typeof resetToken === 'undefined' || validator.isEmpty(newPassword)) {\n    //         return Promise.reject(new http.ValidationError('Invalid Token'));\n    //     }\n    //     return this.passwordResetReturn(newPassword, resetToken).then(() => {\n    //         this.res.sendStatus(200);\n    //     })\n    // }\n\n    // passwordResetReturn(pass: string, token: string) {\n\n    //     return UserModel.findOne().where('resetToken', token).then((user) => {\n    //         if (!user) {\n    //             return Promise.reject(new http.NotFoundError('No password request for this user has been found.'))\n    //         }\n    //         if (moment.utc().toDate() > user.resetTokenValid) {\n    //             return Promise.reject(new http.ValidationError('Token has expired. Please request a new token.'));\n    //         }\n    //         user.resetToken = null;\n    //         user.resetTokenValid = null;\n\n    //         var passwordSalt = bcrypt.genSaltSync(10);\n    //         var hash = bcrypt.hashSync(pass, passwordSalt);\n    //         user.password = hash;\n\n    //         user.save().then((user) => {\n    //             return emailmanager.send(user.email, 'JDash Cloud - Password Change', 'passwordchange.ejs', {});\n    //         })\n    //     });\n\n    // }\n\n    // changePasswordRoute() {\n    //     var oldPass = this.req.body.oldPass;\n    //     var newPass = this.req.body.newPass;\n    //     if (validator.isEmpty(newPass) || validator.isEmpty(oldPass)) return this.next(new http.ValidationError('Empty Password'));\n    //     return this.retrieve(this.req.params.userid).then((user) => {\n    //         if (!bcrypt.compareSync(oldPass, user.password)) return Promise.reject<any>(new http.PermissionError());\n    //         return this.changePassword(user, newPass).then(() => this.res.sendStatus(200));\n    //     })\n    // }\n\n    // changePassword(user: IUserDocument, newPass: string) {\n    //     var passwordSalt = bcrypt.genSaltSync(10);\n    //     var hash = bcrypt.hashSync(newPass, passwordSalt);\n    //     user.password = hash;\n    //     return user.save().then((user) => {\n    //         return emailmanager.send(user.email, 'JDash Cloud - Password Change', 'passwordchange.ejs', {\n    //         });\n    //     })\n    // }\n\n    // @Auth.Anonymous()\n    // changeSettingsRoute() {\n\n    // }\n\n    // changeSettings() {\n\n    // }\n\n    // @Auth.Anonymous()\n    // startDemoRoute() {\n    //     var email = this.req.body.email;\n    //     return this.startDemo(email).then((token) => {\n    //         var result = {\n    //             usertoken: token\n    //         }\n    //         this.res.send(result);\n    //     })\n    // }\n\n    // startDemo(email: string) {\n    //     return this.retrieveByEMail(email).then((user) => {\n    //         if (user) {\n    //             return ApplicationModel.findOne({ account: user.account }).exec();\n    //         } else {\n    //             var randomPass = (Math.floor(Math.random() * 999999) + 100000).toString();\n    //             var newUser: SignupModel = {\n    //                 email: email,\n    //                 password: randomPass\n    //             }\n    //             return this.create(newUser).then((createdUser) => {\n    //                 return ApplicationModel.findOne({ account: createdUser.account }).exec();\n    //             });\n    //         }\n    //     }).then((defaultApp) => {\n    //         return JDashAuth.userToken(email, { secret: defaultApp.secret, apikey: defaultApp.apikey });\n    //     });\n    // }\n\n    // delete(user: IUserDocument) {\n    //     var promiseList = [];\n    //     if (user.integrations.stripe && user.integrations.stripe.remoteId)\n    //         promiseList.push(stripe.deleteCustomer(user.integrations.stripe.remoteId));\n    //     promiseList.push(RefreshTokenModel.find({ userId: user._id }).remove());\n    //     return Promise.all(promiseList).then(() => super.delete(user));\n    // }\n\n    // update(doc: IUserDocument, updateValues: any) {\n    //     debugger;\n    //     doc.country = updateValues.country || doc.country;\n    //     doc.language = updateValues.language || doc.language;\n    //     return doc.save().then((doc) => null);\n    // }\n\n    // protected static generateCreateRoute(url: string, router: express.Router) {\n    //     router.post(url, this.BindRequest('createRoute'));\n    // }\n\n    static SetRoutes(router: express.Router) {\n        // UserRoute.SetCrudRoutes(\"/user\", router, {\n        //     create: true,\n        //     update: true\n        // });\n\n        //router.post(\"/user/authenticate\", UserRoute.BindRequest(this.prototype.authenticateRoute));\n        router.post(\"/user/signup\", UserRoute.BindRequest(this.prototype.signupRoute));\n        router.post(\"/user/signupverify\", UserRoute.BindRequest(this.prototype.verifysignupRoute));\n        router.post(\"/user/signupcomplete\", UserRoute.BindRequest(this.prototype.completesignupRoute));\n        router.post(\"/user/findsemt\", UserRoute.BindRequest(this.prototype.findSemtRoute));\n\n\n        // router.post(\"/user/resetpassword\", UserRoute.BindRequest('resetPasswordRequestRoute'));\n        // router.post(\"/user/changepassword/:userid\", UserRoute.BindRequest('changePasswordRoute'));\n        // router.post(\"/user/useRefreshToken\", UserRoute.BindRequest('useRefreshTokenRoute'));\n        // router.post(\"/user/settings\", UserRoute.BindRequest('changeSettingsRoute'));\n        // router.post(\"/user/resetpasswordreturn/:token\", UserRoute.BindRequest('passwordResetReturnRoute'));\n        // router.post(\"/user/startdemo\", UserRoute.BindRequest('startDemoRoute'));\n\n\n    }\n}\n"],"sourceRoot":"../../../src/"}