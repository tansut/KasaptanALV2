{"version":3,"sources":["../src/routes/api/area.ts"],"names":[],"mappings":"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","file":"area.js","sourcesContent":["import { Auth } from '../../lib/common';\nimport { ApiRouter } from '../../lib/router';\nimport * as express from \"express\";\nimport * as maps from \"@google/maps\"\nimport ButcherModel from '../../db/models/butcher';\nimport moment = require('moment');\nimport { ValidationError } from '../../lib/http';\nimport Helper from '../../lib/helper';\nimport Resource from '../../db/models/resource';\nimport Area from '../../db/models/area';\nimport * as fs from \"fs\";\nimport * as mime from \"mime-types\"\nimport Butcher from '../../db/models/butcher';\nimport * as Jimp2 from 'jimp'\nconst Jimp = <Jimp2>require('jimp');\nimport * as path from \"path\"\nimport { parse } from 'querystring';\n\nexport default class Route extends ApiRouter {\n\n\n\n\n    @Auth.Anonymous()\n    getAreas() {\n\n        let promise: Promise<any>;\n\n        if (this.req.query.parentLevel) {\n            promise = Area.findAll({\n                where: {\n                    parentid: parseInt(this.req.params.parentid),\n                    level: parseInt(this.req.query.parentLevel as string) + 1,\n                    //status: 'generic'\n                },\n                order: [[\"displayOrder\", \"DESC\"], [\"Name\", \"ASC\"]]\n            }).then((parentSubs => {\n                let ids = parentSubs.map(i => i.id);\n                return {\n                    parentid: ids\n                }\n            }))\n        } else {\n            let where = <any>{};\n            this.req.query.level ? (where[\"level\"] = parseInt(this.req.query.level as string)) : where[\"level\"] = 1;\n            this.req.params.parentid ? (where[\"parentid\"] = this.req.params.parentid) : null;\n            if (where[\"level\"] == 1) { \n                where[\"status\"] = \"active\"\n            }\n            //where['status'] = 'generic';\n            promise = Promise.resolve(where)\n        }\n        return promise.then(where => {\n            return Area.findAll({\n                where: where,\n                order: [[\"displayOrder\", \"DESC\"], [\"Name\", \"ASC\"]]\n            }\n            ).then(areas => areas.map(area => {\n                if (where[\"level\"] == 1) {\n\n                }\n                return {\n                    id: area.id,\n                    name: area.name,\n                    slug: area.slug\n                }\n            })).then(data => this.res.send(data))\n        })\n    }\n\n    static SetRoutes(router: express.Router) {\n        router.get(\"/area/children/:parentid?\", Route.BindRequest(this.prototype.getAreas));\n    }\n}\n\n"],"sourceRoot":"../../../src/"}