{"version":3,"sources":["../src/routes/anonymous.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,0CAAsD;AAKtD,0CAAqC;AAErC,0CAAmC;AAQnC,qCAAmC;AACnC,IAAI,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACxC,IAAI,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;AAEvC,MAAqB,KAAM,SAAQ,mBAAU;IAA7C;;QAEI,cAAS,GAAG,KAAK,CAAC;QAClB,cAAS,GAAG,EAAE,CAAC;QACf,aAAQ,GAAG,EAAE,CAAA;IAgDjB,CAAC;IA9CG,UAAU,CAAC,MAAW,SAAS;QAC3B,IAAI,CAAC,QAAQ,CAAC,yBAAyB,EAAE;YACrC,OAAO,EAAE,GAAG;SACf,CAAC,CAAA;IACN,CAAC;IAKK,UAAU;;YAEZ,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;YACjE,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACzC,IAAI,KAAK,IAAI,KAAK,EAAE;gBAChB,IAAI,SAAS,GAAG,IAAI,cAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;gBACtD,IAAI,IAAI,GAAG,MAAM,SAAS,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;gBACzD,IAAI,IAAI,EAAE;oBACN,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,IAAI,KAAK,EAAE;wBACnC,MAAM,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;wBACtC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;wBACtB,IAAI,CAAC,SAAS,GAAG,gBAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;wBAC9C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAW,CAAA;wBAC1C,IAAI,CAAC,UAAU,CAAC,EAAC,IAAI,EAAE,mFAAmF,EAAE,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;qBAC9H;yBAAM;wBACH,IAAI,CAAC,UAAU,CAAC,EAAC,IAAI,EAAE,2CAA2C,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC,CAAC;qBACvF;iBACJ;;oBAAM,IAAI,CAAC,UAAU,CAAC,EAAC,IAAI,EAAE,2BAA2B,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC,CAAC;aAC9E;;gBAAM,IAAI,CAAC,UAAU,CAAC,EAAC,IAAI,EAAE,gDAAgD,EAAE,IAAI,EAAE,QAAQ,EAAC,CAAC,CAAC;QACrG,CAAC;KAAA;IAIK,SAAS;;YAEX,IAAI,CAAC,UAAU,EAAE,CAAC;QACtB,CAAC;KAAA;IAKD,MAAM,CAAC,SAAS,CAAC,MAAsB;QACnC,MAAM,CAAC,GAAG,CAAC,iBAAiB,EAAE,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;QAC5E,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;QAC9E,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAA;QACzD,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,CAAA;IAC/D,CAAC;CACJ;AArCG;IADC,aAAI,CAAC,SAAS,EAAE;;;;uCAoBhB;AAID;IADC,aAAI,CAAC,SAAS,EAAE;;;;sCAIhB;AAzCL,wBAoDC","file":"anonymous.js","sourcesContent":["import { ApiRouter, ViewRouter } from '../lib/router';\nimport * as express from \"express\";\nimport * as maps from \"@google/maps\"\nimport ButcherModel from '../db/models/butcher';\nimport moment = require('moment');\nimport { Auth } from '../lib/common';\nimport AreaModel from '../db/models/area';\nimport Helper from '../lib/helper';\nimport Area from '../db/models/area';\nimport Category from '../db/models/category';\nimport Content from '../db/models/content';\nimport config from '../config';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { readFileSync } from 'fs';\nimport UserRoute from './api/user';\nlet ellipsis = require('text-ellipsis');\nvar MarkdownIt = require('markdown-it')\n\nexport default class Route extends ViewRouter {\n\n    showLogin = false;\n    loginUser = '';\n    redirect = \"\"\n\n    renderPage(msg: any = undefined) {        \n        this.sendView(`pages/resetpassword.ejs`, {\n            _usrmsg: msg\n        })\n    }\n\n\n\n    @Auth.Anonymous()\n    async resetRoute() {\n\n        let email = (this.req.body[\"recover-email\"] || \"\").toLowerCase();\n        let phone = this.req.body[\"recover-tel\"];\n        if (email && phone) {\n            let userRoute = new UserRoute(this.constructorParams);\n            let user = await userRoute.retrieveByEMailOrPhone(phone);\n            if (user) {\n                if (user.email.toLowerCase() == email) {\n                    await userRoute.sendNewPassword(user);\n                    this.showLogin = true;\n                    this.loginUser = Helper.getPhoneNumber(phone);\n                    this.redirect = this.req.query.r as string\n                    this.renderPage({text: \"Yeni şifreniz telefonunuza gönderildi. Şifrenizi kullanarak giriş yapabilirsiniz.\", type: \"info\"});    \n                } else {\n                    this.renderPage({text: \"Geçersiz e-posta adresi/telefon numarası.\",type: \"danger\"}); \n                }\n            } else this.renderPage({text: \"Geçersiz telefon numarası\",type: \"danger\"});\n        } else this.renderPage({text: \"Geçersiz e-posta adresi veya telefon numarası.\", type: \"danger\"});\n    }\n\n\n    @Auth.Anonymous()\n    async viewRoute() {\n\n        this.renderPage();\n    }\n\n\n\n\n    static SetRoutes(router: express.Router) {\n        router.get(\"/reset-password\", Route.BindRequest(Route.prototype.viewRoute));\n        router.post(\"/reset-password\", Route.BindRequest(Route.prototype.resetRoute));\n        router.get('/login', Route.BindToView(\"pages/login.ejs\"))\n        router.get('/signup', Route.BindToView(\"pages/signup.ejs\"))\n    }\n}"],"sourceRoot":"../../src/"}