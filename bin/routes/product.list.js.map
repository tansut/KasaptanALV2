{"version":3,"sources":["../src/routes/product.list.ts"],"names":[],"mappings":"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","file":"product.list.js","sourcesContent":["import { ApiRouter, ViewRouter } from '../lib/router';\nimport * as express from \"express\";\nimport * as maps from \"@google/maps\"\nimport ProductModel from '../db/models/product';\nimport { Auth } from '../lib/common';\nimport Helper from '../lib/helper';\nimport Resource from '../db/models/resource';\nimport ResourceRoute from './resource';\nimport * as path from \"path\"\nimport * as Jimp2 from 'jimp'\nconst Jimp = <Jimp2>require('jimp');\nimport * as fs from \"fs\"\nimport moment = require('moment');\nimport Category from '../db/models/category';\nimport ProductCategory from '../db/models/productcategory';\nimport { Json } from 'sequelize/types/lib/utils';\nimport ProductManager from '../lib/productManager';\nlet ellipsis = require('text-ellipsis');\nimport * as _ from \"lodash\";\nimport Product from '../db/models/product';\n\nexport default class Route extends ViewRouter {\n\n    products: [];\n    categories: Category[];\n\n\n    browseTypes = { \n        reyon: 'Reyonlar',\n        list: 'Listeler'\n    }\n    \n\n\n    filterProductsByCategory(slug: string, chunk: number = 0) {\n        let products = ProductManager.filterProductsByCategory(this.products, { slug: slug }, { productType: 'generic' }, { chunk: chunk })\n        return products;\n    }\n\n\n    filterCategories(type: string) {\n        return ProductManager.filterCategories(this.categories, { type: type })\n    }\n\n     async fillProducts(categories: Category[]) {\n        let cacheproducts = null;// this.dataCache.get(\"products\")\n        if (!cacheproducts) {\n            let products = await ProductModel.findAll({\n                order: [\"displayOrder\"],\n                where: {\n                    productType: 'generic'\n                },\n                include: [{\n                    model: ProductCategory,\n                    include: [Category]\n                },\n                ],\n            })\n            let productsByCategory = {}\n            categories.map(p => {\n                let prods = ProductManager.filterProductsByCategory(products, {\n                    slug: p.slug\n                })\n                productsByCategory[p.slug] = (<any>prods) // .map(p => p.toJSON())\n            });\n            cacheproducts = {\n                all: products, //.map(p => p.toJSON()),\n                byCategory: productsByCategory\n            }\n            //this.dataCache.set(\"products\", cacheproducts);\n        }\n        return cacheproducts;\n    }\n\n\n\n    @Auth.Anonymous()\n    async productsView() {\n        //this.products = await ProductManager.getProducts();\n        //((this.categories = await ProductManager.getCategories();\n\n        //((this.res.render('pages/all-products.ejs', this.viewData({ ellipsis: ellipsis, products: this.products }))\n    }\n\n    @Auth.Anonymous()\n    async reyonView() {\n        // this.products =  await ProductManager.getProducts();\n        // this.categories = this.req.__categories;\n        this.products = await this.fillProducts(this.req.__categories);\n        this.sendView('pages/reyon-view.ejs', { ellipsis: ellipsis, products: this.products })\n    }\n\n    @Auth.Anonymous()\n    async redirectedReyon() {\n        this.res.redirect('/kasap-urunleri', 301);\n    }\n\n\n\n    static SetRoutes(router: express.Router) {\n        //router.get(\"/tum-lezzetler\", Route.BindRequest(Route.prototype.productsView));\n        router.get(\"/lezzetler\", Route.BindRequest(Route.prototype.redirectedReyon));\n        router.get(\"/kasap-urunleri\", Route.BindRequest(Route.prototype.reyonView));\n\n    }\n}"],"sourceRoot":"../../src/"}