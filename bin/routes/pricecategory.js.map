{"version":3,"sources":["../src/routes/pricecategory.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,0CAAsD;AAKtD,0CAAqC;AAMrC,IAAI,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAGxC,0DAAmD;AAOnD,MAAqB,KAAM,SAAQ,mBAAU;IAKzC,UAAU,CAAC,IAAY;QACnB,IAAI,SAAS,GAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC;QACzC,IAAI,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC;QACpD,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC;YAChC,SAAS,EAAE,SAAS,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI;YAC1C,eAAe,EAAE,eAAe;YAChC,aAAa,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC;SACxF,CAAC,CAAC,CAAA;IACP,CAAC;IAIK,YAAY;;YACd,IAAI,CAAC,UAAU,CAAC,4BAA4B,CAAC,CAAA;QACjD,CAAC;KAAA;IAGK,wBAAwB,CAAC,OAAgB,KAAK;;YAChD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE;gBAC3B,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;aACtB;YACD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACzF,IAAI,CAAC,IAAI,CAAC,QAAQ;gBAAE,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;YAEvC,IAAI,CAAC,QAAQ,GAAG,MAAM,wBAAc,CAAC,uBAAuB,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;YAEzF,IAAI,CAAC,UAAU,CAAC,yBAAyB,CAAC,CAAA;QAG9C,CAAC;KAAA;IAID,MAAM,CAAC,SAAS,CAAC,MAAsB;QACnC,MAAM,CAAC,GAAG,CAAC,YAAY,EAAE,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAC,CAAC;QACtF,MAAM,CAAC,GAAG,CAAC,eAAe,EAAE,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;IACjF,CAAC;CACJ;AAzBG;IADC,aAAI,CAAC,SAAS,EAAE;;;;yCAGhB;AAGD;IADC,aAAI,CAAC,SAAS,EAAE;;;;qDAahB;AAlCL,wBA0CC","file":"pricecategory.js","sourcesContent":["import { ApiRouter, ViewRouter } from '../lib/router';\nimport * as express from \"express\";\nimport * as maps from \"@google/maps\"\nimport ButcherModel from '../db/models/butcher';\nimport moment = require('moment');\nimport { Auth } from '../lib/common';\nimport AreaModel from '../db/models/area';\nimport Helper from '../lib/helper';\nimport Area from '../db/models/area';\nimport Category from '../db/models/category';\nimport Resource from '../db/models/resource';\nlet ellipsis = require('text-ellipsis');\nimport ResourceRoute from './resource';\nimport Product from '../db/models/product';\nimport ProductManager from '../lib/productManager';\nimport ProductsApi from './api/product';\nimport { ResourceCacheItem } from '../lib/cache';\nimport { Op } from 'sequelize';\nimport config from '../config';\nimport PriceCategory from '../db/models/pricecategory';\n\nexport default class Route extends ViewRouter {\n\n    category: PriceCategory;\n    products: Product[];\n\n    renderPage(view: string) {\n        let pageTitle =  this.category.pageTitle;\n        let pageDescription = this.category.pageDescription;\n        this.res.render(view, this.viewData({\n            pageTitle: pageTitle || this.category.name,\n            pageDescription: pageDescription,\n            pageThumbnail: this.req.helper.imgUrl('category-photos', this.category.category.slug)\n        }))\n    }\n\n\n    @Auth.Anonymous()\n    async viewAllRoute() {\n        this.renderView(\"pages/reyon-price-view.ejs\")\n    }\n\n    @Auth.Anonymous()\n    async viewProductCategoryRoute(back: boolean = false) {\n        if (!this.req.params.category) {\n            return this.next();\n        }\n        this.category = this.req.__pricecategories.find(p => p.slug == this.req.params.category);\n        if (!this.category) return this.next();\n\n        this.products = await ProductManager.getProductsOfCategories([this.category.categoryid]);\n\n        this.renderPage('pages/pricecategory.ejs')\n\n        \n    }\n\n\n\n    static SetRoutes(router: express.Router) {\n        router.get(\"/:category\", Route.BindRequest(Route.prototype.viewProductCategoryRoute));\n        router.get(\"/et-fiyatlari\", Route.BindRequest(Route.prototype.viewAllRoute));\n    }\n}"],"sourceRoot":"../../src/"}