{"version":3,"sources":["../src/routes/admin/category.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,6CAAyD;AAWzD,uDAAgD;AAEhD,6DAAsD;AAEtD,MAAqB,KAAM,SAAQ,mBAAU;IAKnC,aAAa;;YAEf,IAAI,IAAI,GAAG,MAAM,kBAAQ,CAAC,OAAO,CAAC;gBAC9B,KAAK,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;aAC1B,CAAC,CAAA;YAEF,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,+BAA+B,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,CAAA;QACzF,CAAC;KAAA;IAEK,oBAAoB;;YACtB,IAAI,QAAQ,GAAG,MAAM,kBAAQ,CAAC,OAAO,CAAC;gBAClC,KAAK,EAAE;oBACH,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ;iBACjC;aACJ,CAAC,CAAC;YAEH,IAAI,QAAQ,GAAG,MAAM,wBAAc,CAAC,uBAAuB,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3E,IAAI,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAA,EAAE,CAAA,CAAC,CAAC,EAAE,IAAI,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YAC1E,IAAI,SAAS,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAA,EAAE,CAAA,CAAC,CAAC,UAAU,IAAI,QAAQ,CAAC,EAAE,CAAC,CAAC;YACxE,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,QAAQ,EAAE;gBAC9B,SAAS,CAAC,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAC9D,MAAM,SAAS,CAAC,IAAI,EAAE,CAAC;aAC1B;iBAAM;gBACH,MAAM,SAAS,CAAC,OAAO,EAAE,CAAC;aAC7B;YAED,QAAQ,GAAG,MAAM,wBAAc,CAAC,uBAAuB,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;YAEvE,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,sCAAsC,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAA;QAEtH,CAAC;KAAA;IAGK,gBAAgB;;YAElB,IAAI,QAAQ,GAAG,MAAM,kBAAQ,CAAC,OAAO,CAAC;gBAClC,KAAK,EAAE;oBACH,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ;iBACjC;aACJ,CAAC,CAAA;YAEF,IAAI,QAAQ,GAAG,MAAM,wBAAc,CAAC,uBAAuB,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;YAE3E,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,sCAAsC,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAA;QACtH,CAAC;KAAA;IAED,MAAM,CAAC,SAAS,CAAC,MAAsB;QACnC,MAAM,CAAC,GAAG,CAAC,gBAAgB,EAAE,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC;QAC/E,MAAM,CAAC,GAAG,CAAC,8BAA8B,EAAE,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC;QAChG,MAAM,CAAC,IAAI,CAAC,8BAA8B,EAAE,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC,CAAC;IACzG,CAAC;CACJ;AAxDD,wBAwDC","file":"category.js","sourcesContent":["import { ApiRouter, ViewRouter } from '../../lib/router';\nimport * as express from \"express\";\nimport * as maps from \"@google/maps\"\nimport ProductModel from '../../db/models/product';\nimport moment = require('moment');\nimport { Auth } from '../../lib/common';\nimport Area from '../../db/models/area';\nimport Resource from '../../db/models/resource';\nimport { parse } from 'querystring';\nimport { threadId } from 'worker_threads';\nimport Helper from '../../lib/helper';\nimport Category from '../../db/models/category';\nimport ProductCategory from '../../db/models/productcategory';\nimport ProductManager from '../../lib/productManager';\n\nexport default class Route extends ViewRouter {\n\n    product: ProductModel;\n\n    \n    async listViewRoute() {\n\n        let data = await Category.findAll({\n            order: [\"name\", \"type\"]\n        })\n\n        this.res.render('pages/admin/category.list.ejs', this.viewData({ categories: data }))\n    }\n\n    async saveProductViewRoute() {\n        let category = await Category.findOne({\n            where: {\n                slug: this.req.params.category\n            }\n        });\n\n        let products = await ProductManager.getProductsOfCategories([category.id]);\n        let product = products.find(p=>p.id == parseInt(this.req.body.productid));\n        let pcategory = product.categories.find(p=>p.categoryid == category.id);\n        if (this.req.body.op == 'update') {\n            pcategory.displayOrder = parseInt(this.req.body.displayorder);\n            await pcategory.save();\n        } else {\n            await pcategory.destroy();\n        }\n\n        products = await ProductManager.getProductsOfCategories([category.id]);\n\n        this.res.render('pages/admin/category.productlist.ejs', this.viewData({ category: category, products: products }))\n\n    }\n\n    \n    async productViewRoute() {\n\n        let category = await Category.findOne({\n            where: {\n                slug: this.req.params.category\n            }\n        })\n\n        let products = await ProductManager.getProductsOfCategories([category.id]);\n            \n        this.res.render('pages/admin/category.productlist.ejs', this.viewData({ category: category, products: products }))\n    }\n\n    static SetRoutes(router: express.Router) {\n        router.get(\"/category/list\", Route.BindRequest(Route.prototype.listViewRoute));\n        router.get(\"/category/:category/products\", Route.BindRequest(Route.prototype.productViewRoute));\n        router.post(\"/category/:category/products\", Route.BindRequest(Route.prototype.saveProductViewRoute));\n    }\n}\n\n"],"sourceRoot":"../../../src/"}